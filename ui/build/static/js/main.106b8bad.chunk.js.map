{"version":3,"sources":["../node_modules/short-unique-id/lib sync","custom.d.ts","just-one/WordCard.tsx","just-one/PencilAnimation.tsx","just-one/WordHint.tsx","just-one/WordHintInput.tsx","just-one/GameStats.tsx","just-one/GameField.tsx","just-one/NewPlayer.tsx","just-one/GameLobby.tsx","just-one/GameEndView.tsx","just-one/JustOne.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","GamePhase","WordCard","currentWord","this","props","word","guesser","guesserText","guess","classes","guessedRight","push","className","join","style","color","React","Component","PencilAnimation","styleObj1","backgroundColor","styleObj2","borderTopColor","WordHint","currentHint","hint","styleObj","author","showPencil","duplicate","length","extraClasses","WordHintInput","state","value","handleChange","bind","submitHint","keyPressed","event","setState","target","key","TextField","required","label","onChange","onKeyPress","Button","variant","disabled","onClick","buttonText","GameStats","game","round","words","correctWords","wrongWords","GameField","currentUserId","localStorage","getItem","showHints","resolveRound","hintWord","currentUser","getCurrentUser","fetch","GAME_URL","method","headers","body","JSON","stringify","catch","console","log","countCorrect","solutionButton2","currentGuesser","name","isGuesser","isComparingPhase","phase","HintComparing","isGuessingPhase","Guessing","isSolutionPhase","Solution","currentGuess","currentHints","hints","map","hintObj","isDuplicate","solutionButton1","players","find","player","ShortUniqueId","require","default","NewPlayer","setRandomColor","addPlayer","includes","updatePlayer","startsWith","index","parseInt","substr","newWords","generateRandomColor","enteredWords","wordFields","Typography","i","placeholder","enterDisabled","some","InputProps","endAdornment","InputAdornment","position","AccountCircle","Opacity","dictionary","generator","GameLobby","SETTING_NAME","SETTING_COLOR","setPlayerProps","startGame","SETTING_ID","then","res","json","data","setLocalPlayer","setItem","setTheme","listOfPlayers","isHost","host","isInGame","findIndex","newPlayerName","newPlayerColor","GameEndView","wordResult","JustOne","allWords","_interval","createGame","gameId","loadGame","setInterval","loadGames","clearInterval","currentGame","games","filter","p","allGames","optionalContent","gameList","Init","End","to","apiPort","window","location","hostname","protocol","App","primaryColor","currentUserName","theme","createMuiTheme","palette","primary","main","secondary","ThemeProvider","AppBar","Toolbar","IconButton","edge","aria-label","Home","Chip","icon","path","component","match","params","children","Boolean","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iGAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,4CCQbC,E,iMCNCC,EAAb,uKAGG,IAAMC,EAAcC,KAAKC,MAAMC,KACxBC,EAAUH,KAAKC,MAAME,QACvBC,EAAc,GACdD,EACFC,EAAcJ,KAAKC,MAAMI,MAASF,EAAU,mBAAsBH,KAAKC,MAAMI,MAAUF,EAAU,cACxFH,KAAKC,MAAMI,QACpBD,EAAc,gBAAkBJ,KAAKC,MAAMI,OAE7C,IAAMC,EAAU,CAAC,aASjB,OARIN,KAAKC,MAAMI,QACTL,KAAKC,MAAMM,aACbD,EAAQE,KAAK,qBAEbF,EAAQE,KAAK,oBAKhB,yBAAKC,UAAWH,EAAQI,KAAK,MAC5B,8BAAOX,GACJK,GAAe,0BAAMK,UAAU,aAAaE,MAAO,CAACC,MAAOZ,KAAKC,MAAMW,QAASR,QAvBxF,GAA8BS,IAAMC,Y,SDMxBjB,O,eAAAA,I,6BAAAA,I,iCAAAA,I,uBAAAA,I,uBAAAA,I,cAAAA,M,KEVL,IAAMkB,EAAb,uKAGI,IAAMC,EAAY,CACjBC,gBAAiBjB,KAAKC,MAAMW,OAEvBM,EAAY,CACjBC,eAAgBnB,KAAKC,MAAMW,OAG5B,OACD,yBAAKH,UAAU,UACV,yBAAKA,UAAU,OAAOE,MAAOK,IAC7B,yBAAKP,UAAU,MAAME,MAAOO,SAbpC,GAAqCL,IAAMC,WCK9BM,EAAb,uKAGG,IAAMC,EAAcrB,KAAKC,MAAMqB,KACxBV,EAAQZ,KAAKC,MAAMW,MACnBW,EAAW,CAChB,MAASX,GAEJY,EAASxB,KAAKC,MAAMuB,OACpBC,EAAazB,KAAKC,MAAMwB,aAAezB,KAAKC,MAAMqB,KAElDhB,EAAU,CAAC,aACbN,KAAKC,MAAMyB,WAAWpB,EAAQE,KAAK,uBACnCa,GAAeA,EAAYM,OAAS,GAAIrB,EAAQE,KAAK,kBAChDa,GAAeA,EAAYM,OAAS,IAAIrB,EAAQE,KAAK,kBAC9D,IAAMoB,EAAetB,EAAQI,KAAK,KAElC,OACC,yBAAKD,UAAWmB,EAAcjB,MAAOY,GACjCF,EACAI,GAAc,kBAAC,EAAD,CAAiBb,MAAOA,IACtCY,GAAU,0BAAMf,UAAU,cAAce,QArBjD,GAA8BX,IAAMC,W,SCEvBe,EAAb,kDAEE,WAAY5B,GAA4B,IAAD,8BACtC,cAAMA,IACA6B,MAAQ,CAACC,MAAO,IAErB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBANmB,EAFzC,yDAWeG,GACXpC,KAAKqC,SAAS,CAACN,MAAOK,EAAME,OAAOP,UAZvC,mCAgBG/B,KAAKC,MAAMiC,WAAWlC,KAAK8B,MAAMC,OACjC/B,KAAKqC,SAAS,CAACN,MAAO,OAjBzB,iCAoBaK,GACQ,UAAdA,EAAMG,KACRvC,KAAKkC,eAtBV,+BA2BI,OACC,yBAAKzB,UAAU,mBACd,kBAAC+B,EAAA,EAAD,CAAWC,UAAQ,EAACC,MAAO1C,KAAKC,MAAMyC,OAAS,eAC9CX,MAAO/B,KAAK8B,MAAMC,MAClBY,SAAU3C,KAAKgC,aACfY,WAAY5C,KAAKmC,aACnB,kBAACU,EAAA,EAAD,CAAQC,QAAQ,YAAYlC,MAAM,UACjCmC,UAAW/C,KAAK8B,MAAMC,MACtBiB,QAAShD,KAAKkC,YAAalC,KAAKC,MAAMgD,YAAc,2BAnC1D,GAAmCpC,IAAMC,WCN5BoC,EAAb,uKAEI,IAAMC,EAAcnD,KAAKC,MAAMkD,KAE/B,OACE,yBAAK1C,UAAU,iBAAf,UACU0C,EAAKC,MAAM,EADrB,IACyBD,EAAKE,MAAM1B,OADpC,eACwDwB,EAAKG,aAAa3B,OAD1E,cAC6FwB,EAAKI,WAAW5B,YANnH,GAA+Bd,IAAMC,WCYxB0C,EAAb,kDAGE,WAAYvD,GAAwB,IAAD,8BACjC,cAAMA,IAHDwD,cAAwBC,aAAaC,QAV3B,aAUkD,GAKjE,EAAKzB,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAK2B,UAAY,EAAKA,UAAU3B,KAAf,gBACjB,EAAK5B,MAAQ,EAAKA,MAAM4B,KAAX,gBACb,EAAK4B,aAAe,EAAKA,aAAa5B,KAAlB,gBAEpB,EAAKH,MAAQ,GARoB,EAHrC,oGAkBagC,GACT,IAAMC,EAAcC,EAAehE,KAAKC,MAAMkD,KAAMnD,KAAKyD,eACzD,GAAKM,EAAL,CACA,IAAMzC,EAAc,CAAEA,KAAMwC,EAAUtC,OAAQuC,GAE9CE,MAAM,GAAD,OAAIC,EAAJ,YAAgBlE,KAAKC,MAAMkD,KAAKvD,GAAhC,SAA2C,CAC9CuE,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACjD,WACrBkD,MAAMC,QAAQC,QA9BrB,kCAkCIT,MAAM,GAAD,OAAIC,EAAJ,YAAgBlE,KAAKC,MAAMkD,KAAKvD,GAAhC,cAAgD,CACnDuE,OAAQ,QACPK,MAAMC,QAAQC,OApCrB,4BAuCQrE,GACJ4D,MAAM,GAAD,OAAIC,EAAJ,YAAgBlE,KAAKC,MAAMkD,KAAKvD,GAAhC,UAA4C,CAC/CuE,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAClE,YACrBmE,MAAMC,QAAQC,OA/CrB,qCAkD8C,IAA/BC,IAA8B,yDACzCV,MAAM,GAAD,OAAIC,EAAJ,YAAgBlE,KAAKC,MAAMkD,KAAKvD,GAAhC,YAA8C,CACjDuE,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACI,mBACrBH,MAAMC,QAAQC,OA1DrB,+BA6DY,IA0BJE,EA1BG,OACDzB,EAAcnD,KAAKC,MAAMkD,KACzBY,EAAcC,EAAeb,EAAMnD,KAAKyD,eACxCtD,EAAUgD,EAAK0B,eAAiB1B,EAAK0B,eAAiB,CAAEC,KAAM,IAAKlF,GAAI,KACvEmF,EAAYhB,GAAeA,EAAYnE,KAAOO,EAAQP,GAEtDoF,EAAmB7B,EAAK8B,QAAUpF,EAAUqF,cAC5CC,EAAkBhC,EAAK8B,QAAUpF,EAAUuF,SAC3CC,EAAkBlC,EAAK8B,QAAUpF,EAAUyF,SAE3CvF,EAAcgF,IAAcM,EAAkB,IAAOlC,EAAKpD,aAAe,GACzEwF,EAAepC,EAAKoC,cAAgB,GACpCC,EAAerC,EAAKsC,MAAMC,KAAI,SAAAC,GAClC,IAAIrE,EAAe,IAUnB,OATI6D,EACF7D,EAAOyD,GAAaY,EAAQC,YAAc,iBAAmBD,EAAQrE,KAC5D0D,EACJD,IAAWzD,EAAOqE,EAAQrE,MACtB+D,GAAoBtB,GAAeA,EAAYnE,KAAO+F,EAAQnE,OAAO5B,GAC9E0B,EAAOqE,EAAQrE,KACLqE,EAAQrE,OAClBA,EAAO,IAEF,kBAAC,EAAD,CAAUiB,IAAKoD,EAAQnE,OAAO5B,GAAI0B,KAAMA,EAAMV,MAAO+E,EAAQnE,OAAOZ,MAAOc,UAAWiE,EAAQC,YAAapE,OAAQmE,EAAQnE,OAAOsD,UAEvIe,EAAkB,kBAAChD,EAAA,EAAD,CAAQC,QAAQ,YAAYlC,MAAM,UAAUoC,QAAS,kBAAM,EAAKa,cAAa,KAA7E,wBAOtB,OALKV,EAAK5C,eACRsF,EAAkB,kBAAChD,EAAA,EAAD,CAAQC,QAAQ,YAAYE,QAAS,kBAAM,EAAKa,cAAa,KAA7D,yBAClBe,EAAkB,kBAAC/B,EAAA,EAAD,CAAQC,QAAQ,YAAYlC,MAAM,UAAUoC,QAAS,kBAAM,EAAKa,cAAa,KAA7E,kBAIlB,yBAAKpD,UAAU,cACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAW0C,KAAMA,IACjB,kBAAC,EAAD,CAAUjD,KAAMH,EAAaI,QAASA,EAAQ2E,KAAMlE,MAAOT,EAAQS,MAAOP,MAAOgF,EAAkBE,EAAe,GAAIhF,aAAc4C,EAAK5C,eACxI4E,GAAmBJ,GAAa,kBAAC,EAAD,CAAe7C,WAAYlC,KAAKK,MAAOqC,MAAM,cAAcO,WAAW,iBACrG8B,GAAaM,GAAmBQ,GAChCd,GAAaM,GAAmBT,GAEpC,yBAAKnE,UAAU,kBACXsE,IAAcI,IAAoBH,GAAoB,kBAAC,EAAD,CAAe9C,WAAYlC,KAAKkC,aACxF,yBAAKzB,UAAU,iBAAiB+E,GAC/BR,IAAqBD,GAAa,kBAAClC,EAAA,EAAD,CAAQC,QAAQ,YAAYlC,MAAM,UAAUoC,QAAShD,KAAK4D,WAAYzD,EAAQ2E,KAAO,yBAzGlI,GAA+BjE,IAAMC,WAgHrC,SAASkD,EAAeb,EAAaM,GACnC,OAAON,EAAK2C,QAAQC,MAAK,SAAAC,GAAM,OAAIA,EAAOpG,KAAO6D,K,sBC/H7CwC,EAAgBC,EAAQ,IAAmBC,QAepCC,EAAb,kDAME,WAAYnG,GAAwB,IAAD,8BACjC,cAAMA,IALD6B,MAAwB,CAC7BuB,MAAO,IAMP,EAAKrB,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKoE,eAAiB,EAAKA,eAAepE,KAApB,gBACtB,EAAKqE,UAAY,EAAKA,UAAUrE,KAAf,gBALgB,EANrC,yDAceG,GACX,GAAI,CAAC,OAAO,SAASmE,SAASnE,EAAME,OAAOwC,MAAO,CAChD,IAAIkB,EAAgB,CAClBpG,GAAI,GACJkF,KAAM9E,KAAKC,MAAM6E,KACjBlE,MAAOZ,KAAKC,MAAMW,OAEM,SAAtBwB,EAAME,OAAOwC,KACfkB,EAAOlB,KAAO1C,EAAME,OAAOP,MACI,UAAtBK,EAAME,OAAOwC,OACtBkB,EAAOpF,MAAQwB,EAAME,OAAOP,OAG9B/B,KAAKC,MAAMuG,aAAaR,QAEnB,GAAI5D,EAAME,OAAOwC,KAAK2B,WAAW,QAAS,CAC/C,IAAMC,EAAQC,SAASvE,EAAME,OAAOwC,KAAK8B,OAAO,IAC1C1G,EAAOkC,EAAME,OAAOP,MAC1B/B,KAAKqC,UAAS,SAACP,EAAO7B,GACpB,IAAM4G,EAAW/E,EAAMuB,MAEvB,OADAwD,EAASH,GAASxG,EACX,CACLmD,MAAOwD,SApCjB,uCA2CI,IAAMb,EAAgB,CACpBpG,GAAI,GACJkF,KAAM9E,KAAKC,MAAM6E,KACjBlE,MAAOkG,KAET9G,KAAKC,MAAMuG,aAAaR,KAhD5B,kCAoDI,IAAMA,EAAgB,CACpBpG,GAAI,GACJkF,KAAM9E,KAAKC,MAAM6E,KACjBlE,MAAOZ,KAAKC,MAAMW,MAClBmG,aAAc/G,KAAK8B,MAAMuB,OAE3BrD,KAAKC,MAAMqG,UAAUN,KA1DzB,+BA8DI,IACMgB,EAAa,GAEjBA,EAAWxG,KACT,kBAACyG,EAAA,EAAD,CAAYnE,QAAQ,YAAYP,IAAI,WAApC,QA/E0B,EA+E1B,oCAKJ,IAAK,IAAI2E,EAAE,EAAGA,EApFgB,EAoFFA,IAC1BF,EAAWxG,KACT,kBAACgC,EAAA,EAAD,CAAWC,UAAQ,EAACC,MAAK,eAAUwE,EAAE,GACnCC,YAAY,oBACZrC,KAAI,cAASoC,GACb3E,IAAG,cAAS2E,GACZnF,MAAO/B,KAAK8B,MAAMuB,MAAM6D,IAAI,GAC5BvE,SAAU3C,KAAKgC,gBAGrB,IAAIoF,GAAiBpH,KAAKC,MAAM6E,MAAQ9E,KAAK8B,MAAMuB,MAAM1B,OA9F3B,GA8FkD3B,KAAK8B,MAAMuB,MAAMgE,MAAK,SAAAnH,GAAI,OAAKA,GAAwB,IAAhBA,EAAKyB,UAE5H,OACE,yBAAKlB,UAAU,cACb,kBAAC+B,EAAA,EAAD,CAAWC,UAAQ,EAACC,MAAM,cACxBoC,KAAK,OACL/C,MAAO/B,KAAKC,MAAM6E,KAClBnC,SAAU3C,KAAKgC,aACfsF,WAAY,CACVC,aACE,kBAACC,EAAA,EAAD,CAAgBC,SAAS,OACvB,kBAACC,EAAA,EAAD,CAAmB/G,MAAO,CAACC,MAAOZ,KAAKC,MAAMW,aAIrD,kBAAC4B,EAAA,EAAD,CAAWC,UAAQ,EAACC,MAAM,eACxByE,YAAY,gBACZrC,KAAK,QACL/C,MAAO/B,KAAKC,MAAMW,MAClB+B,SAAU3C,KAAKgC,aACfsF,WAAY,CACV3G,MAAO,CAACC,MAAOZ,KAAKC,MAAMW,OAC1B2G,aACE,kBAACC,EAAA,EAAD,CAAgBC,SAAS,OACvB,kBAACE,EAAA,EAAD,CAAahH,MAAO,CAACC,MAAOZ,KAAKC,MAAMW,aAI/C,kBAACiC,EAAA,EAAD,CAAQC,QAAQ,YACdE,QAAShD,KAAKqG,gBADhB,gBAECW,EACD,kBAACnE,EAAA,EAAD,CAAQC,QAAQ,YAAYlC,MAAM,UAChCmC,SAAUqE,EACVpE,QAAShD,KAAKsG,WAFhB,mBAhHR,GAA+BzF,IAAMC,WAyH9B,SAASgG,IAUd,MADc,IARI,IAAIb,EAAc,CAClC2B,WAAY,CACV,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,MAGCC,CAAU,GCrIzB,IAAMC,EAAb,kDAOE,WAAY7H,GAAwB,IAAD,8BACjC,cAAMA,IAND6B,MAAwB,CAC7BgD,KAAMpB,aAAaC,QAAQoE,IAAiB,GAC5CnH,MAAO8C,aAAaC,QAAQqE,IAAkBlB,KAAyB,SAMvE,EAAKR,UAAY,EAAKA,UAAUrE,KAAf,gBACjB,EAAKgG,eAAiB,EAAKA,eAAehG,KAApB,gBACtB,EAAKiG,UAAY,EAAKA,UAAUjG,KAAf,gBALgB,EAPrC,2DAeiB+D,GACbhG,KAAKqC,SAAS,CACZyC,KAAMkB,EAAOlB,KACblE,MAAOoF,EAAOpF,OAAS,OAlB7B,gCAsBYoF,GAAgB,IAAD,OACjBvC,EAAgBC,aAAaC,QAAQwE,IAAe,GAC1DnC,EAAOpG,GAAK6D,EACZQ,MAAM,GAAD,OAAIC,EAAJ,YAAgBlE,KAAKC,MAAMkD,KAAKvD,GAAhC,cAAgD,CACnDuE,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACyB,aACrBoC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKC,eAAeD,EAAKvC,QACzB,EAAK3D,SAAS,CACZzB,MAAOkG,KAAyB,QAChChC,KAAM,QAGTN,MAAMC,QAAQC,OAxCrB,qCA2CiBsB,GACbtC,aAAa+E,QAAQN,EAAYnC,EAAOpG,IACxC8D,aAAa+E,QAAQV,EAAc/B,EAAOlB,MACtCkB,EAAOpF,OAAO8C,aAAa+E,QAAQ,cAAezC,EAAOpF,OACzDZ,KAAKC,MAAMyI,UAAY1C,EAAOpF,OAChCZ,KAAKC,MAAMyI,SAAS1C,EAAOpF,SAhDjC,kCAqDIqD,MAAM,GAAD,OAAIC,EAAJ,YAAgBlE,KAAKC,MAAMkD,KAAKvD,GAAhC,UAA4C,CAC/CuE,OAAQ,QACPiE,MAAK,SAACG,OAGN/D,MAAMC,QAAQC,OA1DrB,+BA8DI,IAAMiE,EAAgB3I,KAAKC,MAAMkD,KAAK2C,QAAQJ,KAAI,SAAAM,GAAM,OACtD,kBAAC,EAAD,CAAUzD,IAAKyD,EAAOpG,GAAI0B,KAAM0E,EAAOlB,KAAMlE,MAAOoF,EAAOpF,WAGvD6C,EAAwBC,aAAaC,QAAQwE,IAAe,GAC5DS,IAAoBnF,GAAiBzD,KAAKC,MAAMkD,KAAK0F,OAASpF,EAC9DqF,IAAsBrF,GAAiBzD,KAAKC,MAAMkD,KAAK2C,QAAQiD,WAAU,SAAA/C,GAAM,OAAIA,EAAOpG,KAAO6D,MAAkB,EACnHuF,EAAyBF,IAAa9I,KAAK8B,MAAMgD,KAAQ,IAAM9E,KAAK8B,MAAMgD,KAC1EmE,EAA0BH,IAAa9I,KAAK8B,MAAMlB,MAASkG,IAAwB9G,KAAK8B,MAAMlB,MAEpG,OACE,yBAAKH,UAAU,cACb,yBAAKA,UAAU,eAEVqI,GACD,kBAAC,EAAD,CAAWhE,KAAM9E,KAAK8B,MAAMgD,KAAMlE,MAAOZ,KAAK8B,MAAMlB,MAClD4F,aAAcxG,KAAKiI,eACnB3B,UAAWtG,KAAKsG,YAGlBsC,GACA,kBAAC/F,EAAA,EAAD,CAAQC,QAAQ,YAAYlC,MAAM,UAChCmC,SAAU/C,KAAKC,MAAMkD,KAAK2C,QAAQnE,OAAS,EAC3CqB,QAAShD,KAAKkI,WAFhB,mBAKJ,yBAAKzH,UAAU,eACZkI,EACD,kBAAC,EAAD,CAAUrH,KAAM0H,EAAepI,MAAOqI,EAAgBxH,YAAY,UA1F5E,GAA+BZ,IAAMC,WCTxBoI,EAAb,uKAEI,IAAM/F,EAAcnD,KAAKC,MAAMkD,KACzBG,EAAeH,EAAKG,aAAaoC,KAAI,SAAAyD,GACzC,OAAO,kBAAC,EAAD,CAAU5G,IAAK4G,EAAWjJ,KAAMA,KAAMiJ,EAAWjJ,KAAMG,MAAO8I,EAAW9I,MAAOE,cAAc,OAEjGgD,EAAaJ,EAAKI,WAAWmC,KAAI,SAAAyD,GACrC,OAAO,kBAAC,EAAD,CAAU5G,IAAK4G,EAAWjJ,KAAMA,KAAMiJ,EAAWjJ,KAAMG,MAAO8I,EAAW9I,MAAOE,cAAc,OAGvG,OACE,yBAAKE,UAAU,iBACb,yBAAKA,UAAU,iBACb,wCAAc0C,EAAKG,aAAa3B,OAAhC,KACC2B,GAEH,yBAAK7C,UAAU,eACb,uCAAa0C,EAAKI,WAAW5B,OAA7B,KACC4B,QAlBX,GAAiC1C,IAAMC,WCa1BsI,EAAb,kDAYE,WAAYnJ,GAAsB,IAAD,8BAC/B,cAAMA,IAZDwD,cAAwBC,aAAaC,QAAQwE,IAAe,GAWlC,EAVjCkB,SAAW,CACT,SACA,YACA,QACA,cACA,UACA,YAI+B,EAFzBC,eAEyB,EAG/B,EAAKC,WAAa,EAAKA,WAAWtH,KAAhB,gBAElB,EAAKH,MAAQ,GALkB,EAZnC,gEAqBQ9B,KAAKC,MAAMuJ,QACbxJ,KAAKyJ,WAELzJ,KAAKsJ,UAAYI,YAAY1J,KAAKyJ,SAASxH,KAAKjC,MAnC7B,OAqCnBA,KAAK2J,YAEL3J,KAAKsJ,UAAYI,YAAY1J,KAAK2J,UAAU1H,KAAKjC,MAvC9B,QAWzB,6CAiCI4J,cAAc5J,KAAKsJ,aAjCvB,iCAoCc,IAAD,OACL1J,EAAKI,KAAKC,MAAMuJ,OACf5J,GAELqE,MAAM,GAAD,OAAIC,EAAJ,YAAgBtE,IAClBwI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKlG,SAAS,CACZwH,YAAatB,EAAKpF,UAGrBqB,MAAMC,QAAQC,OA/CrB,kCAkDe,IAAD,OACVT,MAAM,GAAD,OAAIC,EAAJ,SACFkE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,IAAIuB,EAAQvB,EAAKuB,MACjBA,EAAQA,EAAMC,QAAO,SAAC5G,GACpB,OAAsB,IAAfA,EAAK8B,OAAgB,EAAKxB,eAAiBN,EAAK2C,QAAQiD,WAAU,SAAAiB,GAAC,OAAIA,EAAEpK,KAAO,EAAK6D,kBAAkB,KAEhH,EAAKpB,SAAS,CACZ4H,SAAUH,OAGbtF,MAAMC,QAAQC,OA9DrB,mCAkEI,IAAMvB,EA6CC,CAAC,GAAK,GAAI,KAAQ,GAAI,MAAQ,GAAG,QAAU,GAAG,KAAO,IAAI,MAAQ,EAAE,MAAQ,EAAE,MAAQ,GAAG,aAAe,GAAG,WAAa,IA3C9Hc,MAAM,GAAD,OAAIC,EAAJ,QAAoB,CACvBC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACpB,WACrBiF,MAAK,SAACG,GACL9D,QAAQC,IAAI6D,MAEb/D,MAAMC,QAAQC,OA9ErB,+BAkFI,IAEIwF,EACAC,EAHEN,EAA+B7J,KAAK8B,MAAM+H,YAmBhD,OAfIA,EAEAK,EADEL,EAAY5E,QAAUpF,EAAUuK,KAChB,kBAAC,EAAD,CAAWjH,KAAM0G,EAAanB,SAAU1I,KAAKC,MAAMyI,WAC5DmB,EAAY5E,QAAUpF,EAAUwK,IACvB,kBAAC,EAAD,CAAalH,KAAM0G,IAEnB,kBAAC,EAAD,CAAW1G,KAAM0G,KAGjC7J,KAAK8B,MAAMmI,WAAUE,EAAWnK,KAAK8B,MAAMmI,SAASvE,KAAI,SAAAvC,GAAI,OAC9D,kBAAC,IAAD,CAAMZ,IAAKY,EAAKvD,GAAI0K,GAAE,WAAMnH,EAAKvD,KAAjC,iBAAkDuD,EAAKvD,SAEzDsK,EAAkB,kBAACrH,EAAA,EAAD,CAAQC,QAAQ,YAAYlC,MAAM,UAAUoC,QAAShD,KAAKuJ,YAA1D,gBAIlB,yBAAK9I,UAAU,gBACZyJ,EACAC,OAxGT,GAA6BtJ,IAAMC,WCLnC,IACMyJ,EADsC,qBAA7BC,OAAOC,SAASC,SACN,GAAK,QAEjBxG,EADUsG,OAAOC,SAASE,SAAW,KAAOH,OAAOC,SAASC,SAAWH,EAAU,OAC5D,SACrBpC,EAAa,WACbJ,EAAe,aACfC,EAAgB,cAmEd4C,EA1Df,kDAME,WAAY3K,GAAkB,IAAD,8BAC3B,cAAMA,IALD6B,MAAkB,CACvB+I,aAAcnH,aAAaC,QAAQqE,IAXT,WAiB1B,EAAKU,SAAW,EAAKA,SAASzG,KAAd,gBAHW,EAN/B,qDAYW4I,GACP7K,KAAKqC,SAAS,CAACwI,aAAcA,MAbjC,+BAgBY,IAAD,OACDC,EAA+BpH,aAAaC,QAAQoE,GAEpDgD,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAMnL,KAAK8B,MAAM+I,cAEnBO,UAAW,CACTD,KAhCsB,cAqC5B,OACE,kBAAC,IAAD,KACE,kBAACE,EAAA,EAAD,CAAeN,MAAOA,GACtB,yBAAKtK,UAAU,OACb,kBAAC6K,EAAA,EAAD,CAAQ7D,SAAS,UACf,kBAAC8D,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMjB,GAAG,IAAI7J,UAAU,cACrB,kBAAC+K,EAAA,EAAD,CAAYC,KAAK,QAAQ7K,MAAM,UAAU8K,aAAW,QAClD,kBAACC,EAAA,EAAD,QAGJ,kBAAC1E,EAAA,EAAD,CAAYnE,QAAQ,KAAKrC,UAAU,YAAnC,iBAGCqK,GAAmB,kBAACc,EAAA,EAAD,CAAMlJ,MAAOoI,EAAiBe,KAAM,kBAACnE,EAAA,EAAD,UAG5D,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOoE,KAAK,WAAWC,UAAW,SAAC9L,GAAD,OAAqC,kBAAC,EAAD,CAASuJ,OAAQvJ,EAAM+L,MAAMC,OAAOzC,OAAQd,SAAU,EAAKA,cAClI,kBAAC,IAAD,CAAOwD,SAAU,kBAAC,EAAD,gBAjD/B,GAAyBrL,IAAMC,WCnBXqL,QACW,cAA7B3B,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASsB,MACvB,2DCZNI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEdrI,OAAM,SAAAsI,GACLrI,QAAQqI,MAAMA,EAAMC,a","file":"static/js/main.106b8bad.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 106;","// custom module declarations\n\n// TODO \nexport interface IUser {\n    id: string;\n    name: string;\n    color?: string;\n    enteredWords?: string[];\n}\n\nexport interface IHint {\n    hint: string;\n    author: IUser;\n    isDuplicate?: boolean\n}\n\nexport enum GamePhase {\n    Init,\n    HintWriting,\n    HintComparing,\n    Guessing,\n    Solution,\n    End\n}\n\nexport interface WordResult {\n    word: string;\n    guess: string;\n}\n\nexport interface IGame {\n    id: string;\n    name: string;\n    words: string[];\n    players: IUser[];\n    host: string; // hostId\n\n    round: number;\n    phase: GamePhase;\n    currentWord?: string;\n    currentGuesser?: IUser;\n    currentGuess?: string;\n    guessedRight?: boolean;\n    hints: IHint[];\n    correctWords: WordResult[];\n    wrongWords: WordResult[];\n}","import React from 'react';\n\ntype WordCardProps = {\n\tword: string;\n\tguesser?: string;\n\tcolor?: string;\n  guess?: string;\n  guessedRight?: boolean;\n}\n\nexport class WordCard extends React.Component<WordCardProps> {\n\n  render() {\n  \tconst currentWord = this.props.word;\n    const guesser = this.props.guesser;\n    let guesserText = '';\n    if (guesser) {\n      guesserText = this.props.guess ? (guesser + '\\'s Rateversuch: ' + this.props.guess) : (guesser + ' muss raten');\n    } else if (this.props.guess) {\n      guesserText = 'Rateversuch: ' + this.props.guess;\n    }\n    const classes = ['Word-card'];\n    if (this.props.guess) {\n      if (this.props.guessedRight) {\n        classes.push('Word-card-correct');\n      } else {\n        classes.push('Word-card-wrong');\n      }\n    }\n\n    return (\n\t    <div className={classes.join(' ')}>\n\t    \t<span>{currentWord}</span>\n        {guesserText && <span className=\"Author-tag\" style={{color: this.props.color}}>{guesserText}</span>}\n\t    </div>\n    );\n  }\n\n}","import React from 'react';\n\ntype PencilAnimationProps = {\n\tcolor?: string,\n}\n\nexport class PencilAnimation extends React.Component<PencilAnimationProps> {\n\n  render() {\n    const styleObj1 = {\n    \tbackgroundColor: this.props.color,\n    };\n    const styleObj2 = {\n    \tborderTopColor: this.props.color,\n    };\n\n    return (\n\t  <div className=\"pencil\">\n        <div className=\"body\" style={styleObj1}></div>\n        <div className=\"nib\" style={styleObj2}></div>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { PencilAnimation } from './PencilAnimation';\n\ntype WordHintProps = {\n\thint?: string,\n\tcolor?: string,\n\tduplicate?: boolean,\n  author?: string,\n  showPencil?: boolean\n}\n\nexport class WordHint extends React.Component<WordHintProps> {\n\n  render() {\n  \tconst currentHint = this.props.hint;\n    const color = this.props.color;\n    const styleObj = {\n    \t'color': color\n    };\n    const author = this.props.author;\n    const showPencil = this.props.showPencil || !this.props.hint;\n\n    const classes = ['Word-hint'];\n    if (this.props.duplicate) classes.push('Word-hint-duplicate');\n    if (currentHint && currentHint.length > 20) classes.push('Word-hint-huge');\n    else if (currentHint && currentHint.length > 14) classes.push('Word-hint-long');\n    const extraClasses = classes.join(' ');\n\n    return (\n\t    <div className={extraClasses} style={styleObj}>\n        {currentHint}\n        {showPencil && <PencilAnimation color={color}></PencilAnimation>}\n        {author && <span className=\"Author-tag\">{author}</span>}\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\ntype WordHintInputProps = {\n  submitHint: (hint: string)=>void\n  label?: string,\n  buttonText?: string\n};\ntype WordHintInputState = {\n  value: string, \n};\n\nexport class WordHintInput extends React.Component<WordHintInputProps,WordHintInputState> {\n\n  constructor(props: WordHintInputProps) {\n  \tsuper(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.submitHint = this.submitHint.bind(this);\n    this.keyPressed = this.keyPressed.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({value: event.target.value});\n  }\n\n  submitHint() {\n  \tthis.props.submitHint(this.state.value)\n  \tthis.setState({value: ''});\n  }\n\n  keyPressed(event: React.KeyboardEvent<HTMLInputElement>) {\n  \tif (event.key === \"Enter\") {\n  \t  this.submitHint()\n  \t}\n  }\n\n  render() {\n    return (\n\t    <div className=\"Word-hint-input\">\n\t    \t<TextField required label={this.props.label || 'Wort-Hinweis'}\n\t    \t\tvalue={this.state.value} \n\t    \t\tonChange={this.handleChange} \n\t    \t\tonKeyPress={this.keyPressed} />\n  \t\t\t<Button variant=\"contained\" color=\"primary\" \n  \t\t\t\tdisabled={!this.state.value} \n  \t\t\t\tonClick={this.submitHint}>{this.props.buttonText || 'Hinweis abschicken'}</Button>\n\t    </div>\n    );\n  }\n\n}","import React from 'react';\nimport { IGame } from '../custom.d';\n\ntype GameStatsProps = {\n  game: IGame\n};\n\nexport class GameStats extends React.Component<GameStatsProps> {\n  render() {\n    const game: IGame = this.props.game;\n\n    return (\n      <div className=\"Game-progress\">\n        Runde: {game.round+1}/{game.words.length}, Richtige: {game.correctWords.length}, Falsche: {game.wrongWords.length}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport {WordCard} from './WordCard';\nimport { IGame, IHint, IUser, GamePhase } from '../custom.d';\nimport {WordHint} from './WordHint';\nimport {WordHintInput} from './WordHintInput';\nimport {GameStats} from './GameStats';\n\nimport { GAME_URL } from '../App';\n\nconst SETTING_ID = 'playerId';\n\ntype GameFieldProps = {\n  game: IGame\n};\ntype GameFieldState = {\n\n};\n\nexport class GameField extends React.Component<GameFieldProps,GameFieldState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n  constructor(props: GameFieldProps) {\n    super(props);\n\n    this.submitHint = this.submitHint.bind(this);\n    this.showHints = this.showHints.bind(this);\n    this.guess = this.guess.bind(this);\n    this.resolveRound = this.resolveRound.bind(this);\n\n    this.state = {  };\n  }\n\n  componentDidMount() {\n\n  }\n\n  submitHint(hintWord: string) {\n    const currentUser = getCurrentUser(this.props.game, this.currentUserId);\n    if (!currentUser) return; // TODO\n    const hint: IHint = { hint: hintWord, author: currentUser};\n\n    fetch(`${GAME_URL}/${this.props.game.id}/hint`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({hint})\n    }).catch(console.log)\n  }\n\n  showHints() {\n    fetch(`${GAME_URL}/${this.props.game.id}/showHints`, {\n      method: 'PUT'\n    }).catch(console.log)\n  }\n\n  guess(guess: string) {\n    fetch(`${GAME_URL}/${this.props.game.id}/guess`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({guess})\n    }).catch(console.log)\n  }\n\n  resolveRound(countCorrect: boolean = true) {\n    fetch(`${GAME_URL}/${this.props.game.id}/resolve`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({countCorrect})\n    }).catch(console.log)\n  }\n\n  render() {\n    const game: IGame = this.props.game;\n    const currentUser = getCurrentUser(game, this.currentUserId); // TODO\n    const guesser = game.currentGuesser ? game.currentGuesser : { name: '?', id: '?' }; // TODO\n    const isGuesser = currentUser && currentUser.id === guesser.id;\n\n    const isComparingPhase = game.phase === GamePhase.HintComparing;\n    const isGuessingPhase = game.phase === GamePhase.Guessing;\n    const isSolutionPhase = game.phase === GamePhase.Solution;\n\n    const currentWord = isGuesser && !isSolutionPhase ? '?' : (game.currentWord || '');\n    const currentGuess = game.currentGuess || '';\n    const currentHints = game.hints.map(hintObj => {\n      let hint: string = '?';\n      if (isGuessingPhase) {\n        hint = isGuesser && hintObj.isDuplicate ? 'LEIDER DOPPELT' : hintObj.hint;\n      } else if (isComparingPhase) {\n        if (!isGuesser) hint = hintObj.hint;\n      } else if (isSolutionPhase || (currentUser && currentUser.id === hintObj.author.id)) {\n        hint = hintObj.hint;\n      } else if (!hintObj.hint) {\n        hint = ''; // TODO\n      }\n      return <WordHint key={hintObj.author.id} hint={hint} color={hintObj.author.color} duplicate={hintObj.isDuplicate} author={hintObj.author.name}/>\n    });\n    let solutionButton1 = <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(true)}>Super, weiter geht's</Button>;\n    let solutionButton2;\n    if (!game.guessedRight) {\n      solutionButton1 = <Button variant=\"contained\" onClick={() => this.resolveRound(true)}>Das zählt trotzdem</Button>;\n      solutionButton2 = <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(false)}>Leider falsch</Button>;\n    }\n\n    return (\n      <div className=\"Game-field\">\n        <div className=\"Current-word\">\n          <GameStats game={game}></GameStats>\n          <WordCard word={currentWord} guesser={guesser.name} color={guesser.color} guess={isSolutionPhase ? currentGuess : ''} guessedRight={game.guessedRight}/>\n          {isGuessingPhase && isGuesser && <WordHintInput submitHint={this.guess} label=\"Rateversuch\" buttonText=\"Jetzt raten\"/>}\n          {!isGuesser && isSolutionPhase && solutionButton1}\n          {!isGuesser && isSolutionPhase && solutionButton2}\n        </div>\n        <div className=\"Current-hints\">\n          {!isGuesser && !isGuessingPhase && !isComparingPhase && <WordHintInput submitHint={this.submitHint}/>}\n          <div className=\"WordHint-list\">{currentHints}</div>\n          {isComparingPhase && !isGuesser && <Button variant=\"contained\" color=\"primary\" onClick={this.showHints}>{guesser.name + ' kann losraten!'}</Button>}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction getCurrentUser(game: IGame, currentUserId: string): IUser|undefined {\n  return game.players.find(player => player.id === currentUserId);\n}\n","import React from 'react';\nimport { IUser } from '../custom.d';\nimport { Button, Typography, InputAdornment } from '@material-ui/core';\nimport { Opacity as OpacityIcon, AccountCircle as AccountCircleIcon  } from '@material-ui/icons';\nimport TextField from '@material-ui/core/TextField';\nconst ShortUniqueId = require('short-unique-id').default;\n\nconst DEFAULT_NUM_WORDS: number = 2; // Two words per player\n\ntype NewPlayerProps = {\n  addPlayer: (player: IUser) => void,\n  updatePlayer: (player: IUser) => void,\n  name: string,\n  color: string\n}\n\ntype NewPlayerState = {\n  words: string[]\n}\n\nexport class NewPlayer extends React.Component<NewPlayerProps, NewPlayerState> {\n\n  public state: NewPlayerState = {\n    words: []\n  };\n\n  constructor(props: NewPlayerProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.setRandomColor = this.setRandomColor.bind(this);\n    this.addPlayer = this.addPlayer.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    if (['name','color'].includes(event.target.name)) {\n      let player: IUser = { \n        id: '', \n        name: this.props.name, \n        color: this.props.color \n      };\n      if (event.target.name === 'name') {\n        player.name = event.target.value;\n      } else if (event.target.name === 'color') {\n        player.color = event.target.value; \n      }\n\n      this.props.updatePlayer(player);   \n\n    } else if (event.target.name.startsWith('word')) {\n      const index = parseInt(event.target.name.substr(4));\n      const word = event.target.value;\n      this.setState((state, props) => {\n        const newWords = state.words;\n        newWords[index] = word;\n        return {\n          words: newWords\n        };\n      });\n    }\n  }\n\n  setRandomColor() {\n    const player: IUser = { \n      id: '', \n      name: this.props.name, \n      color: generateRandomColor()\n    };\n    this.props.updatePlayer(player);\n  }\n\n  addPlayer() {\n    const player: IUser = { \n      id: '', \n      name: this.props.name, \n      color: this.props.color,\n      enteredWords: this.state.words\n    };\n    this.props.addPlayer(player);\n  }\n\n  render() {\n    const numOfWords = DEFAULT_NUM_WORDS;\n    const wordFields = [];\n    if (numOfWords>0) {\n      wordFields.push(\n        <Typography variant=\"subtitle1\" key=\"heading\">\n          Gebe {numOfWords} Wörter für das Spiel ein\n        </Typography>\n      );\n    }\n    for (let i=0; i<numOfWords; i++) {\n      wordFields.push(\n        <TextField required label={`Wort ${i+1}`}\n          placeholder=\"Für den Stapel\"\n          name={`word${i}`}\n          key={`word${i}`}\n          value={this.state.words[i]||''} \n          onChange={this.handleChange} />\n      );\n    }\n    let enterDisabled = !this.props.name || this.state.words.length < numOfWords || this.state.words.some(word => !word || word.length === 0);\n\n    return (\n      <div className=\"New-player\">\n        <TextField required label=\"Spielername\" \n          name='name'\n          value={this.props.name} \n          onChange={this.handleChange}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <AccountCircleIcon style={{color: this.props.color}}></AccountCircleIcon>\n              </InputAdornment>\n            )  \n          }} />\n        <TextField required label=\"Spielerfarbe\" \n          placeholder=\"Html-Farbcode\"\n          name='color'\n          value={this.props.color} \n          onChange={this.handleChange}\n          InputProps={{\n            style: {color: this.props.color},\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <OpacityIcon style={{color: this.props.color}}></OpacityIcon>\n              </InputAdornment>\n            )  \n          }} />\n        <Button variant=\"contained\" \n          onClick={this.setRandomColor}>Zufallsfarbe</Button>\n        {wordFields}\n        <Button variant=\"contained\" color=\"primary\" \n          disabled={enterDisabled} \n          onClick={this.addPlayer}>Mitspielen</Button>\n      </div>\n    );\n  }\n\n}\n\nexport function generateRandomColor(): string {\n  const generator = new ShortUniqueId({\n    dictionary: [\n      '0', '1', '2', '3',\n      '4', '5', '6', '7',\n      '8', '9', 'A', 'B',\n      'C', 'D', 'E', 'F',\n    ],\n  });\n  const color = '#' + generator(6);\n  return color;\n}","import React from 'react';\nimport { IGame, IUser } from '../custom.d';\nimport { Button } from '@material-ui/core';\nimport { WordHint } from './WordHint';\nimport { NewPlayer, generateRandomColor } from './NewPlayer';\n\nimport { GAME_URL, SETTING_ID, SETTING_NAME, SETTING_COLOR } from '../App';\n\ntype GameLobbyProps = {\n  game: IGame,\n  setTheme?: (color: string)=>void\n}\ntype GameLobbyState = {\n  name: string,\n  color: string\n}\n\nexport class GameLobby extends React.Component<GameLobbyProps,GameLobbyState> {\n\n  public state: GameLobbyState = { \n    name: localStorage.getItem(SETTING_NAME) || '',\n    color: localStorage.getItem(SETTING_COLOR) || generateRandomColor() || 'black'\n  };\n\n  constructor(props: GameLobbyProps) {\n    super(props);\n\n    this.addPlayer = this.addPlayer.bind(this);\n    this.setPlayerProps = this.setPlayerProps.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  setPlayerProps(player: IUser) {\n    this.setState({\n      name: player.name,\n      color: player.color || ''\n    });\n  }\n\n  addPlayer(player: IUser) {\n    const currentUserId = localStorage.getItem(SETTING_ID) || '';\n    player.id = currentUserId;\n    fetch(`${GAME_URL}/${this.props.game.id}/addPlayer`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({player})\n    }).then(res => res.json())\n      .then((data) => {\n        this.setLocalPlayer(data.player);\n        this.setState({\n          color: generateRandomColor() || 'black',\n          name: ''\n        });\n      })\n      .catch(console.log)\n  }\n\n  setLocalPlayer(player: IUser) {\n    localStorage.setItem(SETTING_ID, player.id);\n    localStorage.setItem(SETTING_NAME, player.name);\n    if (player.color) localStorage.setItem('playerColor', player.color);\n    if (this.props.setTheme && player.color) {\n      this.props.setTheme(player.color);\n    }\n  }\n\n  startGame() {\n    fetch(`${GAME_URL}/${this.props.game.id}/start`, {\n      method: 'PUT'\n    }).then((data) => {\n        // TODO\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const listOfPlayers = this.props.game.players.map(player => (\n      <WordHint key={player.id} hint={player.name} color={player.color}></WordHint>\n    ));\n\n    const currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n    const isHost: boolean = !!currentUserId && this.props.game.host === currentUserId;\n    const isInGame: boolean = !!currentUserId && this.props.game.players.findIndex(player => player.id === currentUserId) > -1;\n    const newPlayerName: string = (isInGame || !this.state.name) ? '?' : this.state.name;\n    const newPlayerColor: string = (isInGame || !this.state.color) ? generateRandomColor() : this.state.color;\n\n    return (\n      <div className=\"Game-lobby\">\n        <div className=\"New-player\">\n          { \n            !isInGame && \n            <NewPlayer name={this.state.name} color={this.state.color} \n              updatePlayer={this.setPlayerProps}\n              addPlayer={this.addPlayer}></NewPlayer>\n          }\n          {\n            isHost && \n            <Button variant=\"contained\" color=\"primary\" \n              disabled={this.props.game.players.length < 3} \n              onClick={this.startGame}>Spiel beginnen</Button>\n          }\n        </div>\n        <div className=\"Player-list\">\n          {listOfPlayers}\n          <WordHint hint={newPlayerName} color={newPlayerColor} showPencil={true}></WordHint>\n        </div>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport {WordCard} from './WordCard';\nimport { IGame } from '../custom.d';\n\ntype GameEndViewProps = {\n  game: IGame\n};\n\nexport class GameEndView extends React.Component<GameEndViewProps> {\n  render() {\n    const game: IGame = this.props.game;\n    const correctWords = game.correctWords.map(wordResult => {\n      return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={true}/>\n    });\n    const wrongWords = game.wrongWords.map(wordResult => {\n      return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={false}/>\n    });\n\n    return (\n      <div className=\"Game-end-view\">\n        <div className=\"Correct-words\">\n          <h2>Richtig ({game.correctWords.length})</h2>\n          {correctWords}\n        </div>\n        <div className=\"Wrong-words\">\n          <h2>Falsch ({game.wrongWords.length})</h2>\n          {wrongWords}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@material-ui/core';\nimport {GameField} from './GameField';\nimport {GameLobby} from './GameLobby';\nimport {GameEndView} from './GameEndView';\nimport { IGame, GamePhase } from '../custom.d';\n\nimport { GAME_URL, SETTING_ID } from '../App';\n\nconst POLLING_INTERVAL = 2000;\n\ntype JustOneProps = {\n  gameId?: string,\n  setTheme?: (color: string)=>void\n};\ntype JustOneState = {\n  currentGame?: IGame,\n  allGames?: IGame[]\n};\n\nexport class JustOne extends React.Component<JustOneProps,JustOneState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n  allWords = [\n    'Ananas',\n    'Bauernhof',\n    'Clown',\n    'Dartscheibe',\n    'Elefant',\n    'Fussball',\n  ];\n  private _interval: any; // TODO\n\n  constructor(props: JustOneProps) {\n    super(props);\n\n    this.createGame = this.createGame.bind(this);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    if (this.props.gameId) {\n      this.loadGame();\n\n      this._interval = setInterval(this.loadGame.bind(this), POLLING_INTERVAL);\n    } else {\n      this.loadGames();\n\n      this._interval = setInterval(this.loadGames.bind(this), POLLING_INTERVAL);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._interval);\n  }\n\n  loadGame() {\n    let id = this.props.gameId;\n    if (!id) return;\n\n    fetch(`${GAME_URL}/${id}`)\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({\n          currentGame: data.game\n        });\n      })\n      .catch(console.log)\n  }\n\n  loadGames() {\n    fetch(`${GAME_URL}/all`)\n      .then(res => res.json())\n      .then((data) => {\n        let games = data.games;\n        games = games.filter((game: IGame) => {\n          return game.phase === 0 || (this.currentUserId && game.players.findIndex(p => p.id === this.currentUserId) > -1);\n        });\n        this.setState({\n          allGames: games\n        });\n      })\n      .catch(console.log)\n  }\n\n  createGame() {\n    const game: IGame = createGame();\n\n    fetch(`${GAME_URL}/add`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({game})\n    }).then((data) => {\n        console.log(data);\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const currentGame: IGame|undefined = this.state.currentGame;\n\n    let optionalContent: React.ReactElement;\n    let gameList;\n    if (currentGame) {\n      if (currentGame.phase === GamePhase.Init) {\n        optionalContent = <GameLobby game={currentGame} setTheme={this.props.setTheme}></GameLobby>\n      } else if (currentGame.phase === GamePhase.End) {\n        optionalContent = <GameEndView game={currentGame}></GameEndView>;\n      } else {\n        optionalContent = <GameField game={currentGame}></GameField>;\n      }\n    } else {\n      if (this.state.allGames) gameList = this.state.allGames.map(game => (\n        <Link key={game.id} to={`/${game.id}`}>{`Spiele ${game.id}`}</Link>\n      ));\n      optionalContent = <Button variant=\"contained\" color=\"primary\" onClick={this.createGame}>Neues Spiel</Button>;\n    }\n\n    return (\n      <div className=\"Game-content\">\n        {optionalContent}\n        {gameList}\n      </div>\n    );\n  }\n}\n\nfunction createGame(): IGame {\n    return {\"id\":\"\", \"name\": \"\", \"words\":[],\"players\":[],\"host\":\"1\",\"round\":0,\"phase\":0,\"hints\":[],\"correctWords\":[],\"wrongWords\":[]};\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport './App.scss';\nimport { AppBar, Toolbar, IconButton, Typography, Chip } from '@material-ui/core';\nimport { Home as HomeIcon, AccountCircle as AccountCircleIcon } from '@material-ui/icons';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport {JustOne} from './just-one/JustOne';\n\n\nconst isProd = window.location.hostname === 'justone.okj.name';\nconst apiPort = isProd ? '' : ':9000';\nexport const API_URL = window.location.protocol + '//' + window.location.hostname + apiPort + '/api';\nexport const GAME_URL = API_URL + '/games';\nexport const SETTING_ID = 'playerId';\nexport const SETTING_NAME = 'playerName';\nexport const SETTING_COLOR = 'playerColor';\nconst DEFAULT_PRIMARY_COLOR = '#43a047';\nconst DEFAULT_SECONDARY_COLOR = '#3949ab';\n\ntype AppProps = {};\ntype AppState = {\n  primaryColor: string\n};\n\nexport class App extends React.Component<AppProps,AppState> {\n\n  public state: AppState = {\n    primaryColor: localStorage.getItem(SETTING_COLOR) || DEFAULT_PRIMARY_COLOR\n  };\n\n  constructor(props: AppProps) {\n    super(props);\n\n    this.setTheme = this.setTheme.bind(this);\n  }\n\n  setTheme(primaryColor: string) {\n    this.setState({primaryColor: primaryColor});\n  }\n\n  render() {\n    const currentUserName: string|null = localStorage.getItem(SETTING_NAME);\n\n    const theme = createMuiTheme({\n      palette: {\n        primary: {\n          main: this.state.primaryColor\n        },\n        secondary: {\n          main: DEFAULT_SECONDARY_COLOR,\n        },  \n      }\n    });\n\n    return (\n      <Router>\n        <ThemeProvider theme={theme}>\n        <div className=\"App\">\n          <AppBar position=\"sticky\">\n            <Toolbar>\n              <Link to=\"/\" className=\"ButtonLink\">\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"home\">\n                  <HomeIcon />\n                </IconButton>\n              </Link>\n              <Typography variant=\"h2\" className=\"appTitle\">\n                Nur ein Wort!\n              </Typography>\n              {currentUserName && <Chip label={currentUserName} icon={<AccountCircleIcon />}/>}\n            </Toolbar>\n          </AppBar>\n          <Switch>\n              <Route path=\"/:gameId\" component={(props: RouteComponentProps<any>) => <JustOne gameId={props.match.params.gameId} setTheme={this.setTheme}/>} />\n              <Route children={<JustOne/>} />\n            </Switch> \n        </div>  \n      </ThemeProvider>\n      </Router>\n    );  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}