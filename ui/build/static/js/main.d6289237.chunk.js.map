{"version":3,"sources":["custom.d.ts","just-one/GameList.tsx","just-one/JustOneHome.tsx","just-one/WordHintInput.tsx","just-one/WordCard.tsx","just-one/PencilAnimation.tsx","just-one/WordHint.tsx","just-one/GameField.tsx","common/ColorPicker.tsx","just-one/NewPlayer.tsx","just-one/WordAdder.tsx","just-one/RoundSelector.tsx","just-one/GameLobby.tsx","just-one/GameEndView.tsx","just-one/GameStats.tsx","just-one/JustOneGame.tsx","just-one/JustOne.tsx","App.tsx","common/UserConfig.tsx","serviceWorker.ts","index.tsx"],"names":["GamePhase","GameList","currentUserId","localStorage","getItem","SETTING_ID","currentUserName","SETTING_NAME","this","props","allGames","deleteGame","newGames","filter","game","phase","Init","onGoingGames","End","includes","doneGames","createListItem","ListItem","key","id","className","to","component","Link","button","ListItemText","primary","name","secondary","players","map","p","join","host","ListItemSecondaryAction","IconButton","onClick","newGamesList","onGoingGamesList","doneGamesList","length","Paper","Typography","variant","List","React","Component","JustOneHome","_interval","createGame","bind","handleChange","newGameName","state","document","title","APP_TITLE","loadGames","setInterval","clearInterval","fetch","GAME_URL","then","res","json","data","games","findIndex","setState","catch","console","log","gameId","method","event","target","value","DEFAULT_NUM_WORDS","headers","body","JSON","stringify","playerId","setItem","window","location","href","TextField","label","onChange","Button","color","WordHintInput","submitHint","keyPressed","onKeyPress","disabled","Send","WordCard","currentWord","word","guesser","guesserText","guess","toLowerCase","classes","guessedRight","push","style","borderColor","showInput","PencilAnimation","styleObj1","backgroundColor","styleObj2","borderTopColor","WordHint","currentHint","hint","styleObj","author","showPencil","showCheck","showDuplicateToggle","toggleDuplicate","duplicate","extraClasses","Checkbox","icon","Mood","checkedIcon","MoodBad","checked","GameField","showHints","resolveRound","hintWord","currentUser","getCurrentUser","hintIndex","countCorrect","solutionButton2","currentGuesser","isGuesser","isWritingPhase","HintWriting","isComparingPhase","HintComparing","isGuessingPhase","Guessing","isSolutionPhase","Solution","isRoundHost","roundHost","currentGuess","currentHints","hints","hintObj","index","hintIsMine","showHint","isDuplicate","authorName","solutionButton1","showGuessInput","guesserName","find","player","allColors","getRandomColor","Math","floor","random","ColorPicker","selected","select","colorButtons","NewPlayer","setColor","addPlayer","currentPlayer","updatePlayer","required","WordAdder","words","parseInt","substr","newWords","numOfWords","some","add","wordFields","i","placeholder","enterDisabled","RoundSelector","open","onClose","numOfPlayers","handleListItemClick","Dialog","disableBackdropClick","DialogTitle","GameLobby","SETTING_COLOR","roundDialogOpen","addWords","setPlayerProps","selectNumRounds","startPreparation","startGame","setLocalPlayer","enteredWords","setTheme","wordsPerPlayer","listOfPlayers","numWordsPerPlayer","isHost","isInGame","newPlayerName","newPlayerColor","Preparation","allMyWordsEntered","wordsEntered","GameEndView","correctWords","wordResult","wrongWords","GameStats","gamePhase","slice","round","JustOneGame","loadGame","gameName","currentGame","gameContent","gameStats","ThemeMode","JustOne","UserConfig","selectedValue","possibleValues","apiPort","hostname","protocol","App","useState","userColor","setUserColor","AUTO","userTheme","setUserTheme","prefersDarkMode","useMediaQuery","BRIGHT","DARK","primaryColor","startsWith","theme","useMemo","createMuiTheme","palette","main","type","classNames","userConfigOpen","setUserConfigOpen","ThemeProvider","square","elevation","AppBar","position","Toolbar","edge","aria-label","Home","startIcon","AccountCircle","path","match","params","children","Boolean","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d6289237.chunk.js","sourcesContent":["// custom module declarations\n\n// TODO \nexport interface IUser {\n    id: string;\n    name: string;\n    color?: string;\n    enteredWords?: string[];\n}\n\nexport interface IHint {\n    hint: string;\n    author: IUser;\n    isDuplicate?: boolean\n}\n\nexport enum GamePhase {\n    Init,\n    Preparation,\n    HintWriting,\n    HintComparing,\n    Guessing,\n    Solution,\n    End\n}\n\nexport interface WordResult {\n    word: string;\n    guess: string;\n}\n\nexport interface IGame {\n    id: string;\n    name: string;\n    words: string[];\n    players: IUser[];\n    host: string; // hostId\n    wordsPerPlayer: number;\n\n    round: number;\n    phase: GamePhase;\n    currentWord?: string;\n    currentGuesser?: IUser;\n    currentGuess?: string;\n    guessedRight?: boolean;\n    roundHost?: IUser;\n    hints: IHint[];\n    correctWords: WordResult[];\n    wrongWords: WordResult[];\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  List, \n  ListItem, \n  ListItemText, \n  ListItemSecondaryAction, \n  IconButton,\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { IGame, GamePhase } from '../custom.d';\n\nimport { SETTING_ID, SETTING_NAME } from '../App';\n\ntype GameListProps = {\n  allGames: IGame[],\n  deleteGame: (gameId:string)=>void,\n};\n\ntype GameListState = {\n}\n\nexport class GameList extends React.Component<GameListProps,GameListState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n  public currentUserName: string = localStorage.getItem(SETTING_NAME) || '';\n\n  render() {\n    const {allGames,deleteGame} = this.props;\n    const newGames = allGames.filter(game => game.phase === GamePhase.Init);\n    const onGoingGames = allGames.filter(game => ![GamePhase.Init,GamePhase.End].includes(game.phase));\n    const doneGames = allGames.filter(game => game.phase === GamePhase.End);\n\n    const createListItem = (game: IGame) => {\n      return (\n        <ListItem key={game.id} className=\"GameListItem\"\n          {...{ to: `/${game.id}` }}\n          component={Link}\n          button\n        >\n          <ListItemText id={game.id} primary={`${game.name || game.id}`} secondary={`Spieler: ${game.players.map(p => p.name).join(', ') || '-'}`} />\n          {\n            this.currentUserId === game.host && (\n              <ListItemSecondaryAction>\n                <IconButton onClick={() => deleteGame(game.id)}>\n                  <DeleteIcon/>\n                </IconButton>\n              </ListItemSecondaryAction>\n            )\n          }\n        </ListItem>\n      );\n    }\n\n    const newGamesList = newGames.map(createListItem);\n    const onGoingGamesList = onGoingGames.map(createListItem);\n    const doneGamesList = doneGames.map(createListItem);\n\n    return (\n      <div className=\"GameList\">\n        {\n          onGoingGamesList.length > 0 && (\n            <Paper>\n              <Typography variant=\"h5\">Meine laufenden Spiele</Typography>\n              <List>\n                {onGoingGamesList}\n              </List> \n            </Paper>\n          )\n        }\n        {\n          newGamesList.length > 0 && (\n            <Paper>\n              <Typography variant=\"h5\">Neue Spiele</Typography>\n              <List>\n                {newGamesList}\n              </List> \n            </Paper>\n          )\n        }\n        {\n          doneGamesList.length > 0 && (\n            <Paper>\n              <Typography variant=\"h5\">Meine beendeten Spiele</Typography>\n              <List>\n                {doneGamesList}\n              </List> \n            </Paper>\n          )\n        }\n      </div>\n    );\n  }\n}\n\n/*\nTODO Share Button\n\nimport ShareIcon from '@material-ui/icons/Share';\nimport {AlertBar} from '../common/AlertBar';\n\n  public state: GameListState = {\n    showAlert: false,\n    alertText: ''\n  }\n    const {showAlert,alertText} = this.state;\n\n    const shareGame = (gameId: string) => {\n      const gameUrl = `${window.location.protocol}//${window.location.host}/${gameId}`;\n      navigator.clipboard.writeText(gameUrl);\n      this.setState({\n        showAlert: true,\n        alertText: `Link zum Spiel wurde in die Zwischenablage kopiert`\n      });\n    }\n\n    const hideAlert = ()=> {\n      this.setState({\n        showAlert: false,\n        alertText: ``\n      });\n    }\n\n          {\n            game.phase === GamePhase.Init && (\n              <ListItemSecondaryAction>\n                <IconButton onClick={() => shareGame(game.id)}>\n                  <ShareIcon/>\n                </IconButton>\n              </ListItemSecondaryAction>\n            )\n          }\n\n        <AlertBar show={showAlert} alertText={alertText} onClose={hideAlert}/>\n*/","import React from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport { IGame, GamePhase } from '../custom.d';\nimport { GameList } from './GameList';\n\nimport { GAME_URL, SETTING_ID, SETTING_NAME, APP_TITLE, DEFAULT_NUM_WORDS } from '../App';\n\nconst POLLING_INTERVAL = 3000;\n\ntype JustOneHomeProps = {};\ntype JustOneHomeState = {\n  newGameName: string,\n  allGames: IGame[]\n};\n\nexport class JustOneHome extends React.Component<JustOneHomeProps,JustOneHomeState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n  public currentUserName: string = localStorage.getItem(SETTING_NAME) || '';\n\n  private _interval: any; // TODO\n\n  constructor(props: JustOneHomeProps) {\n    super(props);\n\n    this.createGame = this.createGame.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.deleteGame = this.deleteGame.bind(this);\n\n    let newGameName = this.currentUserName ? `${this.currentUserName}s Spiel` : 'Neues Spiel';\n\n    this.state = { allGames: [], newGameName: newGameName };\n  }\n\n  componentDidMount() {\n    document.title = APP_TITLE;\n\n    this.loadGames();\n\n    this._interval = setInterval(this.loadGames.bind(this), POLLING_INTERVAL);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._interval);\n  }\n\n  loadGames() {\n    fetch(`${GAME_URL}/all`)\n      .then(res => res.json())\n      .then((data) => {\n        let games = data.games || [];\n        games = games.filter((game: IGame) => {\n          return game.phase === GamePhase.Init || (this.currentUserId && game.players.findIndex(p => p.id === this.currentUserId) > -1);\n        });\n        this.setState({\n          allGames: games\n        });\n      })\n      .catch(console.log)\n  }\n\n  deleteGame(gameId: string) {\n    fetch(`${GAME_URL}/delete/${gameId}`, {\n      method: 'DELETE'\n    }).then(res => res.json())\n      .then((data) => {\n        console.log('deleted', data);\n      })\n      .catch(console.log)\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({newGameName: event.target.value});\n  }\n\n  createGame() {\n    const game: IGame = createGame();\n    game.name = this.state.newGameName;\n    game.host = this.currentUserId || '';\n\n    fetch(`${GAME_URL}/add`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({game})\n    }).then(res => res.json())\n      .then((data) => {\n        if(this.currentUserId !== data.playerId) {\n          localStorage.setItem(SETTING_ID, data.playerId);\n        }\n        window.location.href = '/' + data.id;\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const {newGameName, allGames} = this.state;\n\n    return (\n      <div className=\"JustOneHome\">\n        <TextField label={'Spielname'}\n            value={newGameName} \n            onChange={this.handleChange} />\n        <Button variant=\"contained\" color=\"primary\" onClick={this.createGame}>Neues Spiel</Button>\n        <GameList allGames={allGames} deleteGame={this.deleteGame}/>\n      </div>\n    );\n  }\n}\n\nfunction createGame(): IGame {\n    return {\"id\":\"\", \"name\": \"\", \"words\":[],\"players\":[],\"host\":\"\",\"wordsPerPlayer\":DEFAULT_NUM_WORDS,\"round\":0,\"phase\":0,\"hints\":[],\"correctWords\":[],\"wrongWords\":[]};\n}","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport { Send as SendIcon } from '@material-ui/icons';\nimport TextField from '@material-ui/core/TextField';\n\ntype WordHintInputProps = {\n  submitHint: (hint: string)=>void\n  label?: string\n};\ntype WordHintInputState = {\n  value: string, \n};\n\nexport class WordHintInput extends React.Component<WordHintInputProps,WordHintInputState> {\n\n  constructor(props: WordHintInputProps) {\n  \tsuper(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.submitHint = this.submitHint.bind(this);\n    this.keyPressed = this.keyPressed.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({value: event.target.value});\n  }\n\n  submitHint() {\n  \tthis.props.submitHint(this.state.value)\n  \tthis.setState({value: ''});\n  }\n\n  keyPressed(event: React.KeyboardEvent<HTMLInputElement>) {\n  \tif (event.key === \"Enter\") {\n  \t  this.submitHint()\n  \t}\n  }\n\n  render() {\n    return (\n\t    <div className=\"Word-hint-input\">\n\t    \t<TextField label={this.props.label || 'Hinweis eingeben'}\n\t    \t\tvalue={this.state.value} \n\t    \t\tonChange={this.handleChange} \n\t    \t\tonKeyPress={this.keyPressed} />\n  \t\t\t<IconButton color=\"primary\" \n  \t\t\t\tdisabled={!this.state.value} \n  \t\t\t\tonClick={this.submitHint}>\n          <SendIcon></SendIcon>\n        </IconButton>\n\t    </div>\n    );\n  }\n\n}","import React from 'react';\nimport { Paper } from '@material-ui/core';\nimport { WordHintInput } from './WordHintInput';\n\ntype WordCardProps = {\n\tword: string;\n\tguesser?: string;\n\tcolor?: string;\n  guess?: string;\n  guessedRight?: boolean;\n  showInput?: boolean;\n  submitHint?: (hint:string)=>void\n}\n\nexport class WordCard extends React.Component<WordCardProps> {\n\n  render() {\n  \tconst currentWord = this.props.word;\n    const guesser = this.props.guesser;\n    let guesserText = '';\n    if (guesser) {\n      if (this.props.guess) {\n        guesserText = (guesser.toLowerCase() === 'ich' ? 'Mein ' : (guesser + '\\'s ')) + 'Rateversuch: ' + this.props.guess;\n      } else {\n        guesserText = guesser + ' muss raten';\n      }\n    } else if (this.props.guess) {\n      guesserText = 'Rateversuch: ' + this.props.guess;\n    }\n    const classes = ['Word-card'];\n    if (this.props.guess) {\n      if (this.props.guessedRight) {\n        classes.push('Word-card-correct');\n      } else {\n        classes.push('Word-card-wrong');\n      }\n    }\n\n    return (\n\t    <Paper className={classes.join(' ')} style={{borderColor: this.props.color}}>\n\t    \t{\n          (this.props.showInput && this.props.submitHint) ? \n          <WordHintInput submitHint={this.props.submitHint} label=\"Rateversuch\"/> : \n          <span>{currentWord}</span>\n        }\n        {guesserText && <span className=\"Author-tag\" style={{color: this.props.color}}>{guesserText}</span>}\n\t    </Paper>\n    );\n  }\n\n}","import React from 'react';\n\ntype PencilAnimationProps = {\n\tcolor?: string,\n}\n\nexport class PencilAnimation extends React.Component<PencilAnimationProps> {\n\n  render() {\n    const styleObj1 = {\n    \tbackgroundColor: this.props.color,\n    };\n    const styleObj2 = {\n    \tborderTopColor: this.props.color,\n    };\n\n    return (\n\t  <div className=\"pencil\">\n        <div className=\"body\" style={styleObj1}></div>\n        <div className=\"nib\" style={styleObj2}></div>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { WordHintInput } from './WordHintInput';\nimport { PencilAnimation } from './PencilAnimation';\nimport { Checkbox, Paper } from '@material-ui/core';\nimport { Mood as MoodIcon, MoodBad as MoodBadIcon } from '@material-ui/icons';\n\ntype WordHintProps = {\n\thint?: string,\n\tcolor?: string,\n\tduplicate?: boolean,\n  author?: string,\n  showPencil?: boolean,\n  showCheck?: boolean,\n  showInput?: boolean,\n  submitHint?: (hint:string)=>void,\n  showDuplicateToggle?: boolean,\n  toggleDuplicate?: ()=>void\n}\n\nexport class WordHint extends React.Component<WordHintProps> {\n\n  render() {\n  \tconst currentHint = this.props.hint;\n    const color = this.props.color;\n    const styleObj = {\n    \t'color': color,\n      'borderColor': color\n    };\n    const author = this.props.author;\n    const showPencil = this.props.showPencil || !this.props.hint;\n    const showCheck = this.props.showCheck;\n    const showDuplicateToggle = this.props.showDuplicateToggle;\n    const toggleDuplicate = this.props.toggleDuplicate;\n\n    const classes = ['Word-hint'];\n    if (showPencil) classes.push('Word-hint-writing');\n    if (this.props.duplicate) classes.push('Word-hint-duplicate');\n    if (currentHint && currentHint.length > 20) classes.push('Word-hint-huge');\n    else if (currentHint && currentHint.length > 14) classes.push('Word-hint-long');\n    const extraClasses = classes.join(' ');\n\n    if (this.props.showInput && this.props.submitHint) {\n      return (\n        <Paper className={extraClasses} style={styleObj}>\n          <WordHintInput submitHint={this.props.submitHint}/>\n          {author && <span className=\"Author-tag\">{author}</span>}\n        </Paper>\n      );\n    } else {\n      return (\n        <Paper className={extraClasses} style={styleObj}>\n          {!showCheck && currentHint}\n          {showCheck && <span className=\"Done-icon\">✓</span>}\n          {showPencil && <PencilAnimation color={color}></PencilAnimation>}\n          {showDuplicateToggle && toggleDuplicate && (\n            <Checkbox className=\"Duplicate-toggle\" \n              icon={<MoodIcon />} checkedIcon={<MoodBadIcon />} \n              checked={this.props.duplicate}\n              onChange={()=>toggleDuplicate()}/>\n          )}\n          {author && <span className=\"Author-tag\">{author}</span>}\n        </Paper>\n      );\n    }\n\n    \n  }\n\n}","import React from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport {WordCard} from './WordCard';\nimport { IGame, IHint, IUser, GamePhase } from '../custom.d';\nimport {WordHint} from './WordHint';\n\nimport { GAME_URL } from '../App';\n\nconst SETTING_ID = 'playerId';\n\ntype GameFieldProps = {\n  game: IGame\n};\ntype GameFieldState = {\n\n};\n\nexport class GameField extends React.Component<GameFieldProps,GameFieldState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n  constructor(props: GameFieldProps) {\n    super(props);\n\n    this.submitHint = this.submitHint.bind(this);\n    this.toggleDuplicate = this.toggleDuplicate.bind(this);\n    this.showHints = this.showHints.bind(this);\n    this.guess = this.guess.bind(this);\n    this.resolveRound = this.resolveRound.bind(this);\n\n    this.state = {  };\n  }\n\n  componentDidMount() {\n\n  }\n\n  submitHint(hintWord: string) {\n    const currentUser = getCurrentUser(this.props.game, this.currentUserId);\n    if (!currentUser) return; // TODO\n    const hint: IHint = { hint: hintWord, author: currentUser};\n\n    fetch(`${GAME_URL}/${this.props.game.id}/hint`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({hint})\n    }).catch(console.log)\n  }\n\n  toggleDuplicate(hintIndex: number) {\n    fetch(`${GAME_URL}/${this.props.game.id}/toggleDuplicateHint`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({hintIndex})\n    }).catch(console.log)\n  }\n\n  showHints() {\n    fetch(`${GAME_URL}/${this.props.game.id}/showHints`, {\n      method: 'PUT'\n    }).catch(console.log)\n  }\n\n  guess(guess: string) {\n    fetch(`${GAME_URL}/${this.props.game.id}/guess`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({guess})\n    }).catch(console.log)\n  }\n\n  resolveRound(countCorrect: boolean = true) {\n    fetch(`${GAME_URL}/${this.props.game.id}/resolve`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({countCorrect})\n    }).catch(console.log)\n  }\n\n  render() {\n    const game: IGame = this.props.game;\n    const currentUser = getCurrentUser(game, this.currentUserId); // TODO\n    const guesser = game.currentGuesser ? game.currentGuesser : { name: '?', id: '?' }; // TODO\n    const isGuesser = currentUser && currentUser.id === guesser.id;\n\n    const isWritingPhase = game.phase === GamePhase.HintWriting;\n    const isComparingPhase = game.phase === GamePhase.HintComparing;\n    const isGuessingPhase = game.phase === GamePhase.Guessing;\n    const isSolutionPhase = game.phase === GamePhase.Solution;\n\n    const isRoundHost = game.roundHost && this.currentUserId === game.roundHost.id;\n    const showDuplicateToggle = isRoundHost && isComparingPhase;\n\n    const currentWord = isGuesser && !isSolutionPhase ? '?' : (game.currentWord || '');\n    const currentGuess = game.currentGuess || '';\n    const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n      let hint: string = hintObj.hint;\n      const hintIsMine = currentUser && currentUser.id === hintObj.author.id;\n      const showHint = !hint || isGuessingPhase || isSolutionPhase || hintIsMine || (isComparingPhase && !isGuesser);\n      const showInput = !hint && isWritingPhase && hintIsMine;\n\n      if (isGuessingPhase && isGuesser && hintObj.isDuplicate) {\n        hint = 'LEIDER DOPPELT';\n      } \n\n      const authorName = hintIsMine ? 'Ich' : hintObj.author.name;\n\n      return <WordHint key={hintObj.author.id+index} \n              hint={hint} \n              color={hintObj.author.color}\n              showInput={showInput}\n              submitHint={this.submitHint}\n              showCheck={!showHint}\n              duplicate={hintObj.isDuplicate}\n              showDuplicateToggle={showDuplicateToggle}\n              toggleDuplicate={()=>this.toggleDuplicate(index)}\n              author={authorName}/>\n    });\n    let solutionButton1 = <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(true)}>Super, weiter geht's</Button>;\n    let solutionButton2;\n    if (!game.guessedRight) {\n      solutionButton1 = <Button variant=\"contained\" onClick={() => this.resolveRound(true)}>Das zählt trotzdem</Button>;\n      solutionButton2 = <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(false)}>Leider falsch</Button>;\n    }\n\n    const showGuessInput = isGuessingPhase && isGuesser;\n    const guesserName = isGuesser ? 'Ich' : guesser.name;\n\n    return (\n      <div className=\"Game-field\">\n        <div className=\"Current-word\">\n          <Typography variant=\"h5\">\n            Begriff\n          </Typography>\n          <WordCard \n            word={currentWord} \n            guesser={guesserName} \n            color={guesser.color} \n            showInput={showGuessInput}\n            submitHint={this.guess}\n            guess={isSolutionPhase ? currentGuess : ''} \n            guessedRight={game.guessedRight}/>\n          {isSolutionPhase && (isRoundHost || game.guessedRight) && solutionButton1}\n          {isSolutionPhase && isRoundHost && solutionButton2}\n        </div>\n        <div className=\"Current-hints\">\n          <Typography variant=\"h5\">\n            Spieler-Hinweise\n          </Typography>\n          <div className=\"WordHint-list\">{currentHints}</div>\n          {isComparingPhase && isRoundHost && (\n            <Typography variant=\"subtitle1\">\n              Benutze die Smiley-Buttons auf den Hinweisen um doppelte oder ungültige Werte zu markieren.\n            </Typography>\n          )}\n          {isComparingPhase && isRoundHost && <Button variant=\"contained\" color=\"primary\" onClick={this.showHints}>{guesser.name + ' kann losraten!'}</Button>}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction getCurrentUser(game: IGame, currentUserId: string): IUser|undefined {\n  return game.players.find(player => player.id === currentUserId);\n}\n","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\n\nexport const allColors: string[] = [\n  '#e51235',\n  '#d81b60',\n  '#8e24aa',\n  '#6e45c1',\n  '#4959cc',\n  '#1e88e5',\n  '#039be5',\n  '#00acc1',\n  '#00897b',\n  '#43a047',\n  '#7cb342',\n  '#c0ca33',\n  '#ffc215',\n  '#ffab00',\n  '#ff6d00',\n  '#f4511e'\n];\n\nexport function getRandomColor(color?: string|null): string {\n  if (!color || !allColors.includes(color)) {\n    return allColors[Math.floor(Math.random()*allColors.length)];\n  } else {\n    return color;\n  }\n}\n\ntype ColorPickerProps = {\n\tselected?: string;\n  select: (color: string)=>void;\n}\n\nexport class ColorPicker extends React.Component<ColorPickerProps> {\n\n  render() {\n  \tconst { selected, select } = this.props;\n\n    const colorButtons = allColors.map((color: string) => {\n      const classes = ['Color-button'];\n      if (selected === color) classes.push('Color-selected');\n      return (\n        <IconButton className={classes.join(' ')} onClick={() => select(color)} style={{ backgroundColor: color }} key={color}>\n          {selected === color && <CheckIcon/>}\n        </IconButton>\n      )\n    });\n\n    return (\n      <div className=\"Color-picker\">\n        { colorButtons }\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { IUser } from '../custom.d';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { ColorPicker } from '../common/ColorPicker';\n\ntype NewPlayerProps = {\n  addPlayer: (player: IUser) => void,\n  updatePlayer: (player: IUser) => void,\n  currentPlayer: IUser\n}\n\nexport class NewPlayer extends React.Component<NewPlayerProps> {\n\n  constructor(props: NewPlayerProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.setColor = this.setColor.bind(this);\n    this.addPlayer = this.addPlayer.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.name === 'name') {\n      this.props.currentPlayer.name = event.target.value;\n\n      this.props.updatePlayer(this.props.currentPlayer);   \n\n    }\n  }\n\n  setColor(color: string) {\n    this.props.currentPlayer.color = color;\n    this.props.updatePlayer(this.props.currentPlayer);  \n  }\n\n  addPlayer() {\n    this.props.addPlayer(this.props.currentPlayer);\n  }\n\n  render() {\n    const { currentPlayer } = this.props;\n\n    return (\n      <div className=\"New-player\">\n        <TextField required label=\"Spielername\" \n          name='name'\n          value={currentPlayer.name} \n          onChange={this.handleChange}/>\n        <ColorPicker select={this.setColor} selected={currentPlayer.color}/>\n        <Button variant=\"contained\" color=\"primary\" \n          disabled={!currentPlayer.name} \n          onClick={this.addPlayer}>Mitspielen</Button>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\nimport { DEFAULT_NUM_WORDS } from '../App';\n\ntype WordAdderProps = {\n  add: (words: string[])=>void,\n  numOfWords: number\n}\n\ntype WordAdderState = {\n  words: string[]\n}\n\nexport class WordAdder extends React.Component<WordAdderProps, WordAdderState> {\n\n  public state: WordAdderState = {\n    words: []\n  };\n\n  constructor(props: WordAdderProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.keyPressed = this.keyPressed.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const index = parseInt(event.target.name.substr(4));\n    const word = event.target.value;\n    this.setState((state, props) => {\n      const newWords = state.words;\n      newWords[index] = word;\n      return {\n        words: newWords\n      };\n    });\n  }\n\n  keyPressed(event: React.KeyboardEvent<HTMLInputElement>) {\n    if (event.key === \"Enter\") {\n      const words = this.state.words;\n      const enterDisabled = words.length < this.props.numOfWords || words.some(word => !word || word.length === 0);\n      if (!enterDisabled) this.props.add(words);\n    }\n  }\n\n  render() {\n    const { add, numOfWords } = this.props;\n    const { words } = this.state;\n    const wordFields = [];\n    if (numOfWords>0) {\n      wordFields.push(\n        <Typography variant=\"subtitle1\" key=\"heading\">\n          Gib {numOfWords>1?`${numOfWords} Wörter` : `ein Wort`} für das Spiel ein\n        </Typography>\n      );\n    }\n    for (let i=0; i<numOfWords; i++) {\n      wordFields.push(\n        <TextField required label={`Wort ${numOfWords > 1 ? (i+1) : ''}`}\n          placeholder=\"Ratebegriff eingeben\"\n          name={`word${i}`}\n          key={`word${i}`}\n          value={words[i]||''} \n          onChange={this.handleChange} \n          onKeyPress={this.keyPressed}/>\n      );\n    }\n    let enterDisabled = words.length < numOfWords || words.some(word => !word || word.length === 0);\n\n    return (\n      <div className=\"Word-adder\">\n        {wordFields}\n        <Button variant=\"contained\" color=\"primary\" \n          disabled={enterDisabled} \n          onClick={() => add(words)}>Jetzt abschicken</Button>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\n\ntype RoundSelectorProps = {\n  onClose: (value?: number)=>void,\n  numOfPlayers: number,\n  open: boolean\n};\n\nexport class RoundSelector extends React.Component<RoundSelectorProps> {\n  render() {\n    const { open, onClose, numOfPlayers } = this.props;\n\n    const handleClose = () => {\n      onClose();\n    };\n\n    const handleListItemClick = (value: number) => {\n      onClose(value);\n    };\n\n    return (\n      <Dialog onClose={handleClose} open={open} disableBackdropClick>\n        <DialogTitle>Lege die Rundenanzahl fest</DialogTitle>\n        <List>\n          <ListItem button onClick={() => handleListItemClick(1)}>\n            <ListItemText \n              primary={numOfPlayers + ' Runden'}\n              secondary=\"1 Begriff pro Spieler\"/>\n          </ListItem>\n          <ListItem button onClick={() => handleListItemClick(2)}>\n            <ListItemText \n              primary={2*numOfPlayers + ' Runden'}\n              secondary=\"2 Begriffe pro Spieler\"/>\n          </ListItem>   \n          <ListItem button onClick={() => handleListItemClick(3)}>\n            <ListItemText \n              primary={3*numOfPlayers + ' Runden'}\n              secondary=\"3 Begriffe pro Spieler\"/>\n          </ListItem>\n        </List>\n      </Dialog>\n    );\n  }\n}","import React from 'react';\nimport { IGame, IUser, GamePhase } from '../custom.d';\nimport { Button, Paper } from '@material-ui/core';\nimport { WordHint } from './WordHint';\nimport { NewPlayer } from './NewPlayer';\nimport { WordAdder } from './WordAdder';\nimport { RoundSelector } from './RoundSelector';\nimport { getRandomColor } from '../common/ColorPicker';\n\nimport { GAME_URL, SETTING_ID, SETTING_NAME, SETTING_COLOR, DEFAULT_NUM_WORDS } from '../App';\n\ntype GameLobbyProps = {\n  game: IGame,\n  setTheme?: (color: string)=>void\n}\ntype GameLobbyState = {\n  currentPlayer: IUser,\n  roundDialogOpen: boolean\n}\n\nexport class GameLobby extends React.Component<GameLobbyProps,GameLobbyState> {\n\n  public state: GameLobbyState = { \n    currentPlayer: {\n      id: localStorage.getItem(SETTING_ID) || '',\n      name: localStorage.getItem(SETTING_NAME) || '',\n      color: getRandomColor(localStorage.getItem(SETTING_COLOR))\n    }, \n    roundDialogOpen: false\n  };\n\n  constructor(props: GameLobbyProps) {\n    super(props);\n\n    this.addPlayer = this.addPlayer.bind(this);\n    this.addWords = this.addWords.bind(this);\n    this.setPlayerProps = this.setPlayerProps.bind(this);\n    this.selectNumRounds = this.selectNumRounds.bind(this);\n    this.startPreparation = this.startPreparation.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  setPlayerProps(player: IUser) {\n    this.setState({\n      currentPlayer: player\n    });\n  }\n\n  addPlayer(player: IUser) {\n    fetch(`${GAME_URL}/${this.props.game.id}/addPlayer`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({player})\n    }).then(res => res.json())\n      .then((data) => {\n        this.setLocalPlayer(data.player);\n      })\n      .catch(console.log)\n  }\n\n  addWords(words: string[]) {\n    let player: IUser = this.state.currentPlayer;\n    player.enteredWords = words;\n\n    fetch(`${GAME_URL}/${this.props.game.id}/updatePlayer`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({player})\n    }).then(res => res.json())\n      .then((data) => {\n        this.setLocalPlayer(data.player);\n      })\n      .catch(console.log)\n  }\n\n  setLocalPlayer(player: IUser) {\n    localStorage.setItem(SETTING_ID, player.id);\n    localStorage.setItem(SETTING_NAME, player.name);\n    if (player.color) localStorage.setItem('playerColor', player.color);\n    if (this.props.setTheme && player.color) {\n      this.props.setTheme(player.color);\n    }\n    this.setState({\n      currentPlayer: player\n    });\n  }\n\n  selectNumRounds() {\n    this.setState({\n      roundDialogOpen: true\n    });\n  }\n\n\n  startPreparation(wordsPerPlayer: number = DEFAULT_NUM_WORDS) {\n    this.setState({\n      roundDialogOpen: false\n    });\n\n    fetch(`${GAME_URL}/${this.props.game.id}/startPreparation`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({wordsPerPlayer})\n    }).catch(console.log)\n  }\n\n  startGame() {\n    fetch(`${GAME_URL}/${this.props.game.id}/start`, {\n      method: 'PUT'\n    }).then((data) => {\n        // TODO\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const { game } = this.props;\n    const { currentPlayer, roundDialogOpen } = this.state;\n    const numWordsPerPlayer = game.wordsPerPlayer || DEFAULT_NUM_WORDS;\n    const currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n    const isHost: boolean = !!currentUserId && game.host === currentUserId;\n    let isInGame: boolean = false;\n    let listOfPlayers;\n\n    if (game.phase === GamePhase.Init) {\n      listOfPlayers = game.players.map(player => {\n        if (player.id === currentUserId) {\n          isInGame = true;\n        } \n        return (\n          <WordHint key={player.id} hint={player.name} color={player.color}></WordHint>\n        )\n      });\n      const newPlayerName: string = !currentPlayer.name ? '?' : currentPlayer.name;\n      const newPlayerColor: string = !currentPlayer.color ? getRandomColor() : currentPlayer.color;\n\n      return (\n        <div className=\"Game-lobby\">\n          <div className=\"New-player\">\n            { \n              isInGame ? (\n                <Paper className=\"StatusInfo\">\n                  Warten auf Mitspieler ... Sobald alle Mitspieler da sind, { isHost ? 'kannst du' : 'kann der Spielleiter'} das Spiel starten. \n                </Paper>\n              ) : (\n                <NewPlayer currentPlayer={currentPlayer}\n                  updatePlayer={this.setPlayerProps}\n                  addPlayer={this.addPlayer}/>\n              )\n            }\n            {\n              isHost && isInGame && (\n                <Button variant=\"contained\" color=\"primary\" \n                  disabled={game.players.length < 3}\n                  onClick={this.selectNumRounds}>Alle Spieler sind da</Button>\n              )\n            }\n          </div>\n          <div className=\"Player-list\">\n            {listOfPlayers}\n            {!isInGame && <WordHint hint={newPlayerName} color={newPlayerColor} showPencil={true}></WordHint>}\n          </div>\n          <RoundSelector numOfPlayers={game.players.length} open={roundDialogOpen} onClose={this.startPreparation}/>\n        </div>\n      );\n    } else if (game.phase === GamePhase.Preparation) {\n      //let myWords: string[] = [];\n      let allMyWordsEntered: boolean = false;\n      listOfPlayers = game.players.map(player => {\n        const wordsEntered: boolean = !!player.enteredWords && player.enteredWords.length === numWordsPerPlayer;\n        if (player.id === currentUserId) {\n          isInGame = true;\n          //myWords = player.enteredWords || [];\n          allMyWordsEntered = wordsEntered;\n        } \n        return (\n          <WordHint key={player.id} hint={player.name} color={player.color} showPencil={!wordsEntered}></WordHint>\n        )\n      });\n\n      // TODO not in game users\n      return (\n        <div className=\"Game-lobby\">\n          <div className=\"New-player\">\n            { \n              allMyWordsEntered || !isInGame ? ( \n                <Paper className=\"StatusInfo\">\n                  Warten auf Mitspieler ... Sobald alle fertig sind, geht's los. \n                </Paper>\n              ) : (\n                <WordAdder add={this.addWords} numOfWords={numWordsPerPlayer}/>\n              )\n            }\n          </div>\n          <div className=\"Player-list\">\n            {listOfPlayers}\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n}","import React from 'react';\nimport {WordCard} from './WordCard';\nimport { IGame } from '../custom.d';\n\ntype GameEndViewProps = {\n  game: IGame\n};\n\nexport class GameEndView extends React.Component<GameEndViewProps> {\n  render() {\n    const game: IGame = this.props.game;\n    const correctWords = game.correctWords.map(wordResult => {\n      return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={true}/>\n    });\n    const wrongWords = game.wrongWords.map(wordResult => {\n      return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={false}/>\n    });\n\n    return (\n      <div className=\"Game-end-view\">\n        <div className=\"Correct-words\">\n          <h2>Richtig ({game.correctWords.length})</h2>\n          {correctWords}\n        </div>\n        <div className=\"Wrong-words\">\n          <h2>Falsch ({game.wrongWords.length})</h2>\n          {wrongWords}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { IGame, GamePhase } from '../custom.d';\n\ntype GameStatsProps = {\n  game: IGame\n};\n\nexport class GameStats extends React.Component<GameStatsProps> {\n  render() {\n    const game: IGame = this.props.game;\n    const roundHost = game.roundHost ? game.roundHost.name : '?';\n    const guesser = game.currentGuesser ? game.currentGuesser.name : '?';\n\n    let gamePhase;\n    switch(game.phase) {\n      case GamePhase.HintWriting: \n        const players = game.players.filter(p => game.currentGuesser && p.id !== game.currentGuesser.id).map(p => p.name);\n        const playersString = players.slice(0, players.length-1).join(', ') + ' und ' + players[players.length-1];\n        gamePhase = playersString + ' schreiben Hinweise auf...';\n        break;\n      case GamePhase.HintComparing: \n        gamePhase = roundHost + ' überprüft die Hinweise auf ungültige oder doppelte Wörter...';\n        break;\n      case GamePhase.Guessing: \n        gamePhase = guesser + ' versucht den Begriff zu erraten...';\n        break;\n      case GamePhase.Solution: \n        if (game.guessedRight) {\n          gamePhase = guesser + ' lag genau richtig!';\n        } else {\n          gamePhase = guesser + ' lag daneben! ' + roundHost + ' entscheidet ob es trotzdem zählt...';\n        }\n        break;\n    }\n\n    return (\n      <div className=\"Game-progress\">\n        <div>Runde: {game.round+1}/{game.words.length}, Richtige: {game.correctWords.length}, Falsche: {game.wrongWords.length}</div>\n        <div>Phase: {gamePhase}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {GameField} from './GameField';\nimport {GameLobby} from './GameLobby';\nimport {GameEndView} from './GameEndView';\nimport {GameStats} from './GameStats';\nimport { IGame, GamePhase } from '../custom.d';\n\nimport { GAME_URL, SETTING_ID, APP_TITLE } from '../App';\n\nconst POLLING_INTERVAL = 1000;\n\ntype JustOneGameProps = {\n  gameId: string,\n  setTheme?: (color: string)=>void\n};\ntype JustOneGameState = {\n  currentGame?: IGame\n};\n\nexport class JustOneGame extends React.Component<JustOneGameProps,JustOneGameState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n  private _interval: any; // TODO\n\n  constructor(props: JustOneGameProps) {\n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.loadGame();\n\n    this._interval = setInterval(this.loadGame.bind(this), POLLING_INTERVAL);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._interval);\n  }\n\n  loadGame() {\n    let id = this.props.gameId;\n    if (!id) return;\n\n    fetch(`${GAME_URL}/${id}`)\n      .then(res => res.json())\n      .then((data) => {\n        setDocumentTitle(data.game.name);\n        this.setState({\n          currentGame: data.game\n        });\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const currentGame: IGame|undefined = this.state.currentGame;\n\n    let gameContent;\n    let gameStats;\n    if (currentGame) {\n      if ([GamePhase.Init,GamePhase.Preparation].includes(currentGame.phase)) {\n        gameContent = <GameLobby game={currentGame} setTheme={this.props.setTheme}></GameLobby>\n      } else if (currentGame.phase === GamePhase.End) {\n        gameContent = <GameEndView game={currentGame}></GameEndView>;\n      } else {\n        gameStats = <GameStats game={currentGame}></GameStats>;\n        gameContent = <GameField game={currentGame}></GameField>;\n      }     \n    }\n\n    return (\n      <div className=\"Game-content\">\n        {gameStats}\n        {gameContent}\n      </div>\n    );\n  }\n}\n\nfunction setDocumentTitle(gameName?: string) {\n  if (gameName) {\n    document.title = `${APP_TITLE} - ${gameName}`;\n  } else {\n    document.title = APP_TITLE;\n  }\n}\n","import React from 'react';\nimport {JustOneHome} from './JustOneHome';\nimport {JustOneGame} from './JustOneGame';\n\ntype JustOneProps = {\n  gameId?: string,\n  setTheme?: (color: string)=>void\n};\ntype JustOneState = {\n\n};\n\nexport class JustOne extends React.Component<JustOneProps,JustOneState> {\n  render() {\n    if (this.props.gameId) {\n      return <JustOneGame gameId={this.props.gameId} setTheme={this.props.setTheme}></JustOneGame>;\n    } else {\n      return <JustOneHome></JustOneHome>\n    }\n  }\n}","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport './App.scss';\nimport { AppBar, Toolbar, IconButton, Typography, Paper, Button } from '@material-ui/core';\nimport { Home as HomeIcon, AccountCircle as AccountCircleIcon } from '@material-ui/icons';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nimport {JustOne} from './just-one/JustOne';\nimport { UserConfig } from './common/UserConfig';\n\nconst isProd = window.location.hostname === 'justone.okj.name';\nconst apiPort = isProd ? '' : ':9000';\nexport const API_URL = window.location.protocol + '//' + window.location.hostname + apiPort + '/api';\nexport const GAME_URL = API_URL + '/games';\nexport const SETTING_ID = 'playerId';\nexport const SETTING_NAME = 'playerName';\nexport const SETTING_COLOR = 'playerColor';\nexport const SETTING_THEME = 'darkTheme';\nexport const APP_TITLE = 'Nur ein Wort!';\nexport const DEFAULT_NUM_WORDS: number = 2; // Two words per player\nconst DEFAULT_PRIMARY_COLOR = '#43a047';\nconst DEFAULT_SECONDARY_COLOR = '#d32f2f'; // also error dark\n\nenum ThemeMode {\n  AUTO = 'automatisch',\n  BRIGHT = 'hell',\n  DARK = 'dunkel'\n}\n\nexport const App = () =>  {\n\n  const [userColor, setUserColor] = useState(localStorage.getItem(SETTING_COLOR));\n  const [userTheme, setUserTheme] = useState(localStorage.getItem(SETTING_THEME) || ThemeMode.AUTO);\n  const currentUserName: string|null = localStorage.getItem(SETTING_NAME);\n  let prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  if (userTheme === ThemeMode.BRIGHT) {\n    prefersDarkMode = false;\n  } else if (userTheme === ThemeMode.DARK) {\n    prefersDarkMode = true;\n  }\n\n  let primaryColor = userColor;\n  if (!primaryColor || !primaryColor.startsWith('#') || primaryColor.length !== 7) {\n    primaryColor = DEFAULT_PRIMARY_COLOR;\n  }\n\n  const applyUserTheme = (value: string) => {\n    setUserTheme(value);\n    localStorage.setItem(SETTING_THEME, value);\n    setUserConfigOpen(false);\n  }\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          primary: {\n            main: primaryColor || DEFAULT_PRIMARY_COLOR\n          },\n          secondary: {\n            main: DEFAULT_SECONDARY_COLOR,\n          }, \n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode, primaryColor],\n  );\n\n  const classNames = ['App'];\n  if (prefersDarkMode) classNames.push('App-dark');\n\n  const [userConfigOpen, setUserConfigOpen] = React.useState(false);\n\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n      <Paper square elevation={0} className={classNames.join(' ')}>\n        <AppBar position=\"sticky\">\n          <Toolbar>\n            <Link to=\"/\" className=\"ButtonLink\">\n              <IconButton edge=\"start\" color=\"inherit\" aria-label=\"home\">\n                <HomeIcon />\n              </IconButton>\n            </Link>\n            <Typography variant=\"h2\" className=\"appTitle\">\n              Nur ein Wort!\n            </Typography>\n            { \n              currentUserName ? \n              <Button onClick={()=>setUserConfigOpen(true)} className=\"Account-button\" color=\"inherit\" startIcon={<AccountCircleIcon />}>\n                {currentUserName}\n              </Button> : \n              <IconButton onClick={()=>setUserConfigOpen(true)} edge=\"end\" color=\"inherit\">\n                <AccountCircleIcon />\n              </IconButton>\n            }\n            <UserConfig \n              open={userConfigOpen} \n              onClose={applyUserTheme} \n              selectedValue={userTheme} \n              possibleValues={[ThemeMode.AUTO, ThemeMode.BRIGHT, ThemeMode.DARK]}\n            ></UserConfig>\n          </Toolbar>\n        </AppBar>\n        <Switch>\n          <Route path=\"/:gameId\" component={(props: RouteComponentProps<any>) => <JustOne gameId={props.match.params.gameId} setTheme={setUserColor}/>} />\n          <Route children={<JustOne/>} />\n        </Switch> \n      </Paper>  \n    </ThemeProvider>\n    </Router>\n  );  \n}\n\nexport default App;\n","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\n\ntype UserConfigProps = {\n  onClose: (value: string)=>void,\n  selectedValue: string,\n  possibleValues: string[],\n  open: boolean\n};\n\nexport class UserConfig extends React.Component<UserConfigProps> {\n  render() {\n    const { open, onClose, selectedValue, possibleValues } = this.props;\n\n    const handleClose = () => {\n      onClose(selectedValue);\n    };\n\n    const handleListItemClick = (value: string) => {\n      onClose(value);\n    };\n\n    return (\n      <Dialog onClose={handleClose} open={open}>\n        <DialogTitle>Nachtmodus</DialogTitle>\n        <List>\n          {possibleValues.map((value: string) => (\n            <ListItem button onClick={() => handleListItemClick(value)} key={value} selected={selectedValue === value}>\n              <ListItemText primary={value} />\n            </ListItem>\n          ))}\n        </List>\n      </Dialog>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}