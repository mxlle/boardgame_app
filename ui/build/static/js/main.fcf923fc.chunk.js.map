{"version":3,"sources":["shared/constants.tsx","custom.d.ts","shared/functions.tsx","just-one/GameList.tsx","shared/apiFunctions.tsx","just-one/JustOneHome.tsx","just-one/components/WordHintInput.tsx","common/PencilAnimation.tsx","just-one/components/WordHint.tsx","common/ColorPicker.tsx","common/NewPlayer.tsx","just-one/components/RoundSelector.tsx","just-one/GameLobby.tsx","just-one/components/WordCard.tsx","just-one/components/WordAdder.tsx","just-one/GamePreparation.tsx","just-one/GameEndView.tsx","just-one/components/GameStats.tsx","just-one/gamePhases/HintWritingView.tsx","just-one/gamePhases/HintComparingView.tsx","just-one/gamePhases/GuessingView.tsx","just-one/gamePhases/SolutionView.tsx","just-one/JustOneGame.tsx","common/UserConfig.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ThemeMode","apiPort","window","location","hostname","GAME_URL","protocol","GamePhase","getCurrentUserId","userId","localStorage","getItem","shortid","setItem","getCurrentUserInGame","game","getUserInGame","players","find","player","id","setDocumentTitle","gameName","document","title","GameList","currentUserId","currentUserName","this","props","allGames","deleteGame","newGames","filter","phase","Init","onGoingGames","End","includes","doneGames","createListItem","ListItem","key","className","to","component","Link","button","ListItemText","primary","name","secondary","map","p","join","host","ListItemSecondaryAction","IconButton","onClick","newGamesList","onGoingGamesList","doneGamesList","length","Paper","Typography","variant","List","React","Component","loadGames","a","_get","games","loadGame","createGame","_post","endpoint","Promise","resolve","reject","fetch","method","headers","_getAuthHeader","then","data","error","console","addPlayer","_put","updatePlayer","startPreparation","wordsPerPlayer","resolveRound","correct","res","json","body","JSON","stringify","JustOneHome","_interval","_isMounted","bind","handleChange","newGameName","state","setInterval","clearInterval","setState","gameId","g","event","target","value","playerId","href","TextField","label","onChange","Button","color","WordHintInput","submitHint","keyPressed","onKeyPress","disabled","Send","PencilAnimation","styleObj1","backgroundColor","styleObj2","borderTopColor","style","WordHint","currentHint","hint","styleObj","author","showPencil","showCheck","showDuplicateToggle","toggleDuplicate","classes","push","duplicate","extraClasses","showInput","Checkbox","icon","Mood","checkedIcon","MoodBad","checked","allColors","getRandomColor","Math","floor","random","ColorPicker","selected","select","colorButtons","NewPlayer","setColor","currentPlayer","required","RoundSelector","open","onClose","numOfPlayers","handleListItemClick","Dialog","disableBackdropClick","DialogTitle","GameLobby","roundDialogOpen","setPlayerProps","selectNumRounds","api","resultPlayer","setLocalPlayer","setTheme","isHost","isInGame","listOfPlayers","newPlayerName","newPlayerColor","WordCard","currentWord","word","guesser","guesserText","guess","toLowerCase","guessedRight","borderColor","WordAdder","words","index","parseInt","substr","newWords","numOfWords","some","add","wordFields","i","placeholder","enterDisabled","GamePreparation","addWords","enteredWords","numWordsPerPlayer","myWords","allMyWordsEntered","wordsEntered","myWordCards","GameEndView","correctWords","wordResult","wrongWords","GameStats","gamePhase","roundHost","currentGuesser","HintWriting","slice","HintComparing","Guessing","Solution","round","HintWritingView","currentUser","isGuesser","guesserName","currentHints","hints","hintObj","hintIsMine","authorName","showHint","HintComparingView","showHints","hintIndex","isRoundHost","isDuplicate","GuessingView","SolutionView","solutionButton2","currentGuess","solutionButton1","JustOneGame","currentGame","gameContent","gameStats","Preparation","UserConfig","selectedValue","possibleValues","App","useState","userColor","setUserColor","AUTO","userTheme","setUserTheme","userConfigOpen","setUserConfigOpen","prefersDarkMode","useMediaQuery","BRIGHT","DARK","primaryColor","startsWith","theme","useMemo","createMuiTheme","palette","main","type","classNames","ThemeProvider","square","elevation","AppBar","position","Toolbar","edge","aria-label","Home","startIcon","AccountCircle","path","match","params","children","Boolean","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"uKAiBYA,E,4KAfNC,EADsC,qBAA7BC,OAAOC,SAASC,SACN,GAAK,QAEjBC,EADUH,OAAOC,SAASG,SAAW,KAAOJ,OAAOC,SAASC,SAAWH,EAAU,OAC5D,U,SAatBD,K,mBAAAA,E,cAAAA,E,eAAAA,M,SCDAO,E,qIAAAA,O,eAAAA,I,6BAAAA,I,6BAAAA,I,iCAAAA,I,uBAAAA,I,uBAAAA,I,cAAAA,M,0BCZL,SAASC,IACf,IAAIC,EAASC,aAAaC,QFED,aEFwB,GAKjD,OAJKF,IACJA,EAeMG,MAdNF,aAAaG,QFDW,WECSJ,IAE3BA,EAGD,SAASK,EAAqBC,GACjC,OAAOC,EAAcD,EAAMP,KAGxB,SAASQ,EAAcD,EAAaN,GACvC,OAAOM,EAAKE,QAAQC,MAAK,SAACC,GAAD,OAAmBA,EAAOC,KAAOX,KAOvD,SAASY,EAAiBC,GAEzBC,SAASC,MADTF,EACA,UFdiB,gBEcjB,cAAmCA,GFdlB,gBGYlB,IAAMG,EAAb,4MACSC,cAAwBhB,aAAaC,QHnBpB,aGmB2C,GADrE,EAESgB,gBAA0BjB,aAAaC,QHnBpB,eGmB6C,GAFzE,uDAIY,IAAD,SACuBiB,KAAKC,MAA5BC,EADA,EACAA,SAASC,EADT,EACSA,WACVC,EAAWF,EAASG,QAAO,SAAAlB,GAAI,OAAIA,EAAKmB,QAAU3B,EAAU4B,OAASrB,EAAqBC,MAC1FqB,EAAeN,EAASG,QAAO,SAAAlB,GAAI,OACtC,CAACR,EAAU4B,KAAK5B,EAAU8B,KAAKC,SAASvB,EAAKmB,QAAWnB,EAAKmB,QAAU3B,EAAU4B,QAAUrB,EAAqBC,MAE7GwB,EAAYT,EAASG,QAAO,SAAAlB,GAAI,OAAIA,EAAKmB,QAAU3B,EAAU8B,OAE7DG,EAAiB,SAACzB,GACtB,OACE,kBAAC0B,EAAA,EAAD,eAAUC,IAAK3B,EAAKK,GAAIuB,UAAU,gBAC5B,CAAEC,GAAG,IAAD,OAAM7B,EAAKK,KADrB,CAEEyB,UAAWC,IACXC,QAAM,IAEN,kBAACC,EAAA,EAAD,CAAc5B,GAAIL,EAAKK,GAAI6B,QAAO,UAAKlC,EAAKmC,MAAQnC,EAAKK,IAAM+B,UAAS,mBAAcpC,EAAKE,QAAQmC,KAAI,SAAAC,GAAC,OAAIA,EAAEH,QAAMI,KAAK,OAAS,OAEhI,EAAK5B,gBAAkBX,EAAKwC,MAC1B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAS,kBAAM3B,EAAWhB,EAAKK,MACzC,kBAAC,IAAD,UASRuC,EAAe3B,EAASoB,IAAIZ,GAC5BoB,EAAmBxB,EAAagB,IAAIZ,GACpCqB,EAAgBtB,EAAUa,IAAIZ,GAEpC,OACE,yBAAKG,UAAU,YAEXiB,EAAiBE,OAAS,GACxB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,0BACA,kBAACC,EAAA,EAAD,KACGN,IAMPD,EAAaG,OAAS,GACpB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,eACA,kBAACC,EAAA,EAAD,KACGP,IAMPE,EAAcC,OAAS,GACrB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,0BACA,kBAACC,EAAA,EAAD,KACGL,SAhEjB,GAA8BM,IAAMC,W,QCrB7B,SAAeC,IAAtB,+B,4CAAO,sBAAAC,EAAA,sEACWC,GAAK,OADhB,sBACwBC,MADxB,0BACiC,GADjC,kF,sBAIA,SAAeC,EAAtB,kC,4CAAO,WAAwBrD,GAAxB,SAAAkD,EAAA,sEACWC,GAAKnD,GADhB,uCACqBL,MADrB,4C,sBAIA,SAAe2D,EAAtB,kC,4CAAO,WAA0B3D,GAA1B,SAAAuD,EAAA,+EACIK,GAAM,MAAO,CAAC5D,UADlB,4C,sBAIA,SAASgB,GAAWX,GACvB,OAmGawD,EAnGE,UAAD,OAAWxD,GAoGlB,IAAIyD,SAAQ,SAACC,EAASC,GACzBC,MAAM,GAAD,OAAI3E,EAAJ,YAAgBuE,GAAY,CAC7BK,OAAQ,SACRC,QAAQ,eACDC,QAGNC,MAAK,SAACC,GACHP,OACD,SAACQ,GACAC,QAAQD,MAAMA,GACdP,EAAOO,SAZvB,IAAiBV,EAhGV,SAAeY,GAAtB,qC,8CAAO,WAAyBpE,EAAYD,GAArC,SAAAmD,EAAA,sEACWmB,GAAK,GAAD,OAAIrE,EAAJ,cAAoB,CAACD,WADpC,uCAC8CA,QAD9C,4C,sBAIA,SAAeuE,GAAtB,qC,8CAAO,WAA4BtE,EAAYD,GAAxC,SAAAmD,EAAA,sEACWmB,GAAK,GAAD,OAAIrE,EAAJ,iBAAuB,CAACD,WADvC,uCACiDA,QADjD,4C,sBAIA,SAASwE,GAAiBvE,EAAYwE,GACzC,OAAOH,GAAK,GAAD,OAAIrE,EAAJ,qBAA2B,CAACwE,mBAmBpC,SAASC,GAAazE,EAAY0E,GACrC,OAAOL,GAAK,GAAD,OAAIrE,EAAJ,YAAkB,CAAC0E,YAIlC,SAASvB,GAAKK,GACV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,MAAM,GAAD,OAAI3E,EAAJ,YAAgBuE,GAAY,CAC7BK,OAAQ,MACRC,QAAQ,eACDC,QAGNC,MAAK,SAAAW,GAAG,OAAIA,EAAIC,UAChBZ,MAAK,SAACC,GACHP,EAAQO,MACT,SAACC,GACAC,QAAQD,MAAMA,GACdP,EAAOO,SAKvB,SAASX,GAAMC,EAAkBS,GAC7B,OAAO,IAAIR,SAAQ,SAACC,EAASC,GACzBC,MAAM,GAAD,OAAI3E,EAAJ,YAAgBuE,GAAY,CAC7BK,OAAQ,OACRC,QAAQ,2BACDC,MADA,IAEH,OAAU,mBACV,eAAgB,qBAEpBc,KAAMC,KAAKC,UAAUd,KAEpBD,MAAK,SAAAW,GAAG,OAAIA,EAAIC,UAChBZ,MAAK,SAACC,GACHP,EAAQO,MACT,SAACC,GACAC,QAAQD,MAAMA,GACdP,EAAOO,SAKvB,SAASG,GAAKb,EAAkBS,GAC5B,OAAO,IAAIR,SAAQ,SAACC,EAASC,GACzBC,MAAM,GAAD,OAAI3E,EAAJ,YAAgBuE,GAAY,CAC7BK,OAAQ,MACRC,QAAQ,2BACDC,MADA,IAEH,OAAU,mBACV,eAAgB,qBAEpBc,KAAMC,KAAKC,UAAUd,KAEpBD,MAAK,SAAAW,GACFA,EAAIC,OAAOZ,MAAK,SAAAC,GACZP,EAAQO,MACT,SAAAC,GACCR,UAEL,SAACQ,GACAC,QAAQD,MAAMA,GACdP,EAAOO,SAsBvB,SAASH,KACL,MAAO,CACH,cAAiB3E,KC9HzB,IAQa4F,GAAb,kDAOI,WAAYvE,GAA0B,IAAD,uBACjC,cAAMA,IAPHH,cAAwBhB,aAAaC,QLXtB,aKW6C,GAM9B,EAL9BgB,gBAA0BjB,aAAaC,QLXtB,eKW+C,GAKlC,EAH7B0F,eAG6B,IAF7BC,YAAsB,EAK1B,EAAK5B,WAAa,EAAKA,WAAW6B,KAAhB,gBAClB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKxE,WAAa,EAAKA,WAAWwE,KAAhB,gBAElB,IAAIE,EAAc,EAAK9E,gBAAL,UAA0B,EAAKA,gBAA/B,WAA0D,cAP3C,OASjC,EAAK+E,MAAQ,CAAE5E,SAAU,GAAI2E,YAAaA,GATT,EAPzC,gEAoBQ7E,KAAK0E,YAAa,EAElBjF,IAEAO,KAAKyC,YACLzC,KAAKyE,UAAYnG,OAAOyG,YAAY/E,KAAKyC,UAAUkC,KAAK3E,MAjCvC,OAQzB,6CA6BQA,KAAK0E,YAAa,EAClBM,cAAchF,KAAKyE,aA9B3B,kKAkC0BhC,IAlC1B,UAkCYG,EAlCZ,OAmCa5C,KAAK0E,WAnClB,iDAoCQ1E,KAAKiF,SAAS,CACV/E,SAAU0C,IArCtB,uIAyCesC,GACP/E,GAAW+E,GACXlF,KAAKiF,UAAS,SAACH,GACX,MAAO,CACH5E,SAAU4E,EAAM5E,SAASG,QAAO,SAAA8E,GAAC,OAAIA,EAAE3F,KAAO0F,WA7C9D,mCAkDiBE,GACTpF,KAAKiF,SAAS,CAACJ,YAAaO,EAAMC,OAAOC,UAnDjD,gKAuDcnG,EAyBH,CAAC,GAAK,GAAI,KAAQ,GAAI,MAAQ,GAAG,QAAU,GAAG,KAAO,GAAG,eLnF1B,EKmF6D,MAAQ,EAAE,MAAQ,EAAE,MAAQ,GAAG,aAAe,GAAG,WAAa,KAxBvJmC,KAAOtB,KAAK8E,MAAMD,YAxD/B,SA0DqC/B,EAAW3D,GA1DhD,gBA0DeK,EA1Df,EA0DeA,GAAI+F,EA1DnB,EA0DmBA,SAERvF,KAAKF,gBAAkByF,GACtBzG,aAAaG,QLvEC,WKuEmBsG,GAErCjH,OAAOC,SAASiH,KAAO,IAAMhG,EA/DrC,qIAkEc,IAAD,EAC2BQ,KAAK8E,MAA9BD,EADF,EACEA,YAAa3E,EADf,EACeA,SAEpB,OACI,yBAAKa,UAAU,eACX,kBAAC0E,EAAA,EAAD,CAAWC,MAAO,YAAaJ,MAAOT,EAAac,SAAU3F,KAAK4E,eAClE,kBAACgB,EAAA,EAAD,CAAQvD,QAAQ,YAAYwD,MAAM,UAAU/D,QAAS9B,KAAK8C,YAA1D,eACA,kBAAC,EAAD,CAAU5C,SAAUA,EAAUC,WAAYH,KAAKG,kBAzE/D,GAAiCoC,IAAMC,W,cCJ1BsD,GAAb,kDAEE,WAAY7F,GAA4B,IAAD,8BACtC,cAAMA,IACA6E,MAAQ,CAACQ,MAAO,IAErB,EAAKV,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKoB,WAAa,EAAKA,WAAWpB,KAAhB,gBAClB,EAAKqB,WAAa,EAAKA,WAAWrB,KAAhB,gBANmB,EAFzC,yDAWeS,GACXpF,KAAKiF,SAAS,CAACK,MAAOF,EAAMC,OAAOC,UAZvC,mCAgBGtF,KAAKC,MAAM8F,WAAW/F,KAAK8E,MAAMQ,OACjCtF,KAAKiF,SAAS,CAACK,MAAO,OAjBzB,iCAoBaF,GACQ,UAAdA,EAAMtE,KACRd,KAAK+F,eAtBV,+BA2BI,OACC,yBAAKhF,UAAU,mBACd,kBAAC0E,EAAA,EAAD,CAAWC,MAAO1F,KAAKC,MAAMyF,OAAS,mBACrCJ,MAAOtF,KAAK8E,MAAMQ,MAClBK,SAAU3F,KAAK4E,aACfqB,WAAYjG,KAAKgG,aACnB,kBAACnE,EAAA,EAAD,CAAYgE,MAAM,UACjBK,UAAWlG,KAAK8E,MAAMQ,MACtBxD,QAAS9B,KAAK+F,YACV,kBAACI,GAAA,EAAD,YApCV,GAAmC5D,IAAMC,WCP5B4D,GAAb,uKAGI,IAAMC,EAAY,CACjBC,gBAAiBtG,KAAKC,MAAM4F,OAEvBU,EAAY,CACjBC,eAAgBxG,KAAKC,MAAM4F,OAG5B,OACD,yBAAK9E,UAAU,UACV,yBAAKA,UAAU,OAAO0F,MAAOJ,IAC7B,yBAAKtF,UAAU,MAAM0F,MAAOF,SAbpC,GAAqChE,IAAMC,W,8BCa9BkE,GAAb,uKAGG,IAAMC,EAAc3G,KAAKC,MAAM2G,KACxBf,EAAQ7F,KAAKC,MAAM4F,MACnBgB,EAAW,CAChB,MAAShB,EACR,YAAeA,GAEXiB,EAAS9G,KAAKC,MAAM6G,OACpBC,EAAa/G,KAAKC,MAAM8G,aAAe/G,KAAKC,MAAM2G,KAClDI,EAAYhH,KAAKC,MAAM+G,UACvBC,EAAsBjH,KAAKC,MAAMgH,oBACjCC,EAAkBlH,KAAKC,MAAMiH,gBAE7BC,EAAU,CAAC,aACbJ,GAAYI,EAAQC,KAAK,qBACzBpH,KAAKC,MAAMoH,WAAWF,EAAQC,KAAK,uBACnCT,GAAeA,EAAYzE,OAAS,GAAIiF,EAAQC,KAAK,kBAChDT,GAAeA,EAAYzE,OAAS,IAAIiF,EAAQC,KAAK,kBAC9D,IAAME,EAAeH,EAAQzF,KAAK,KAElC,OAAI1B,KAAKC,MAAMsH,WAAavH,KAAKC,MAAM8F,WAEnC,kBAAC5D,EAAA,EAAD,CAAOpB,UAAWuG,EAAcb,MAAOI,GACrC,kBAAC,GAAD,CAAed,WAAY/F,KAAKC,MAAM8F,aACrCe,GAAU,0BAAM/F,UAAU,cAAc+F,IAK3C,kBAAC3E,EAAA,EAAD,CAAOpB,UAAWuG,EAAcb,MAAOI,IACnCG,GAAaL,EACdK,GAAa,0BAAMjG,UAAU,aAAhB,UACbgG,GAAc,kBAAC,GAAD,CAAiBlB,MAAOA,IACtCoB,GAAuBC,GACtB,kBAACM,GAAA,EAAD,CAAUzG,UAAU,mBAClB0G,KAAM,kBAACC,GAAA,EAAD,MAAcC,YAAa,kBAACC,GAAA,EAAD,MACjCC,QAAS7H,KAAKC,MAAMoH,UACpB1B,SAAU,kBAAIuB,OAEjBJ,GAAU,0BAAM/F,UAAU,cAAc+F,QAzCnD,GAA8BvE,IAAMC,W,oBCfvBsF,GAAsB,CACjC,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGK,SAASC,GAAelC,GAC7B,OAAKA,GAAUiC,GAAUpH,SAASmF,GAGzBA,EAFAiC,GAAUE,KAAKC,MAAMD,KAAKE,SAASJ,GAAU5F,SAWjD,IAAMiG,GAAb,uKAEY,IAAD,EACqBnI,KAAKC,MAA1BmI,EADA,EACAA,SAAUC,EADV,EACUA,OAEXC,EAAeR,GAAUtG,KAAI,SAACqE,GAClC,IAAMsB,EAAU,CAAC,gBAEjB,OADIiB,IAAavC,GAAOsB,EAAQC,KAAK,kBAEnC,kBAACvF,EAAA,EAAD,CAAYd,UAAWoG,EAAQzF,KAAK,KAAMI,QAAS,kBAAMuG,EAAOxC,IAAQY,MAAO,CAAEH,gBAAiBT,GAAS/E,IAAK+E,GAC7GuC,IAAavC,GAAS,kBAAC,KAAD,UAK7B,OACE,yBAAK9E,UAAU,gBACXuH,OAjBV,GAAiC/F,IAAMC,WCxB1B+F,GAAb,kDAEE,WAAYtI,GAAwB,IAAD,8BACjC,cAAMA,IAED2E,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAK6D,SAAW,EAAKA,SAAS7D,KAAd,gBAChB,EAAKf,UAAY,EAAKA,UAAUe,KAAf,gBALgB,EAFrC,yDAUeS,GACe,SAAtBA,EAAMC,OAAO/D,OACftB,KAAKC,MAAMwI,cAAcnH,KAAO8D,EAAMC,OAAOC,MAE7CtF,KAAKC,MAAM6D,aAAa9D,KAAKC,MAAMwI,kBAdzC,+BAmBW5C,GACP7F,KAAKC,MAAMwI,cAAc5C,MAAQA,EACjC7F,KAAKC,MAAM6D,aAAa9D,KAAKC,MAAMwI,iBArBvC,kCAyBIzI,KAAKC,MAAM2D,UAAU5D,KAAKC,MAAMwI,iBAzBpC,+BA4BY,IACAA,EAAkBzI,KAAKC,MAAvBwI,cAER,OACE,yBAAK1H,UAAU,cACb,kBAAC0E,EAAA,EAAD,CAAWiD,UAAQ,EAAChD,MAAM,cACxBpE,KAAK,OACLgE,MAAOmD,EAAcnH,KACrBqE,SAAU3F,KAAK4E,eACjB,kBAAC,GAAD,CAAayD,OAAQrI,KAAKwI,SAAUJ,SAAUK,EAAc5C,QAC5D,kBAACD,EAAA,EAAD,CAAQvD,QAAQ,YAAYwD,MAAM,UAChCK,UAAWuC,EAAcnH,KACzBQ,QAAS9B,KAAK4D,WAFhB,mBAtCR,GAA+BrB,IAAMC,W,oBCCxBmG,GAAb,uKACY,IAAD,EACiC3I,KAAKC,MAArC2I,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,aAMjBC,EAAsB,SAACzD,GAC3BuD,EAAQvD,IAGV,OACE,kBAAC0D,GAAA,EAAD,CAAQH,QATU,WAClBA,KAQ8BD,KAAMA,EAAMK,sBAAoB,GAC5D,kBAACC,GAAA,EAAD,mCACA,kBAAC5G,EAAA,EAAD,KACE,kBAACzB,EAAA,EAAD,CAAUM,QAAM,EAACW,QAAS,kBAAMiH,EAAoB,KAClD,kBAAC3H,EAAA,EAAD,CACEC,QAASyH,EAAe,UACxBvH,UAAU,2BAEd,kBAACV,EAAA,EAAD,CAAUM,QAAM,EAACW,QAAS,kBAAMiH,EAAoB,KAClD,kBAAC3H,EAAA,EAAD,CACEC,QAAS,EAAEyH,EAAe,UAC1BvH,UAAU,4BAEd,kBAACV,EAAA,EAAD,CAAUM,QAAM,EAACW,QAAS,kBAAMiH,EAAoB,KAClD,kBAAC3H,EAAA,EAAD,CACEC,QAAS,EAAEyH,EAAe,UAC1BvH,UAAU,kCA7BxB,GAAmCgB,IAAMC,WCO5B2G,GAAb,kDAWI,WAAYlJ,GAAwB,IAAD,8BAC/B,cAAMA,IAVH6E,MAAwB,CAC3B2D,cAAe,CACXjJ,GAAIV,aAAaC,QZjBH,aYiB0B,GACxCuC,KAAMxC,aAAaC,QZjBH,eYiB4B,GAC5C8G,MAAOkC,GAAejJ,aAAaC,QZjBlB,iBYmBrBqK,iBAAiB,GAMjB,EAAKxF,UAAY,EAAKA,UAAUe,KAAf,gBACjB,EAAK0E,eAAiB,EAAKA,eAAe1E,KAApB,gBACtB,EAAK2E,gBAAkB,EAAKA,gBAAgB3E,KAArB,gBACvB,EAAKZ,iBAAmB,EAAKA,iBAAiBY,KAAtB,gBANO,EAXvC,2DAoBmBpF,GACXS,KAAKiF,SAAS,CACVwD,cAAelJ,MAtB3B,yEA0BoBA,GA1BpB,uFA2BmCgK,GAAcvJ,KAAKC,MAAMd,KAAKK,GAAID,GA3BrE,UA2BciK,EA3Bd,wDA6BQxJ,KAAKyJ,eAAeD,GA7B5B,4IAgCmBjK,GACXT,aAAaG,QZ9CK,WY8CeM,EAAOC,IACxCV,aAAaG,QZ9CO,aY8CeM,EAAO+B,MACtC/B,EAAOsG,OAAO/G,aAAaG,QAAQ,cAAeM,EAAOsG,OACzD7F,KAAKC,MAAMyJ,UAAYnK,EAAOsG,OAC9B7F,KAAKC,MAAMyJ,SAASnK,EAAOsG,OAE/B7F,KAAKiF,SAAS,CACVwD,cAAelJ,MAxC3B,wCA6CQS,KAAKiF,SAAS,CACVmE,iBAAiB,MA9C7B,yCAkDkE,IAA7CpF,EAA4C,uDZxDxB,EYyDjChE,KAAKiF,SAAS,CACVmE,iBAAiB,IAGrBG,GAAqBvJ,KAAKC,MAAMd,KAAKK,GAAIwE,KAvDjD,+BA0Dc,IACE7E,EAASa,KAAKC,MAAdd,KADH,EAEsCa,KAAK8E,MAAxC2D,EAFH,EAEGA,cAAeW,EAFlB,EAEkBA,gBACjBtJ,EAAwBhB,aAAaC,QZ1EzB,aY0EgD,GAC5D4K,IAAoB7J,GAAiBX,EAAKwC,OAAS7B,EACrD8J,GAAoB,EAClBC,EAAgB1K,EAAKE,QAAQmC,KAAI,SAAAjC,GAInC,OAHIA,EAAOC,KAAOM,IACd8J,GAAW,GAGX,kBAAC,GAAD,CAAU9I,IAAKvB,EAAOC,GAAIoH,KAAMrH,EAAO+B,KAAMuE,MAAOtG,EAAOsG,WAG7DiE,EAAyBrB,EAAcnH,KAAamH,EAAcnH,KAApB,IAC9CyI,EAA0BtB,EAAc5C,MAA2B4C,EAAc5C,MAAjCkC,KAEtD,OACI,yBAAKhH,UAAU,cACX,yBAAKA,UAAU,cAEP6I,EACI,kBAACzH,EAAA,EAAD,CAAOpB,UAAU,cAAjB,6DACgE4I,EAAS,YAAc,uBADvF,uBAIA,kBAAC,GAAD,CAAWlB,cAAeA,EACtB3E,aAAc9D,KAAKqJ,eACnBzF,UAAW5D,KAAK4D,YAIxB+F,GAAUC,GACN,kBAAChE,EAAA,EAAD,CAAQvD,QAAQ,YAAYwD,MAAM,UAC9BK,SAAU/G,EAAKE,QAAQ6C,OAAS,EAChCJ,QAAS9B,KAAKsJ,iBAFlB,yBAMZ,yBAAKvI,UAAU,eACX,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAApB,cAGCwH,GACCD,GAAY,kBAAC,GAAD,CAAUhD,KAAMkD,EAAejE,MAAOkE,EAAgBhD,YAAY,KAEpF,kBAAC,GAAD,CAAe+B,aAAc3J,EAAKE,QAAQ6C,OAAQ0G,KAAMQ,EAAiBP,QAAS7I,KAAK+D,wBAxGvG,GAA+BxB,IAAMC,WCNxBwH,GAAb,uKAGG,IAAMC,EAAcjK,KAAKC,MAAMiK,KACxBC,EAAUnK,KAAKC,MAAMkK,QACvBC,EAAc,GACdD,EAEAC,EADEpK,KAAKC,MAAMoK,OAC4B,QAA1BF,EAAQG,cAA0B,QAAWH,EAAU,OAAW,gBAAkBnK,KAAKC,MAAMoK,MAEhGF,EAAU,cAEjBnK,KAAKC,MAAMoK,QACpBD,EAAc,gBAAkBpK,KAAKC,MAAMoK,OAE7C,IAAMlD,EAAU,CAAC,aASjB,OARInH,KAAKC,MAAMoK,QACTrK,KAAKC,MAAMsK,aACbpD,EAAQC,KAAK,qBAEbD,EAAQC,KAAK,oBAKhB,kBAACjF,EAAA,EAAD,CAAOpB,UAAWoG,EAAQzF,KAAK,KAAM+E,MAAO,CAAC+D,YAAaxK,KAAKC,MAAM4F,QAE/D7F,KAAKC,MAAMsH,WAAavH,KAAKC,MAAM8F,WACpC,kBAAC,GAAD,CAAeA,WAAY/F,KAAKC,MAAM8F,WAAYL,MAAM,gBACxD,8BAAOuE,GAERG,GAAe,0BAAMrJ,UAAU,aAAa0F,MAAO,CAACZ,MAAO7F,KAAKC,MAAM4F,QAASuE,QA/BxF,GAA8B7H,IAAMC,WCDvBiI,GAAb,kDAME,WAAYxK,GAAwB,IAAD,8BACjC,cAAMA,IALD6E,MAAwB,CAC7B4F,MAAO,IAMP,EAAK9F,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKqB,WAAa,EAAKA,WAAWrB,KAAhB,gBAJe,EANrC,yDAaeS,GACX,IAAMuF,EAAQC,SAASxF,EAAMC,OAAO/D,KAAKuJ,OAAO,IAC1CX,EAAO9E,EAAMC,OAAOC,MAC1BtF,KAAKiF,UAAS,SAACH,EAAO7E,GACpB,IAAM6K,EAAWhG,EAAM4F,MAEvB,OADAI,EAASH,GAAST,EACX,CACLQ,MAAOI,QApBf,iCAyBa1F,GACT,GAAkB,UAAdA,EAAMtE,IAAiB,CACzB,IAAM4J,EAAQ1K,KAAK8E,MAAM4F,MACHA,EAAMxI,OAASlC,KAAKC,MAAM8K,YAAcL,EAAMM,MAAK,SAAAd,GAAI,OAAKA,GAAwB,IAAhBA,EAAKhI,WAC3ElC,KAAKC,MAAMgL,IAAIP,MA7BzC,+BAqCI,IAJQ,IAAD,EACqB1K,KAAKC,MAAzBgL,EADD,EACCA,IAAKF,EADN,EACMA,WACLL,EAAU1K,KAAK8E,MAAf4F,MACFQ,EAAa,GACVC,EAAE,EAAGA,EAAEJ,EAAYI,IAC1BD,EAAW9D,KACT,kBAAC3B,EAAA,EAAD,CAAWiD,UAAQ,EAAChD,MAAK,eAAUqF,EAAa,EAAKI,EAAE,EAAK,IAC1DC,YAAY,uBACZ9J,KAAI,cAAS6J,GACbrK,IAAG,cAASqK,GACZ7F,MAAOoF,EAAMS,IAAI,GACjBxF,SAAU3F,KAAK4E,aACfqB,WAAYjG,KAAKgG,cAIvB,IAAMqF,EAAgBX,EAAMxI,OAAS6I,GAAcL,EAAMM,MAAK,SAAAd,GAAI,OAAKA,GAAwB,IAAhBA,EAAKhI,UAEpF,OACE,yBAAKnB,UAAU,cACb,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,aAApB,OACO0I,EAAW,EAAX,UAAgBA,EAAhB,yBADP,yBAGCG,EACD,kBAACtF,EAAA,EAAD,CAAQvD,QAAQ,YAAYwD,MAAM,UAChCK,SAAUmF,EACVvJ,QAAS,kBAAMmJ,EAAIP,KAFrB,yBAzDR,GAA+BnI,IAAMC,WCExB8I,GAAb,kDAQI,WAAYrL,GAA8B,IAAD,8BACrC,cAAMA,IAPHwI,cAAwB,CAC3BjJ,GAAIV,aAAaC,QfXC,aeWsB,GACxCuC,KAAMxC,aAAaC,QfXC,eeWwB,GAC5C8G,MAAOkC,GAAejJ,aAAaC,QfXd,iBeiBrB,EAAKwM,SAAW,EAAKA,SAAS5G,KAAd,gBAHqB,EAR7C,8FAcmB+F,GAdnB,wEAeYnL,EAAgBS,KAAKyI,eAClB+C,aAAed,EAEtBnB,GAAiBvJ,KAAKC,MAAMd,KAAKK,GAAID,GAlB7C,sIAqBc,IACEJ,EAASa,KAAKC,MAAdd,KACFsM,EAAoBtM,EAAK6E,gBfxBE,EeyB3BlE,EAAwBhB,aAAaC,QfhCzB,aegCgD,GAC9D6K,GAAoB,EACpB8B,EAAoB,GACpBC,GAA6B,EAC3B9B,EAAgB1K,EAAKE,QAAQmC,KAAI,SAAAjC,GACnC,IAAMqM,IAA0BrM,EAAOiM,cAAgBjM,EAAOiM,aAAatJ,SAAWuJ,EAMtF,OALIlM,EAAOC,KAAOM,IACd8J,GAAW,EACX8B,EAAUnM,EAAOiM,cAAgB,GACjCG,EAAoBC,GAGpB,kBAAC,GAAD,CAAU9K,IAAKvB,EAAOC,GAAIoH,KAAMrH,EAAO+B,KAAMuE,MAAOtG,EAAOsG,MAAOkB,YAAa6E,OAIjFC,EAAcH,EAAQlK,KAAI,SAAA0I,GAAI,OAAI,kBAAC,GAAD,CAAUpJ,IAAKoJ,EAAMA,KAAMA,OAInE,OACI,yBAAKnJ,UAAU,cACX,yBAAKA,UAAU,cAEP4K,IAAsB/B,EAClB,kBAACzH,EAAA,EAAD,CAAOpB,UAAU,cAAjB,kEAIA,kBAAC,GAAD,CAAWkK,IAAKjL,KAAKuL,SAAUR,WAAYU,IAGlDI,EAAY3J,OAAS,GAAK,kBAACE,EAAA,EAAD,CAAYC,QAAQ,aAAawJ,EAAY3J,OAAS,EAAI,iBAAmB,gBACvG2J,GAEL,yBAAK9K,UAAU,eACX,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAApB,cAGCwH,QA/DrB,GAAqCtH,IAAMC,WCP9BsJ,GAAb,uKAEI,IAAM3M,EAAca,KAAKC,MAAMd,KACzB4M,EAAe5M,EAAK4M,aAAavK,KAAI,SAAAwK,GACzC,OAAO,kBAAC,GAAD,CAAUlL,IAAKkL,EAAW9B,KAAMA,KAAM8B,EAAW9B,KAAMG,MAAO2B,EAAW3B,MAAOE,cAAc,OAEjG0B,EAAa9M,EAAK8M,WAAWzK,KAAI,SAAAwK,GACrC,OAAO,kBAAC,GAAD,CAAUlL,IAAKkL,EAAW9B,KAAMA,KAAM8B,EAAW9B,KAAMG,MAAO2B,EAAW3B,MAAOE,cAAc,OAGvG,OACE,yBAAKxJ,UAAU,iBACb,yBAAKA,UAAU,iBACb,wCAAc5B,EAAK4M,aAAa7J,OAAhC,KACC6J,GAEH,yBAAKhL,UAAU,eACb,uCAAa5B,EAAK8M,WAAW/J,OAA7B,KACC+J,QAlBX,GAAiC1J,IAAMC,WCA1B0J,GAAb,uKAEI,IAIIC,EAJEhN,EAAca,KAAKC,MAAMd,KACzBiN,EAAYhN,EAAcD,EAAMA,EAAKiN,YAAc,CAAE9K,KAAM,KAC3D6I,EAAU/K,EAAcD,EAAMA,EAAKkN,iBAAmB,CAAE/K,KAAM,KAGpE,OAAOnC,EAAKmB,OACV,KAAK3B,EAAU2N,YACb,IAAMjN,EAAUF,EAAKE,QAAQgB,QAAO,SAAAoB,GAAC,OAAItC,EAAKkN,gBAAkB5K,EAAEjC,KAAOL,EAAKkN,kBAAgB7K,KAAI,SAAAC,GAAC,OAAIA,EAAEH,QAEzG6K,EADsB9M,EAAQkN,MAAM,EAAGlN,EAAQ6C,OAAO,GAAGR,KAAK,MAAQ,QAAUrC,EAAQA,EAAQ6C,OAAO,GAC3E,6BAC5B,MACF,KAAKvD,EAAU6N,cACbL,EAAYC,EAAU9K,KAAO,4EAC7B,MACF,KAAK3C,EAAU8N,SACbN,EAAYhC,EAAQ7I,KAAO,sCAC3B,MACF,KAAK3C,EAAU+N,SAEXP,EADEhN,EAAKoL,aACKJ,EAAQ7I,KAAO,sBAEf6I,EAAQ7I,KAAO,iBAAmB8K,EAAU9K,KAAO,0CAKrE,OACE,yBAAKP,UAAU,iBACb,uCAAa5B,EAAKwN,MAAM,EAAxB,IAA4BxN,EAAKuL,MAAMxI,OAAvC,eAA2D/C,EAAK4M,aAAa7J,OAA7E,cAAgG/C,EAAK8M,WAAW/J,QAChH,uCAAaiK,QA/BrB,GAA+B5J,IAAMC,WCKxBoK,GAAb,kDACI,WAAY3M,GAA8B,IAAD,8BACrC,cAAMA,IAED8F,WAAa,EAAKA,WAAWpB,KAAhB,gBAHmB,EAD7C,uDAOeiC,IdYR,SAAoBpH,EAAYoH,GAC5B/C,GAAK,GAAD,OAAIrE,EAAJ,SAAe,CAACoH,ScZvB2C,CAAevJ,KAAKC,MAAMd,KAAKK,GAAIoH,KAR3C,+BAWc,IAAD,OACCzH,EAAca,KAAKC,MAAMd,KACzB0N,EAAc3N,EAAqBC,GACnCgL,EAAU/K,EAAcD,EAAMA,EAAKkN,iBAAmB,CAAE/K,KAAM,IAAK9B,GAAI,KACvEsN,EAAYD,GAAeA,EAAYrN,KAAO2K,EAAQ3K,GACtDuN,EAAcD,EAAY,MAAQ3C,EAAQ7I,KAE1C2I,EAAc6C,EAAY,IAAO3N,EAAK8K,aAAe,GACrD+C,EAAe7N,EAAK8N,MAAMzL,KAAI,SAAC0L,EAAgBvC,GACjD,IAAM/D,EAAesG,EAAQtG,KACvBuG,EAAaN,GAAeA,EAAYrN,KAAO0N,EAAQpG,OACvDA,EAAS1H,EAAcD,EAAM+N,EAAQpG,SAAW,CAAExF,KAAM,IAAK9B,GAAI,KACjE4N,EAAaD,EAAa,MAAQrG,EAAOxF,KACzC+L,GAAYzG,GAAQuG,EACpB5F,GAAaX,GAAQuG,EAE3B,OACI,kBAAC,GAAD,CACIrM,IAAKoM,EAAQpG,OAAO6D,EACpB/D,KAAMA,EACNf,MAAOiB,EAAOjB,MACd0B,UAAWA,EACXxB,WAAY,EAAKA,WACjBiB,WAAYqG,EACZvG,OAAQsG,OAKpB,OACI,yBAAKrM,UAAU,cACX,yBAAKA,UAAU,gBACX,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAApB,WAGA,kBAAC,GAAD,CACI6H,KAAMD,EACNE,QAAS4C,EACTlH,MAAOsE,EAAQtE,SAEvB,yBAAK9E,UAAU,iBACX,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAApB,oBAGA,yBAAKtB,UAAU,iBAAiBiM,SAvDpD,GAAqCzK,IAAMC,WCA9B8K,GAAb,kDACI,WAAYrN,GAAgC,IAAD,8BACvC,cAAMA,IAEDiH,gBAAkB,EAAKA,gBAAgBvC,KAArB,gBACvB,EAAK4I,UAAY,EAAKA,UAAU5I,KAAf,gBAJsB,EAD/C,4DAQoB6I,Ifeb,SAAyBhO,EAAYgO,GACjC3J,GAAK,GAAD,OAAIrE,EAAJ,wBAA8B,CAACgO,ceftCjE,CAAoBvJ,KAAKC,MAAMd,KAAKK,GAAIgO,KAThD,kCf2BO,IAAmBhO,IedJQ,KAAKC,MAAMd,KAAKK,Gfe3BqE,GAAK,GAAD,OAAIrE,EAAJ,iBe5Bf,+BAgBc,IAAD,OACCL,EAAca,KAAKC,MAAMd,KACzB0N,EAAc3N,EAAqBC,GACnCgL,EAAU/K,EAAcD,EAAMA,EAAKkN,iBAAmB,CAAE/K,KAAM,IAAK9B,GAAI,KACvEsN,EAAYD,GAAeA,EAAYrN,KAAO2K,EAAQ3K,GACtDuN,EAAcD,EAAY,MAAQ3C,EAAQ7I,KAC1CmM,EAAcZ,GAAeA,EAAYrN,KAAOL,EAAKiN,UAErDnC,EAAc6C,EAAY,IAAO3N,EAAK8K,aAAe,GACrD+C,EAAe7N,EAAK8N,MAAMzL,KAAI,SAAC0L,EAAgBvC,GACjD,IAAMwC,EAAaN,GAAeA,EAAYrN,KAAO0N,EAAQpG,OACvDA,EAAS1H,EAAcD,EAAM+N,EAAQpG,SAAW,CAAExF,KAAM,IAAK9B,GAAI,KACjE4N,EAAaD,EAAa,MAAQrG,EAAOxF,KAE/C,OACI,kBAAC,GAAD,CACIR,IAAKoM,EAAQpG,OAAO6D,EACpB/D,KAAMsG,EAAQtG,KACdf,MAAOiB,EAAOjB,MACdmB,UAAW8F,EACXzF,UAAW6F,EAAQQ,YACnBzG,oBAAqBwG,EACrBvG,gBAAiB,kBAAI,EAAKA,gBAAgByD,IAC1C7D,OAAQsG,OAKpB,OACI,yBAAKrM,UAAU,cACX,yBAAKA,UAAU,gBACX,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAApB,WAGA,kBAAC,GAAD,CACI6H,KAAMD,EACNE,QAAS4C,EACTlH,MAAOsE,EAAQtE,SAEvB,yBAAK9E,UAAU,iBACX,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAApB,oBAGA,yBAAKtB,UAAU,iBAAiBiM,GAC9BS,GACE,kBAACrL,EAAA,EAAD,CAAYC,QAAQ,aAApB,kGAIHoL,GAAe,kBAAC7H,EAAA,EAAD,CAAQvD,QAAQ,YAAYwD,MAAM,UAAU/D,QAAS9B,KAAKuN,WAAYpD,EAAQ7I,KAAO,yBAjEzH,GAAuCiB,IAAMC,WCAhCmL,GAAb,kDACI,WAAY1N,GAA2B,IAAD,8BAClC,cAAMA,IAEDoK,MAAQ,EAAKA,MAAM1F,KAAX,gBAHqB,EAD1C,kDAOU0F,IhBwBH,SAAe7K,EAAY6K,GACvBxG,GAAK,GAAD,OAAIrE,EAAJ,UAAgB,CAAC6K,UgBxBxBd,CAAUvJ,KAAKC,MAAMd,KAAKK,GAAI6K,KARtC,+BAYQ,IAAMlL,EAAca,KAAKC,MAAMd,KACzB0N,EAAc3N,EAAqBC,GACnCgL,EAAU/K,EAAcD,EAAMA,EAAKkN,iBAAmB,CAAE/K,KAAM,IAAK9B,GAAI,KACvEsN,EAAYD,GAAeA,EAAYrN,KAAO2K,EAAQ3K,GACtDuN,EAAcD,EAAY,MAAQ3C,EAAQ7I,KAE1C2I,EAAc6C,EAAY,IAAO3N,EAAK8K,aAAe,GACrD+C,EAAe7N,EAAK8N,MAAMzL,KAAI,SAAC0L,EAAgBvC,GACjD,IAAI/D,EAAesG,EAAQtG,KACrBuG,EAAaN,GAAeA,EAAYrN,KAAO0N,EAAQpG,OACvDA,EAAS1H,EAAcD,EAAM+N,EAAQpG,SAAW,CAAExF,KAAM,IAAK9B,GAAI,KACjE4N,EAAaD,EAAa,MAAQrG,EAAOxF,KAM/C,OAJIwL,GAAaI,EAAQQ,cACrB9G,EAAO,kBAIP,kBAAC,GAAD,CACI9F,IAAKoM,EAAQpG,OAAO6D,EACpB/D,KAAMA,EACNf,MAAOiB,EAAOjB,MACdwB,UAAW6F,EAAQQ,YACnB5G,OAAQsG,OAKpB,OACI,yBAAKrM,UAAU,cACX,yBAAKA,UAAU,gBACX,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAApB,WAGA,kBAAC,GAAD,CACI6H,KAAMD,EACNE,QAAS4C,EACTlH,MAAOsE,EAAQtE,MACf0B,UAAWuF,EACX/G,WAAY/F,KAAKqK,SAEzB,yBAAKtJ,UAAU,iBACX,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAApB,oBAGA,yBAAKtB,UAAU,iBAAiBiM,SAzDpD,GAAkCzK,IAAMC,WCA3BoL,GAAb,kDACI,WAAY3N,GAA2B,IAAD,8BAClC,cAAMA,IAEDgE,aAAe,EAAKA,aAAaU,KAAlB,gBAHc,EAD1C,2DAO2C,IAA1BT,IAAyB,yDAClCqF,GAAiBvJ,KAAKC,MAAMd,KAAKK,GAAI0E,KAR7C,+BAWc,IAyBF2J,EAzBC,OACC1O,EAAca,KAAKC,MAAMd,KACzB0N,EAAc3N,EAAqBC,GACnCgL,EAAU/K,EAAcD,EAAMA,EAAKkN,iBAAoB,CAAE/K,KAAM,IAAK9B,GAAI,KAExEuN,EADYF,GAAeA,EAAYrN,KAAO2K,EAAQ3K,GAC5B,MAAQ2K,EAAQ7I,KAC1CmM,EAAcZ,GAAeA,EAAYrN,KAAOL,EAAKiN,UAErDnC,EAAc9K,EAAK8K,aAAe,GAClC6D,EAAe3O,EAAK2O,cAAgB,GACpCd,EAAe7N,EAAK8N,MAAMzL,KAAI,SAAC0L,EAAgBvC,GACjD,IAAMwC,EAAaN,GAAeA,EAAYrN,KAAO0N,EAAQpG,OACvDA,EAAS1H,EAAcD,EAAM+N,EAAQpG,SAAW,CAAExF,KAAM,IAAK9B,GAAI,KACjE4N,EAAaD,EAAa,MAAQrG,EAAOxF,KAE/C,OACI,kBAAC,GAAD,CACIR,IAAKoM,EAAQpG,OAAO6D,EACpB/D,KAAMsG,EAAQtG,KACdf,MAAOiB,EAAOjB,MACdiB,OAAQsG,OAIhBW,EAAkB,kBAACnI,EAAA,EAAD,CAAQvD,QAAQ,YAAYwD,MAAM,UAAU/D,QAAS,kBAAM,EAAKmC,cAAa,KAA7E,wBAOtB,OALK9E,EAAKoL,eACNwD,EAAkB,kBAACnI,EAAA,EAAD,CAAQvD,QAAQ,YAAYP,QAAS,kBAAM,EAAKmC,cAAa,KAA7D,yBAClB4J,EAAkB,kBAACjI,EAAA,EAAD,CAAQvD,QAAQ,YAAYwD,MAAM,UAAU/D,QAAS,kBAAM,EAAKmC,cAAa,KAA7E,kBAIlB,yBAAKlD,UAAU,cACX,yBAAKA,UAAU,gBACX,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAApB,WAGA,kBAAC,GAAD,CACI6H,KAAMD,EACNE,QAAS4C,EACTlH,MAAOsE,EAAQtE,MACfwE,MAAOyD,EACPvD,aAAcpL,EAAKoL,gBACrBkD,GAAetO,EAAKoL,eAAiBwD,EACtCN,GAAeI,GAEpB,yBAAK9M,UAAU,iBACX,kBAACqB,EAAA,EAAD,CAAYC,QAAQ,MAApB,oBAGA,yBAAKtB,UAAU,iBAAiBiM,SA7DpD,GAAkCzK,IAAMC,WCW3BwL,GAAb,4MACWlJ,MAA0B,GADrC,EAEYL,eAFZ,IAGYC,YAAsB,EAHlC,kEAMQ1E,KAAK0E,YAAa,EAElB1E,KAAK6C,WAEL7C,KAAKyE,UAAYnG,OAAOyG,YAAY/E,KAAK6C,SAAS8B,KAAK3E,MApBtC,OAUzB,6CAcQA,KAAK0E,YAAa,EAClBM,cAAchF,KAAKyE,aAf3B,0JAmBcjF,EAAKQ,KAAKC,MAAMiF,OAnB9B,SAoB2BrC,EAASrD,GApBpC,UAoBcL,EApBd,OAqBaa,KAAK0E,WArBlB,oDAsBavF,EAtBb,iDAuBQM,EAAiBN,EAAKmC,MACtBtB,KAAKiF,SAAS,CACVgJ,YAAa9O,IAzBzB,sIA6Bc,IAMF+O,EACAC,EANGzE,EAAY1J,KAAKC,MAAjByJ,SACAuE,EAAejO,KAAK8E,MAApBmJ,YAEP,IAAKA,EAAa,OAAO,KAKzB,OAAOA,EAAY3N,OACf,KAAK3B,EAAU4B,KACX2N,EAAc,kBAAC,GAAD,CAAW/O,KAAM8O,EAAavE,SAAUA,IACtD,MACJ,KAAK/K,EAAUyP,YACXF,EAAc,kBAAC,GAAD,CAAiB/O,KAAM8O,IACrC,MACJ,KAAKtP,EAAU2N,YACX4B,EAAc,kBAAC,GAAD,CAAiB/O,KAAM8O,IACrCE,EAAc,kBAAC,GAAD,CAAWhP,KAAM8O,IAC/B,MACJ,KAAKtP,EAAU6N,cACX0B,EAAc,kBAAC,GAAD,CAAmB/O,KAAM8O,IACvCE,EAAc,kBAAC,GAAD,CAAWhP,KAAM8O,IAC/B,MACJ,KAAKtP,EAAU8N,SACXyB,EAAc,kBAAC,GAAD,CAAc/O,KAAM8O,IAClCE,EAAc,kBAAC,GAAD,CAAWhP,KAAM8O,IAC/B,MACJ,KAAKtP,EAAU+N,SACXwB,EAAc,kBAAC,GAAD,CAAc/O,KAAM8O,IAClCE,EAAc,kBAAC,GAAD,CAAWhP,KAAM8O,IAC/B,MACJ,KAAKtP,EAAU8B,IACXyN,EAAc,kBAAC,GAAD,CAAa/O,KAAM8O,IAIzC,OACI,yBAAKlN,UAAU,gBACVoN,EACAD,OArEjB,GAAiC3L,IAAMC,WCV1B6L,GAAb,uKACY,IAAD,EACkDrO,KAAKC,MAAtD2I,EADD,EACCA,KAAMC,EADP,EACOA,QAASyF,EADhB,EACgBA,cAAeC,EAD/B,EAC+BA,eAUtC,OACE,kBAACvF,GAAA,EAAD,CAAQH,QATU,WAClBA,EAAQyF,IAQsB1F,KAAMA,GAClC,kBAACM,GAAA,EAAD,mBACA,kBAAC5G,EAAA,EAAD,KACGiM,EAAe/M,KAAI,SAAC8D,GAAD,OAClB,kBAACzE,EAAA,EAAD,CAAUM,QAAM,EAACW,QAAS,kBATN,SAACwD,GAC3BuD,EAAQvD,GAQ8ByD,CAAoBzD,IAAQxE,IAAKwE,EAAO8C,SAAUkG,IAAkBhJ,GAClG,kBAAClE,EAAA,EAAD,CAAcC,QAASiE,cAlBrC,GAAgC/C,IAAMC,WC2FvBgM,GApFI,WAAQ,IAAD,EACUC,mBAAS3P,aAAaC,QxBb7B,gBwBYH,mBACjB2P,EADiB,KACNC,EADM,OAEUF,mBAAS3P,aAAaC,QxBb7B,cwBauDX,EAAUwQ,MAFpE,mBAEjBC,EAFiB,KAENC,EAFM,OAGoBvM,IAAMkM,UAAS,GAHnC,mBAGjBM,EAHiB,KAGDC,EAHC,KAKlBjP,EAA+BjB,aAAaC,QxBlBxB,cwBmBtBkQ,EAAkBC,YAAc,gCAChCL,IAAczQ,EAAU+Q,OAC1BF,GAAkB,EACTJ,IAAczQ,EAAUgR,OACjCH,GAAkB,GAGpB,IAAII,EAAeX,EACdW,GAAiBA,EAAaC,WAAW,MAAgC,IAAxBD,EAAanN,SACjEmN,ExBrBiC,WwBwBnC,IAMME,EAAQhN,IAAMiN,SAClB,kBACEC,YAAe,CACbC,QAAS,CACPrO,QAAS,CACPsO,KAAMN,GxBnCmB,WwBqC3B9N,UAAW,CACToO,KxBrC2B,WwBuC7BC,KAAMX,EAAkB,OAAS,aAGvC,CAACA,EAAiBI,IAGdQ,EAAa,CAAC,OAGpB,OAFIZ,GAAiBY,EAAWzI,KAAK,YAGnC,kBAAC,IAAD,KACE,kBAAC0I,EAAA,EAAD,CAAeP,MAAOA,GACpB,kBAACpN,EAAA,EAAD,CAAO4N,QAAM,EAACC,UAAW,EAAGjP,UAAW8O,EAAWnO,KAAK,MACrD,kBAACuO,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMnP,GAAG,IAAID,UAAU,cACrB,kBAACc,EAAA,EAAD,CAAYuO,KAAK,QAAQvK,MAAM,UAAUwK,aAAW,QAClD,kBAACC,EAAA,EAAD,QAGJ,kBAAClO,EAAA,EAAD,CAAYC,QAAQ,KAAKtB,UAAU,YAAnC,iBAIEhB,EACA,kBAAC6F,EAAA,EAAD,CAAQ9D,QAAS,kBAAIkN,GAAkB,IAAOjO,UAAU,iBAAiB8E,MAAM,UAAU0K,UAAW,kBAACC,EAAA,EAAD,OACjGzQ,GAEH,kBAAC8B,EAAA,EAAD,CAAYC,QAAS,kBAAIkN,GAAkB,IAAOoB,KAAK,MAAMvK,MAAM,WACjE,kBAAC2K,EAAA,EAAD,OAGJ,kBAAC,GAAD,CACE5H,KAAMmG,EACNlG,QAlDS,SAACvD,GACtBwJ,EAAaxJ,GACbxG,aAAaG,QxB/BY,YwB+BWqG,GACpC0J,GAAkB,IAgDNV,cAAeO,EACfN,eAAgB,CAACnQ,EAAUwQ,KAAMxQ,EAAU+Q,OAAQ/Q,EAAUgR,UAInE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqB,KAAK,WAAWxP,UAAW,SAAChB,GAAD,OAAqC,kBAAC,GAAD,CAAaiF,OAAQjF,EAAMyQ,MAAMC,OAAOzL,OAAQwE,SAAUiF,OACjI,kBAAC,IAAD,CAAOiC,SAAU,kBAAC,GAAD,aCrFTC,QACW,cAA7BvS,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASkS,MACvB,2DCZNI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFrR,SAASsR,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5N,MAAK,SAAA6N,GACJA,EAAaC,gBAEdC,OAAM,SAAA7N,GACLC,QAAQD,MAAMA,EAAM8N,a","file":"static/js/main.fcf923fc.chunk.js","sourcesContent":["// api url\nconst isProd = window.location.hostname === 'justone.okj.name';\nconst apiPort = isProd ? '' : ':9000';\nexport const API_URL = window.location.protocol + '//' + window.location.hostname + apiPort + '/api';\nexport const GAME_URL = API_URL + '/games';\n\n// localStorage keys\nexport const SETTING_ID = 'playerId';\nexport const SETTING_NAME = 'playerName';\nexport const SETTING_COLOR = 'playerColor';\nexport const SETTING_THEME = 'darkTheme';\n\n// app content and theming\nexport const APP_TITLE = 'Nur ein Wort!';\nexport const DEFAULT_NUM_WORDS: number = 2; // Two words per player\nexport const DEFAULT_PRIMARY_COLOR = '#43a047';\nexport const DEFAULT_SECONDARY_COLOR = '#d32f2f'; // also error dark\nexport enum ThemeMode {\n  AUTO = 'automatisch',\n  BRIGHT = 'hell',\n  DARK = 'dunkel'\n}","// custom module declarations\n\n// TODO \nexport interface IUser {\n    id: string;\n    name: string;\n    color?: string;\n    enteredWords?: string[];\n}\n\nexport interface IHint {\n    hint: string;\n    author: string;\n    isDuplicate?: boolean\n}\n\nexport enum GamePhase {\n    Init,\n    Preparation,\n    HintWriting,\n    HintComparing,\n    Guessing,\n    Solution,\n    End\n}\n\nexport interface WordResult {\n    word: string;\n    guess: string;\n}\n\nexport interface IGame {\n    id: string;\n    name: string;\n    words: string[];\n    players: IUser[];\n    host: string; // hostId\n    wordsPerPlayer: number;\n\n    round: number;\n    phase: GamePhase;\n    currentWord?: string;\n    currentGuesser?: string;\n    currentGuess?: string;\n    guessedRight?: boolean;\n    roundHost?: string;\n    hints: IHint[];\n    correctWords: WordResult[];\n    wrongWords: WordResult[];\n}","import { APP_TITLE, SETTING_ID } from './constants';\nimport { IGame, IUser } from '../custom.d';\nimport shortid from 'shortid'; \n\nexport function getCurrentUserId() {\n\tlet userId = localStorage.getItem(SETTING_ID) || '';\n\tif (!userId) {\n\t\tuserId = generateId();\n\t\tlocalStorage.setItem(SETTING_ID, userId);\n\t}\n\treturn userId;\n}\n\nexport function getCurrentUserInGame(game: IGame): IUser|undefined {\n    return getUserInGame(game, getCurrentUserId());\n}\n\nexport function getUserInGame(game: IGame, userId?: string): IUser|undefined {\n    return game.players.find((player: IUser) => player.id === userId);\n}\n\nexport function generateId() {\n\treturn shortid();\n}\n\nexport function setDocumentTitle(gameName?: string) {\n    if (gameName) {\n        document.title = `${APP_TITLE} - ${gameName}`;\n    } else {\n        document.title = APP_TITLE;\n    }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  List, \n  ListItem, \n  ListItemText, \n  ListItemSecondaryAction, \n  IconButton,\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { IGame, GamePhase } from '../custom.d';\n\nimport { SETTING_ID, SETTING_NAME } from '../shared/constants';\nimport { getCurrentUserInGame } from '../shared/functions';\n\ntype GameListProps = {\n  allGames: IGame[],\n  deleteGame: (gameId:string)=>void,\n};\n\ntype GameListState = {\n}\n\nexport class GameList extends React.Component<GameListProps,GameListState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n  public currentUserName: string = localStorage.getItem(SETTING_NAME) || '';\n\n  render() {\n    const {allGames,deleteGame} = this.props;\n    const newGames = allGames.filter(game => game.phase === GamePhase.Init && !getCurrentUserInGame(game));\n    const onGoingGames = allGames.filter(game => \n      ![GamePhase.Init,GamePhase.End].includes(game.phase) || (game.phase === GamePhase.Init && !!getCurrentUserInGame(game))\n    );\n    const doneGames = allGames.filter(game => game.phase === GamePhase.End);\n\n    const createListItem = (game: IGame) => {\n      return (\n        <ListItem key={game.id} className=\"GameListItem\"\n          {...{ to: `/${game.id}` }}\n          component={Link}\n          button\n        >\n          <ListItemText id={game.id} primary={`${game.name || game.id}`} secondary={`Spieler: ${game.players.map(p => p.name).join(', ') || '-'}`} />\n          {\n            this.currentUserId === game.host && (\n              <ListItemSecondaryAction>\n                <IconButton onClick={() => deleteGame(game.id)}>\n                  <DeleteIcon/>\n                </IconButton>\n              </ListItemSecondaryAction>\n            )\n          }\n        </ListItem>\n      );\n    }\n\n    const newGamesList = newGames.map(createListItem);\n    const onGoingGamesList = onGoingGames.map(createListItem);\n    const doneGamesList = doneGames.map(createListItem);\n\n    return (\n      <div className=\"GameList\">\n        {\n          onGoingGamesList.length > 0 && (\n            <Paper>\n              <Typography variant=\"h5\">Meine laufenden Spiele</Typography>\n              <List>\n                {onGoingGamesList}\n              </List> \n            </Paper>\n          )\n        }\n        {\n          newGamesList.length > 0 && (\n            <Paper>\n              <Typography variant=\"h5\">Neue Spiele</Typography>\n              <List>\n                {newGamesList}\n              </List> \n            </Paper>\n          )\n        }\n        {\n          doneGamesList.length > 0 && (\n            <Paper>\n              <Typography variant=\"h5\">Meine beendeten Spiele</Typography>\n              <List>\n                {doneGamesList}\n              </List> \n            </Paper>\n          )\n        }\n      </div>\n    );\n  }\n}\n\n/*\nTODO Share Button\n\nimport ShareIcon from '@material-ui/icons/Share';\nimport {AlertBar} from '../common/AlertBar';\n\n  public state: GameListState = {\n    showAlert: false,\n    alertText: ''\n  }\n    const {showAlert,alertText} = this.state;\n\n    const shareGame = (gameId: string) => {\n      const gameUrl = `${window.location.protocol}//${window.location.host}/${gameId}`;\n      navigator.clipboard.writeText(gameUrl);\n      this.setState({\n        showAlert: true,\n        alertText: `Link zum Spiel wurde in die Zwischenablage kopiert`\n      });\n    }\n\n    const hideAlert = ()=> {\n      this.setState({\n        showAlert: false,\n        alertText: ``\n      });\n    }\n\n          {\n            game.phase === GamePhase.Init && (\n              <ListItemSecondaryAction>\n                <IconButton onClick={() => shareGame(game.id)}>\n                  <ShareIcon/>\n                </IconButton>\n              </ListItemSecondaryAction>\n            )\n          }\n\n        <AlertBar show={showAlert} alertText={alertText} onClose={hideAlert}/>\n*/","import { GAME_URL } from './constants';\nimport { getCurrentUserId } from './functions';\nimport { IGame, IUser } from '../custom.d';\n\nexport async function loadGames(): Promise<IGame[]> {\n    return (await _get('all')).games || [];\n}\n\nexport async function loadGame(id: string): Promise<IGame> {\n    return (await _get(id)).game;\n}\n\nexport async function createGame(game: IGame): Promise<{id:string,playerId:string}> {\n    return _post('add', {game});\n}\n\nexport function deleteGame(id: string) {\n    return _delete(`delete/${id}`);\n}\n\nexport async function addPlayer(id: string, player: IUser): Promise<IUser> {\n    return (await _put(`${id}/addPlayer`, {player})).player;\n}\n\nexport async function updatePlayer(id: string, player: IUser): Promise<IUser> {\n    return (await _put(`${id}/updatePlayer`, {player})).player;\n}\n\nexport function startPreparation(id: string, wordsPerPlayer: number) {\n    return _put(`${id}/startPreparation`, {wordsPerPlayer});\n}\n\nexport function submitHint(id: string, hint: string) {\n    return _put(`${id}/hint`, {hint});\n}\n\nexport function toggleDuplicate(id: string, hintIndex: number) {\n    return _put(`${id}/toggleDuplicateHint`, {hintIndex});\n}\n\nexport function showHints(id: string) {\n    return _put(`${id}/showHints`);\n}\n\nexport function guess(id: string, guess: string) {\n    return _put(`${id}/guess`, {guess});\n}\n\nexport function resolveRound(id: string, correct: boolean) {\n    return _put(`${id}/resolve`, {correct});\n}\n\n\nfunction _get(endpoint: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n        fetch(`${GAME_URL}/${endpoint}`, {\n            method: 'GET',\n            headers: {\n                ..._getAuthHeader()\n            }\n        })\n            .then(res => res.json())\n            .then((data) => {\n                resolve(data);\n            }, (error) => {\n                console.error(error);\n                reject(error);\n            });\n    });\n}\n\nfunction _post(endpoint: string, data: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n        fetch(`${GAME_URL}/${endpoint}`, {\n            method: 'POST',\n            headers: {\n                ..._getAuthHeader(),\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then((data) => {\n                resolve(data);\n            }, (error) => {\n                console.error(error);\n                reject(error);\n            })\n    });\n}\n\nfunction _put(endpoint: string, data?: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n        fetch(`${GAME_URL}/${endpoint}`, {\n            method: 'PUT',\n            headers: {\n                ..._getAuthHeader(),\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => {\n                res.json().then(data => {\n                    resolve(data);\n                }, error => {\n                    resolve();\n                });\n            }, (error) => {\n                console.error(error);\n                reject(error);\n            })\n    });\n}\n\nfunction _delete(endpoint: string) {\n    return new Promise((resolve, reject) => {\n        fetch(`${GAME_URL}/${endpoint}`, { \n            method: 'DELETE',\n            headers: {\n                ..._getAuthHeader()\n            }\n        })\n            .then((data) => {\n                resolve();\n            }, (error) => {\n                console.error(error);\n                reject(error);\n            })\n    });   \n}\n\nfunction _getAuthHeader() {\n    return {\n        'Authorization': getCurrentUserId()\n    }\n}","import React from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport { IGame } from '../custom.d';\nimport { GameList } from './GameList';\n\nimport { SETTING_ID, SETTING_NAME, DEFAULT_NUM_WORDS } from '../shared/constants';\nimport { setDocumentTitle } from '../shared/functions';\nimport { loadGames, createGame, deleteGame } from '../shared/apiFunctions';\n\nconst POLLING_INTERVAL = 3000;\n\ntype JustOneHomeProps = {};\ntype JustOneHomeState = {\n    newGameName: string,\n    allGames: IGame[]\n};\n\nexport class JustOneHome extends React.Component<JustOneHomeProps,JustOneHomeState> {\n    public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n    public currentUserName: string = localStorage.getItem(SETTING_NAME) || '';\n\n    private _interval: number|undefined;\n    private _isMounted: boolean = false;\n\n    constructor(props: JustOneHomeProps) {\n        super(props);\n\n        this.createGame = this.createGame.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.deleteGame = this.deleteGame.bind(this);\n\n        let newGameName = this.currentUserName ? `${this.currentUserName}s Spiel` : 'Neues Spiel';\n\n        this.state = { allGames: [], newGameName: newGameName };\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        setDocumentTitle();\n\n        this.loadGames();\n        this._interval = window.setInterval(this.loadGames.bind(this), POLLING_INTERVAL);\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        clearInterval(this._interval);\n    }\n\n    async loadGames() {\n        let games = await loadGames();\n        if (!this._isMounted) return;\n        this.setState({\n            allGames: games\n        });\n    }\n\n    deleteGame(gameId: string) {\n        deleteGame(gameId);\n        this.setState((state) => {\n            return {\n                allGames: state.allGames.filter(g => g.id !== gameId)\n            }\n        });\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({newGameName: event.target.value});\n    }\n\n    async createGame() {\n        const game: IGame = emptyGame();\n        game.name = this.state.newGameName;\n\n        const {id, playerId} = await createGame(game);\n\n        if(this.currentUserId !== playerId) {\n            localStorage.setItem(SETTING_ID, playerId);\n        }\n        window.location.href = '/' + id;\n    }\n\n    render() {\n        const {newGameName, allGames} = this.state;\n\n        return (\n            <div className=\"JustOneHome\">\n                <TextField label={'Spielname'} value={newGameName} onChange={this.handleChange} />\n                <Button variant=\"contained\" color=\"primary\" onClick={this.createGame}>Neues Spiel</Button>\n                <GameList allGames={allGames} deleteGame={this.deleteGame} />\n            </div>\n        );\n    }\n}\n\nfunction emptyGame(): IGame {\n    return {\"id\":\"\", \"name\": \"\", \"words\":[],\"players\":[],\"host\":\"\",\"wordsPerPlayer\":DEFAULT_NUM_WORDS,\"round\":0,\"phase\":0,\"hints\":[],\"correctWords\":[],\"wrongWords\":[]};\n}","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport { Send as SendIcon } from '@material-ui/icons';\nimport TextField from '@material-ui/core/TextField';\n\ntype WordHintInputProps = {\n  submitHint: (hint: string)=>void\n  label?: string\n};\ntype WordHintInputState = {\n  value: string, \n};\n\nexport class WordHintInput extends React.Component<WordHintInputProps,WordHintInputState> {\n\n  constructor(props: WordHintInputProps) {\n  \tsuper(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.submitHint = this.submitHint.bind(this);\n    this.keyPressed = this.keyPressed.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({value: event.target.value});\n  }\n\n  submitHint() {\n  \tthis.props.submitHint(this.state.value)\n  \tthis.setState({value: ''});\n  }\n\n  keyPressed(event: React.KeyboardEvent<HTMLInputElement>) {\n  \tif (event.key === \"Enter\") {\n  \t  this.submitHint()\n  \t}\n  }\n\n  render() {\n    return (\n\t    <div className=\"Word-hint-input\">\n\t    \t<TextField label={this.props.label || 'Hinweis eingeben'}\n\t    \t\tvalue={this.state.value} \n\t    \t\tonChange={this.handleChange} \n\t    \t\tonKeyPress={this.keyPressed} />\n  \t\t\t<IconButton color=\"primary\" \n  \t\t\t\tdisabled={!this.state.value} \n  \t\t\t\tonClick={this.submitHint}>\n          <SendIcon></SendIcon>\n        </IconButton>\n\t    </div>\n    );\n  }\n\n}","import React from 'react';\n\ntype PencilAnimationProps = {\n\tcolor?: string,\n}\n\nexport class PencilAnimation extends React.Component<PencilAnimationProps> {\n\n  render() {\n    const styleObj1 = {\n    \tbackgroundColor: this.props.color,\n    };\n    const styleObj2 = {\n    \tborderTopColor: this.props.color,\n    };\n\n    return (\n\t  <div className=\"pencil\">\n        <div className=\"body\" style={styleObj1}></div>\n        <div className=\"nib\" style={styleObj2}></div>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { WordHintInput } from './WordHintInput';\nimport { PencilAnimation } from '../../common/PencilAnimation';\nimport { Checkbox, Paper } from '@material-ui/core';\nimport { Mood as MoodIcon, MoodBad as MoodBadIcon } from '@material-ui/icons';\n\ntype WordHintProps = {\n\thint?: string,\n\tcolor?: string,\n\tduplicate?: boolean,\n  author?: string,\n  showPencil?: boolean,\n  showCheck?: boolean,\n  showInput?: boolean,\n  submitHint?: (hint:string)=>void,\n  showDuplicateToggle?: boolean,\n  toggleDuplicate?: ()=>void\n}\n\nexport class WordHint extends React.Component<WordHintProps> {\n\n  render() {\n  \tconst currentHint = this.props.hint;\n    const color = this.props.color;\n    const styleObj = {\n    \t'color': color,\n      'borderColor': color\n    };\n    const author = this.props.author;\n    const showPencil = this.props.showPencil || !this.props.hint;\n    const showCheck = this.props.showCheck;\n    const showDuplicateToggle = this.props.showDuplicateToggle;\n    const toggleDuplicate = this.props.toggleDuplicate;\n\n    const classes = ['Word-hint'];\n    if (showPencil) classes.push('Word-hint-writing');\n    if (this.props.duplicate) classes.push('Word-hint-duplicate');\n    if (currentHint && currentHint.length > 20) classes.push('Word-hint-huge');\n    else if (currentHint && currentHint.length > 14) classes.push('Word-hint-long');\n    const extraClasses = classes.join(' ');\n\n    if (this.props.showInput && this.props.submitHint) {\n      return (\n        <Paper className={extraClasses} style={styleObj}>\n          <WordHintInput submitHint={this.props.submitHint}/>\n          {author && <span className=\"Author-tag\">{author}</span>}\n        </Paper>\n      );\n    } else {\n      return (\n        <Paper className={extraClasses} style={styleObj}>\n          {!showCheck && currentHint}\n          {showCheck && <span className=\"Done-icon\">✓</span>}\n          {showPencil && <PencilAnimation color={color}></PencilAnimation>}\n          {showDuplicateToggle && toggleDuplicate && (\n            <Checkbox className=\"Duplicate-toggle\" \n              icon={<MoodIcon />} checkedIcon={<MoodBadIcon />} \n              checked={this.props.duplicate}\n              onChange={()=>toggleDuplicate()}/>\n          )}\n          {author && <span className=\"Author-tag\">{author}</span>}\n        </Paper>\n      );\n    }\n\n    \n  }\n\n}","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\n\nexport const allColors: string[] = [\n  '#e51235',\n  '#d81b60',\n  '#8e24aa',\n  '#6e45c1',\n  '#4959cc',\n  '#1e88e5',\n  '#039be5',\n  '#00acc1',\n  '#00897b',\n  '#43a047',\n  '#7cb342',\n  '#c0ca33',\n  '#ffc215',\n  '#ffab00',\n  '#ff6d00',\n  '#f4511e'\n];\n\nexport function getRandomColor(color?: string|null): string {\n  if (!color || !allColors.includes(color)) {\n    return allColors[Math.floor(Math.random()*allColors.length)];\n  } else {\n    return color;\n  }\n}\n\ntype ColorPickerProps = {\n\tselected?: string;\n  select: (color: string)=>void;\n}\n\nexport class ColorPicker extends React.Component<ColorPickerProps> {\n\n  render() {\n  \tconst { selected, select } = this.props;\n\n    const colorButtons = allColors.map((color: string) => {\n      const classes = ['Color-button'];\n      if (selected === color) classes.push('Color-selected');\n      return (\n        <IconButton className={classes.join(' ')} onClick={() => select(color)} style={{ backgroundColor: color }} key={color}>\n          {selected === color && <CheckIcon/>}\n        </IconButton>\n      )\n    });\n\n    return (\n      <div className=\"Color-picker\">\n        { colorButtons }\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { IUser } from '../custom.d';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { ColorPicker } from '../common/ColorPicker';\n\ntype NewPlayerProps = {\n  addPlayer: (player: IUser) => void,\n  updatePlayer: (player: IUser) => void,\n  currentPlayer: IUser\n}\n\nexport class NewPlayer extends React.Component<NewPlayerProps> {\n\n  constructor(props: NewPlayerProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.setColor = this.setColor.bind(this);\n    this.addPlayer = this.addPlayer.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.name === 'name') {\n      this.props.currentPlayer.name = event.target.value;\n\n      this.props.updatePlayer(this.props.currentPlayer);   \n\n    }\n  }\n\n  setColor(color: string) {\n    this.props.currentPlayer.color = color;\n    this.props.updatePlayer(this.props.currentPlayer);  \n  }\n\n  addPlayer() {\n    this.props.addPlayer(this.props.currentPlayer);\n  }\n\n  render() {\n    const { currentPlayer } = this.props;\n\n    return (\n      <div className=\"New-player\">\n        <TextField required label=\"Spielername\" \n          name='name'\n          value={currentPlayer.name} \n          onChange={this.handleChange}/>\n        <ColorPicker select={this.setColor} selected={currentPlayer.color}/>\n        <Button variant=\"contained\" color=\"primary\" \n          disabled={!currentPlayer.name} \n          onClick={this.addPlayer}>Mitspielen</Button>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\n\ntype RoundSelectorProps = {\n  onClose: (value?: number)=>void,\n  numOfPlayers: number,\n  open: boolean\n};\n\nexport class RoundSelector extends React.Component<RoundSelectorProps> {\n  render() {\n    const { open, onClose, numOfPlayers } = this.props;\n\n    const handleClose = () => {\n      onClose();\n    };\n\n    const handleListItemClick = (value: number) => {\n      onClose(value);\n    };\n\n    return (\n      <Dialog onClose={handleClose} open={open} disableBackdropClick>\n        <DialogTitle>Lege die Rundenanzahl fest</DialogTitle>\n        <List>\n          <ListItem button onClick={() => handleListItemClick(1)}>\n            <ListItemText \n              primary={numOfPlayers + ' Runden'}\n              secondary=\"1 Begriff pro Spieler\"/>\n          </ListItem>\n          <ListItem button onClick={() => handleListItemClick(2)}>\n            <ListItemText \n              primary={2*numOfPlayers + ' Runden'}\n              secondary=\"2 Begriffe pro Spieler\"/>\n          </ListItem>   \n          <ListItem button onClick={() => handleListItemClick(3)}>\n            <ListItemText \n              primary={3*numOfPlayers + ' Runden'}\n              secondary=\"3 Begriffe pro Spieler\"/>\n          </ListItem>\n        </List>\n      </Dialog>\n    );\n  }\n}","import React from 'react';\nimport { IGame, IUser } from '../custom.d';\nimport { Button, Paper, Typography } from '@material-ui/core';\nimport { WordHint } from './components/WordHint';\nimport { NewPlayer } from '../common/NewPlayer';\nimport { RoundSelector } from './components/RoundSelector';\nimport { getRandomColor } from '../common/ColorPicker';\n\nimport { SETTING_ID, SETTING_NAME, SETTING_COLOR, DEFAULT_NUM_WORDS } from '../shared/constants';\nimport * as api from '../shared/apiFunctions';\n\ntype GameLobbyProps = {\n    game: IGame,\n    setTheme?: (color: string)=>void\n}\ntype GameLobbyState = {\n    currentPlayer: IUser,\n    roundDialogOpen: boolean\n}\n\nexport class GameLobby extends React.Component<GameLobbyProps,GameLobbyState> {\n\n    public state: GameLobbyState = { \n        currentPlayer: {\n            id: localStorage.getItem(SETTING_ID) || '',\n            name: localStorage.getItem(SETTING_NAME) || '',\n            color: getRandomColor(localStorage.getItem(SETTING_COLOR))\n        }, \n        roundDialogOpen: false\n    };\n\n    constructor(props: GameLobbyProps) {\n        super(props);\n\n        this.addPlayer = this.addPlayer.bind(this);\n        this.setPlayerProps = this.setPlayerProps.bind(this);\n        this.selectNumRounds = this.selectNumRounds.bind(this);\n        this.startPreparation = this.startPreparation.bind(this);\n    }\n\n    setPlayerProps(player: IUser) {\n        this.setState({\n            currentPlayer: player\n        });\n    }\n\n    async addPlayer(player: IUser) {\n        const resultPlayer = await api.addPlayer(this.props.game.id, player);\n        if (!resultPlayer) return;\n        this.setLocalPlayer(resultPlayer);\n    }\n\n    setLocalPlayer(player: IUser) {\n        localStorage.setItem(SETTING_ID, player.id);\n        localStorage.setItem(SETTING_NAME, player.name);\n        if (player.color) localStorage.setItem('playerColor', player.color);\n        if (this.props.setTheme && player.color) {\n            this.props.setTheme(player.color);\n        }\n        this.setState({\n            currentPlayer: player\n        });\n    }\n\n    selectNumRounds() {\n        this.setState({\n            roundDialogOpen: true\n        });\n    }\n\n    startPreparation(wordsPerPlayer: number = DEFAULT_NUM_WORDS) {\n        this.setState({\n            roundDialogOpen: false\n        });\n\n        api.startPreparation(this.props.game.id, wordsPerPlayer);\n    }\n\n    render() {\n        const { game } = this.props;\n        const { currentPlayer, roundDialogOpen } = this.state;\n        const currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n        const isHost: boolean = !!currentUserId && game.host === currentUserId;\n        let isInGame: boolean = false;\n        const listOfPlayers = game.players.map(player => {\n            if (player.id === currentUserId) {\n                isInGame = true;\n            } \n            return (\n                <WordHint key={player.id} hint={player.name} color={player.color}></WordHint>\n            )\n        });\n        const newPlayerName: string = !currentPlayer.name ? '?' : currentPlayer.name;\n        const newPlayerColor: string = !currentPlayer.color ? getRandomColor() : currentPlayer.color;\n\n        return (\n            <div className=\"Game-lobby\">\n                <div className=\"New-player\">\n                    { \n                        isInGame ? (\n                            <Paper className=\"StatusInfo\">\n                                Warten auf Mitspieler ... Sobald alle Mitspieler da sind, { isHost ? 'kannst du' : 'kann der Spielleiter'} das Spiel starten. \n                            </Paper>\n                        ) : (\n                            <NewPlayer currentPlayer={currentPlayer}\n                                updatePlayer={this.setPlayerProps}\n                                addPlayer={this.addPlayer}/>\n                        )\n                    }\n                    {\n                        isHost && isInGame && (\n                            <Button variant=\"contained\" color=\"primary\" \n                                disabled={game.players.length < 3}\n                                onClick={this.selectNumRounds}>Alle Spieler sind da</Button>\n                        )\n                    }\n                </div>\n                <div className=\"Player-list\">\n                    <Typography variant=\"h5\">\n                        Mitspieler\n                    </Typography>\n                    {listOfPlayers}\n                    {!isInGame && <WordHint hint={newPlayerName} color={newPlayerColor} showPencil={true}></WordHint>}\n                </div>\n                <RoundSelector numOfPlayers={game.players.length} open={roundDialogOpen} onClose={this.startPreparation}/>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Paper } from '@material-ui/core';\nimport { WordHintInput } from './WordHintInput';\n\ntype WordCardProps = {\n\tword: string;\n\tguesser?: string;\n\tcolor?: string;\n  guess?: string;\n  guessedRight?: boolean;\n  showInput?: boolean;\n  submitHint?: (hint:string)=>void\n}\n\nexport class WordCard extends React.Component<WordCardProps> {\n\n  render() {\n  \tconst currentWord = this.props.word;\n    const guesser = this.props.guesser;\n    let guesserText = '';\n    if (guesser) {\n      if (this.props.guess) {\n        guesserText = (guesser.toLowerCase() === 'ich' ? 'Mein ' : (guesser + '\\'s ')) + 'Rateversuch: ' + this.props.guess;\n      } else {\n        guesserText = guesser + ' muss raten';\n      }\n    } else if (this.props.guess) {\n      guesserText = 'Rateversuch: ' + this.props.guess;\n    }\n    const classes = ['Word-card'];\n    if (this.props.guess) {\n      if (this.props.guessedRight) {\n        classes.push('Word-card-correct');\n      } else {\n        classes.push('Word-card-wrong');\n      }\n    }\n\n    return (\n\t    <Paper className={classes.join(' ')} style={{borderColor: this.props.color}}>\n\t    \t{\n          (this.props.showInput && this.props.submitHint) ? \n          <WordHintInput submitHint={this.props.submitHint} label=\"Rateversuch\"/> : \n          <span>{currentWord}</span>\n        }\n        {guesserText && <span className=\"Author-tag\" style={{color: this.props.color}}>{guesserText}</span>}\n\t    </Paper>\n    );\n  }\n\n}","import React from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\ntype WordAdderProps = {\n  add: (words: string[])=>void,\n  numOfWords: number\n}\n\ntype WordAdderState = {\n  words: string[]\n}\n\nexport class WordAdder extends React.Component<WordAdderProps, WordAdderState> {\n\n  public state: WordAdderState = {\n    words: []\n  };\n\n  constructor(props: WordAdderProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.keyPressed = this.keyPressed.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const index = parseInt(event.target.name.substr(4));\n    const word = event.target.value;\n    this.setState((state, props) => {\n      const newWords = state.words;\n      newWords[index] = word;\n      return {\n        words: newWords\n      };\n    });\n  }\n\n  keyPressed(event: React.KeyboardEvent<HTMLInputElement>) {\n    if (event.key === \"Enter\") {\n      const words = this.state.words;\n      const enterDisabled = words.length < this.props.numOfWords || words.some(word => !word || word.length === 0);\n      if (!enterDisabled) this.props.add(words);\n    }\n  }\n\n  render() {\n    const { add, numOfWords } = this.props;\n    const { words } = this.state;\n    const wordFields = [];\n    for (let i=0; i<numOfWords; i++) {\n      wordFields.push(\n        <TextField required label={`Wort ${numOfWords > 1 ? (i+1) : ''}`}\n          placeholder=\"Ratebegriff eingeben\"\n          name={`word${i}`}\n          key={`word${i}`}\n          value={words[i]||''} \n          onChange={this.handleChange} \n          onKeyPress={this.keyPressed}/>\n      );\n    }\n    \n    const enterDisabled = words.length < numOfWords || words.some(word => !word || word.length === 0);\n\n    return (\n      <div className=\"Word-adder\">\n        <Typography variant=\"subtitle1\">\n          Gib {numOfWords>1?`${numOfWords} Wörter` : `ein Wort`} für das Spiel ein\n        </Typography>\n        {wordFields}\n        <Button variant=\"contained\" color=\"primary\" \n          disabled={enterDisabled} \n          onClick={() => add(words)}>Jetzt abschicken</Button>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { IGame, IUser } from '../custom.d';\nimport { Paper, Typography } from '@material-ui/core';\nimport { WordHint } from './components/WordHint';\nimport { WordCard } from './components/WordCard';\nimport { WordAdder } from './components/WordAdder';\nimport { getRandomColor } from '../common/ColorPicker';\n\nimport { SETTING_ID, SETTING_NAME, SETTING_COLOR, DEFAULT_NUM_WORDS } from '../shared/constants';\nimport * as api from '../shared/apiFunctions';\n\ntype GamePreparationProps = {\n    game: IGame\n}\n\nexport class GamePreparation extends React.Component<GamePreparationProps> {\n    // TODO central place for player\n    public currentPlayer: IUser =  {\n        id: localStorage.getItem(SETTING_ID) || '',\n        name: localStorage.getItem(SETTING_NAME) || '',\n        color: getRandomColor(localStorage.getItem(SETTING_COLOR))\n    };\n\n    constructor(props: GamePreparationProps) {\n        super(props);\n\n        this.addWords = this.addWords.bind(this);\n    }\n\n    async addWords(words: string[]) {\n        let player: IUser = this.currentPlayer;\n        player.enteredWords = words;\n\n        api.updatePlayer(this.props.game.id, player);\n    }\n\n    render() {\n        const { game } = this.props;\n        const numWordsPerPlayer = game.wordsPerPlayer || DEFAULT_NUM_WORDS;\n        const currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n        let isInGame: boolean = false;\n        let myWords: string[] = [];\n        let allMyWordsEntered: boolean = false;\n        const listOfPlayers = game.players.map(player => {\n            const wordsEntered: boolean = !!player.enteredWords && player.enteredWords.length === numWordsPerPlayer;\n            if (player.id === currentUserId) {\n                isInGame = true;\n                myWords = player.enteredWords || [];\n                allMyWordsEntered = wordsEntered;\n            } \n            return (\n                <WordHint key={player.id} hint={player.name} color={player.color} showPencil={!wordsEntered}></WordHint>\n            )\n        });\n\n        const myWordCards = myWords.map(word => <WordCard key={word} word={word}/>)\n\n        // TODO not in game users\n        // TODO css classes\n        return (\n            <div className=\"Game-lobby\">\n                <div className=\"New-player\">\n                    { \n                        allMyWordsEntered || !isInGame ? ( \n                            <Paper className=\"StatusInfo\">\n                                Warten auf Mitspieler ... Sobald alle fertig sind, geht's los. \n                            </Paper>\n                        ) : (\n                            <WordAdder add={this.addWords} numOfWords={numWordsPerPlayer}/>\n                        )\n                    }\n                    {myWordCards.length > 0 && <Typography variant=\"subtitle1\">{myWordCards.length > 1 ? 'Meine Begriffe' : 'Mein Begriff'}</Typography>}\n                    {myWordCards}\n                </div>\n                <div className=\"Player-list\">\n                    <Typography variant=\"h5\">\n                        Mitspieler\n                    </Typography>\n                    {listOfPlayers}\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport {WordCard} from './components/WordCard';\nimport { IGame } from '../custom.d';\n\ntype GameEndViewProps = {\n  game: IGame\n};\n\nexport class GameEndView extends React.Component<GameEndViewProps> {\n  render() {\n    const game: IGame = this.props.game;\n    const correctWords = game.correctWords.map(wordResult => {\n      return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={true}/>\n    });\n    const wrongWords = game.wrongWords.map(wordResult => {\n      return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={false}/>\n    });\n\n    return (\n      <div className=\"Game-end-view\">\n        <div className=\"Correct-words\">\n          <h2>Richtig ({game.correctWords.length})</h2>\n          {correctWords}\n        </div>\n        <div className=\"Wrong-words\">\n          <h2>Falsch ({game.wrongWords.length})</h2>\n          {wrongWords}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { IGame, GamePhase } from '../../custom.d';\nimport { getUserInGame } from '../../shared/functions';\n\ntype GameStatsProps = {\n  game: IGame\n};\n\nexport class GameStats extends React.Component<GameStatsProps> {\n  render() {\n    const game: IGame = this.props.game;\n    const roundHost = getUserInGame(game, game.roundHost) || { name: '?' };\n    const guesser = getUserInGame(game, game.currentGuesser) || { name: '?' };\n\n    let gamePhase;\n    switch(game.phase) {\n      case GamePhase.HintWriting: \n        const players = game.players.filter(p => game.currentGuesser && p.id !== game.currentGuesser).map(p => p.name);\n        const playersString = players.slice(0, players.length-1).join(', ') + ' und ' + players[players.length-1];\n        gamePhase = playersString + ' schreiben Hinweise auf...';\n        break;\n      case GamePhase.HintComparing: \n        gamePhase = roundHost.name + ' überprüft die Hinweise auf ungültige oder doppelte Wörter...';\n        break;\n      case GamePhase.Guessing: \n        gamePhase = guesser.name + ' versucht den Begriff zu erraten...';\n        break;\n      case GamePhase.Solution: \n        if (game.guessedRight) {\n          gamePhase = guesser.name + ' lag genau richtig!';\n        } else {\n          gamePhase = guesser.name + ' lag daneben! ' + roundHost.name + ' entscheidet ob es trotzdem zählt...';\n        }\n        break;\n    }\n\n    return (\n      <div className=\"Game-progress\">\n        <div>Runde: {game.round+1}/{game.words.length}, Richtige: {game.correctWords.length}, Falsche: {game.wrongWords.length}</div>\n        <div>Phase: {gamePhase}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { IGame, IHint } from '../../custom.d';\nimport { WordCard } from '../components/WordCard';\nimport { WordHint } from '../components/WordHint';\n\nimport { getCurrentUserInGame, getUserInGame } from '../../shared/functions';\nimport * as api from '../../shared/apiFunctions';\n\ntype HintWritingViewProps = {\n    game: IGame\n};\n\nexport class HintWritingView extends React.Component<HintWritingViewProps> {\n    constructor(props: HintWritingViewProps) {\n        super(props);\n\n        this.submitHint = this.submitHint.bind(this);\n    }\n\n    submitHint(hint: string) {\n        api.submitHint(this.props.game.id, hint);\n    }\n\n    render() {\n        const game: IGame = this.props.game;\n        const currentUser = getCurrentUserInGame(game);\n        const guesser = getUserInGame(game, game.currentGuesser) || { name: '?', id: '?' };\n        const isGuesser = currentUser && currentUser.id === guesser.id;\n        const guesserName = isGuesser ? 'Ich' : guesser.name;\n\n        const currentWord = isGuesser ? '?' : (game.currentWord || '');\n        const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n            const hint: string = hintObj.hint;\n            const hintIsMine = currentUser && currentUser.id === hintObj.author;\n            const author = getUserInGame(game, hintObj.author) || { name: '?', id: '?' };\n            const authorName = hintIsMine ? 'Ich' : author.name;\n            const showHint = !hint || hintIsMine;\n            const showInput = !hint && hintIsMine;\n\n            return (\n                <WordHint \n                    key={hintObj.author+index} \n                    hint={hint} \n                    color={author.color}\n                    showInput={showInput}\n                    submitHint={this.submitHint}\n                    showCheck={!showHint}\n                    author={authorName}\n                />\n            );\n        });\n\n        return (\n            <div className=\"Game-field\">\n                <div className=\"Current-word\">\n                    <Typography variant=\"h5\">\n                        Begriff\n                    </Typography>\n                    <WordCard \n                        word={currentWord} \n                        guesser={guesserName} \n                        color={guesser.color} />\n                </div>\n                <div className=\"Current-hints\">\n                    <Typography variant=\"h5\">\n                        Spieler-Hinweise\n                    </Typography>\n                    <div className=\"WordHint-list\">{currentHints}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport { IGame, IHint } from '../../custom.d';\nimport { WordCard } from '../components/WordCard';\nimport { WordHint } from '../components/WordHint';\n\nimport { getCurrentUserInGame, getUserInGame } from '../../shared/functions';\nimport * as api from '../../shared/apiFunctions';\n\ntype HintComparingViewProps = {\n    game: IGame\n};\n\nexport class HintComparingView extends React.Component<HintComparingViewProps> {\n    constructor(props: HintComparingViewProps) {\n        super(props);\n\n        this.toggleDuplicate = this.toggleDuplicate.bind(this);\n        this.showHints = this.showHints.bind(this);\n    }\n\n    toggleDuplicate(hintIndex: number) {\n        api.toggleDuplicate(this.props.game.id, hintIndex);\n    }\n\n    showHints() {\n        api.showHints(this.props.game.id);\n    }\n\n    render() {\n        const game: IGame = this.props.game;\n        const currentUser = getCurrentUserInGame(game);\n        const guesser = getUserInGame(game, game.currentGuesser) || { name: '?', id: '?' };\n        const isGuesser = currentUser && currentUser.id === guesser.id;\n        const guesserName = isGuesser ? 'Ich' : guesser.name;\n        const isRoundHost = currentUser && currentUser.id === game.roundHost;\n\n        const currentWord = isGuesser ? '?' : (game.currentWord || '');\n        const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n            const hintIsMine = currentUser && currentUser.id === hintObj.author;\n            const author = getUserInGame(game, hintObj.author) || { name: '?', id: '?' };\n            const authorName = hintIsMine ? 'Ich' : author.name;\n\n            return (\n                <WordHint \n                    key={hintObj.author+index} \n                    hint={hintObj.hint} \n                    color={author.color}\n                    showCheck={isGuesser}\n                    duplicate={hintObj.isDuplicate}\n                    showDuplicateToggle={isRoundHost}\n                    toggleDuplicate={()=>this.toggleDuplicate(index)}\n                    author={authorName}\n                />\n            );\n        });\n\n        return (\n            <div className=\"Game-field\">\n                <div className=\"Current-word\">\n                    <Typography variant=\"h5\">\n                        Begriff\n                    </Typography>\n                    <WordCard \n                        word={currentWord} \n                        guesser={guesserName} \n                        color={guesser.color} />\n                </div>\n                <div className=\"Current-hints\">\n                    <Typography variant=\"h5\">\n                        Spieler-Hinweise\n                    </Typography>\n                    <div className=\"WordHint-list\">{currentHints}</div>\n                    { isRoundHost && (\n                        <Typography variant=\"subtitle1\">\n                            Benutze die Smiley-Buttons auf den Hinweisen um doppelte oder ungültige Werte zu markieren.\n                        </Typography>\n                    )}\n                    {isRoundHost && <Button variant=\"contained\" color=\"primary\" onClick={this.showHints}>{guesser.name + ' kann losraten!'}</Button>}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\nimport { IGame, IHint } from '../../custom.d';\nimport { WordCard } from '../components/WordCard';\nimport { WordHint } from '../components/WordHint';\n\nimport { getCurrentUserInGame, getUserInGame } from '../../shared/functions';\nimport * as api from '../../shared/apiFunctions';\n\ntype GuessingViewProps = {\n    game: IGame\n};\n\nexport class GuessingView extends React.Component<GuessingViewProps> {\n    constructor(props: GuessingViewProps) {\n        super(props);\n\n        this.guess = this.guess.bind(this);\n    }\n\n    guess(guess: string) {\n        api.guess(this.props.game.id, guess);\n    }\n\n    render() {\n        const game: IGame = this.props.game;\n        const currentUser = getCurrentUserInGame(game);\n        const guesser = getUserInGame(game, game.currentGuesser) || { name: '?', id: '?' };\n        const isGuesser = currentUser && currentUser.id === guesser.id;\n        const guesserName = isGuesser ? 'Ich' : guesser.name;\n\n        const currentWord = isGuesser ? '?' : (game.currentWord || '');\n        const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n            let hint: string = hintObj.hint;\n            const hintIsMine = currentUser && currentUser.id === hintObj.author;\n            const author = getUserInGame(game, hintObj.author) || { name: '?', id: '?' };\n            const authorName = hintIsMine ? 'Ich' : author.name;\n\n            if (isGuesser && hintObj.isDuplicate) {\n                hint = 'LEIDER DOPPELT';\n            } \n\n            return (\n                <WordHint \n                    key={hintObj.author+index} \n                    hint={hint} \n                    color={author.color}\n                    duplicate={hintObj.isDuplicate}\n                    author={authorName}\n                />\n            );\n        });\n\n        return (\n            <div className=\"Game-field\">\n                <div className=\"Current-word\">\n                    <Typography variant=\"h5\">\n                        Begriff\n                    </Typography>\n                    <WordCard \n                        word={currentWord} \n                        guesser={guesserName} \n                        color={guesser.color} \n                        showInput={isGuesser}\n                        submitHint={this.guess}/>\n                </div>\n                <div className=\"Current-hints\">\n                    <Typography variant=\"h5\">\n                        Spieler-Hinweise\n                    </Typography>\n                    <div className=\"WordHint-list\">{currentHints}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport { IGame, IHint } from '../../custom.d';\nimport { WordCard } from '../components/WordCard';\nimport { WordHint } from '../components/WordHint';\n\nimport { getCurrentUserInGame, getUserInGame } from '../../shared/functions';\nimport * as api from '../../shared/apiFunctions';\n\ntype SolutionViewProps = {\n    game: IGame\n};\n\nexport class SolutionView extends React.Component<SolutionViewProps> {\n    constructor(props: SolutionViewProps) {\n        super(props);\n\n        this.resolveRound = this.resolveRound.bind(this);\n    }\n\n    resolveRound(correct: boolean = true) {\n        api.resolveRound(this.props.game.id, correct);\n    }\n\n    render() {\n        const game: IGame = this.props.game;\n        const currentUser = getCurrentUserInGame(game);\n        const guesser = getUserInGame(game, game.currentGuesser) ||  { name: '?', id: '?' };\n        const isGuesser = currentUser && currentUser.id === guesser.id;\n        const guesserName = isGuesser ? 'Ich' : guesser.name;\n        const isRoundHost = currentUser && currentUser.id === game.roundHost;\n\n        const currentWord = game.currentWord || '';\n        const currentGuess = game.currentGuess || '';\n        const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n            const hintIsMine = currentUser && currentUser.id === hintObj.author;\n            const author = getUserInGame(game, hintObj.author) || { name: '?', id: '?' };\n            const authorName = hintIsMine ? 'Ich' : author.name;\n\n            return (\n                <WordHint \n                    key={hintObj.author+index} \n                    hint={hintObj.hint} \n                    color={author.color}\n                    author={authorName}\n                />\n            );\n        });\n        let solutionButton1 = <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(true)}>Super, weiter geht's</Button>;\n        let solutionButton2;\n        if (!game.guessedRight) {\n            solutionButton1 = <Button variant=\"contained\" onClick={() => this.resolveRound(true)}>Das zählt trotzdem</Button>;\n            solutionButton2 = <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(false)}>Leider falsch</Button>;\n        }\n\n        return (\n            <div className=\"Game-field\">\n                <div className=\"Current-word\">\n                    <Typography variant=\"h5\">\n                        Begriff\n                    </Typography>\n                    <WordCard \n                        word={currentWord} \n                        guesser={guesserName} \n                        color={guesser.color} \n                        guess={currentGuess} \n                        guessedRight={game.guessedRight}/>\n                    {(isRoundHost || game.guessedRight) && solutionButton1}\n                    {isRoundHost && solutionButton2}\n                </div>\n                <div className=\"Current-hints\">\n                    <Typography variant=\"h5\">\n                        Spieler-Hinweise\n                    </Typography>\n                    <div className=\"WordHint-list\">{currentHints}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport {GameLobby} from './GameLobby';\nimport {GamePreparation} from './GamePreparation';\nimport {GameEndView} from './GameEndView';\nimport {GameStats} from './components/GameStats';\nimport {HintWritingView} from './gamePhases/HintWritingView';\nimport {HintComparingView} from './gamePhases/HintComparingView';\nimport {GuessingView} from './gamePhases/GuessingView';\nimport {SolutionView} from './gamePhases/SolutionView';\nimport { IGame, GamePhase } from '../custom.d';\n\nimport { loadGame } from '../shared/apiFunctions';\nimport { setDocumentTitle } from '../shared/functions';\n\nconst POLLING_INTERVAL = 1000;\n\ntype JustOneGameProps = {\n    gameId: string,\n    setTheme?: (color: string)=>void\n};\ntype JustOneGameState = {\n    currentGame?: IGame\n};\n\nexport class JustOneGame extends React.Component<JustOneGameProps,JustOneGameState> {\n    public state: JustOneGameState = {};\n    private _interval: number|undefined;\n    private _isMounted: boolean = false;\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        this.loadGame();\n\n        this._interval = window.setInterval(this.loadGame.bind(this), POLLING_INTERVAL);\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        clearInterval(this._interval);\n    }\n\n    async loadGame() {\n        const id = this.props.gameId;\n        const game = await loadGame(id);\n        if (!this._isMounted) return;\n        if (!game) return;\n        setDocumentTitle(game.name);\n        this.setState({\n            currentGame: game\n        });\n    }\n\n    render() {\n        const {setTheme} = this.props;\n        const {currentGame} = this.state;\n\n        if (!currentGame) return null;\n\n        let gameContent;\n        let gameStats;\n\n        switch(currentGame.phase) {\n            case GamePhase.Init:\n                gameContent = <GameLobby game={currentGame} setTheme={setTheme} />;\n                break;\n            case GamePhase.Preparation:\n                gameContent = <GamePreparation game={currentGame} />;\n                break;\n            case GamePhase.HintWriting:\n                gameContent = <HintWritingView game={currentGame} />;\n                gameStats   = <GameStats game={currentGame} />;\n                break;\n            case GamePhase.HintComparing:\n                gameContent = <HintComparingView game={currentGame} />;\n                gameStats   = <GameStats game={currentGame} />;\n                break;\n            case GamePhase.Guessing:\n                gameContent = <GuessingView game={currentGame} />;\n                gameStats   = <GameStats game={currentGame} />;\n                break;\n            case GamePhase.Solution:\n                gameContent = <SolutionView game={currentGame} />;\n                gameStats   = <GameStats game={currentGame} />;\n                break;\n            case GamePhase.End:\n                gameContent = <GameEndView game={currentGame} />;\n                break;\n        }\n\n        return (\n            <div className=\"Game-content\">\n                {gameStats}\n                {gameContent}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\n\ntype UserConfigProps = {\n  onClose: (value: string)=>void,\n  selectedValue: string,\n  possibleValues: string[],\n  open: boolean\n};\n\nexport class UserConfig extends React.Component<UserConfigProps> {\n  render() {\n    const { open, onClose, selectedValue, possibleValues } = this.props;\n\n    const handleClose = () => {\n      onClose(selectedValue);\n    };\n\n    const handleListItemClick = (value: string) => {\n      onClose(value);\n    };\n\n    return (\n      <Dialog onClose={handleClose} open={open}>\n        <DialogTitle>Nachtmodus</DialogTitle>\n        <List>\n          {possibleValues.map((value: string) => (\n            <ListItem button onClick={() => handleListItemClick(value)} key={value} selected={selectedValue === value}>\n              <ListItemText primary={value} />\n            </ListItem>\n          ))}\n        </List>\n      </Dialog>\n    );\n  }\n}","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport './App.scss';\nimport { AppBar, Toolbar, IconButton, Typography, Paper, Button } from '@material-ui/core';\nimport { Home as HomeIcon, AccountCircle as AccountCircleIcon } from '@material-ui/icons';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nimport { SETTING_NAME, SETTING_COLOR, SETTING_THEME, \n         ThemeMode, DEFAULT_PRIMARY_COLOR, DEFAULT_SECONDARY_COLOR } from './shared/constants';\n\nimport {JustOneHome} from './just-one/JustOneHome';\nimport {JustOneGame} from './just-one/JustOneGame';\nimport { UserConfig } from './common/UserConfig';\n\nexport const App = () =>  {\n  const [userColor, setUserColor] = useState(localStorage.getItem(SETTING_COLOR));\n  const [userTheme, setUserTheme] = useState(localStorage.getItem(SETTING_THEME) || ThemeMode.AUTO);\n  const [userConfigOpen, setUserConfigOpen] = React.useState(false);\n\n  const currentUserName: string|null = localStorage.getItem(SETTING_NAME);\n  let prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  if (userTheme === ThemeMode.BRIGHT) {\n    prefersDarkMode = false;\n  } else if (userTheme === ThemeMode.DARK) {\n    prefersDarkMode = true;\n  }\n\n  let primaryColor = userColor;\n  if (!primaryColor || !primaryColor.startsWith('#') || primaryColor.length !== 7) {\n    primaryColor = DEFAULT_PRIMARY_COLOR;\n  }\n\n  const applyUserTheme = (value: string) => {\n    setUserTheme(value);\n    localStorage.setItem(SETTING_THEME, value);\n    setUserConfigOpen(false);\n  }\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          primary: {\n            main: primaryColor || DEFAULT_PRIMARY_COLOR\n          },\n          secondary: {\n            main: DEFAULT_SECONDARY_COLOR,\n          }, \n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode, primaryColor],\n  );\n\n  const classNames = ['App'];\n  if (prefersDarkMode) classNames.push('App-dark');\n\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n        <Paper square elevation={0} className={classNames.join(' ')}>\n          <AppBar position=\"sticky\">\n            <Toolbar>\n              <Link to=\"/\" className=\"ButtonLink\">\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"home\">\n                  <HomeIcon />\n                </IconButton>\n              </Link>\n              <Typography variant=\"h2\" className=\"appTitle\">\n                Nur ein Wort!\n              </Typography>\n              { \n                currentUserName ? \n                <Button onClick={()=>setUserConfigOpen(true)} className=\"Account-button\" color=\"inherit\" startIcon={<AccountCircleIcon />}>\n                  {currentUserName}\n                </Button> : \n                <IconButton onClick={()=>setUserConfigOpen(true)} edge=\"end\" color=\"inherit\">\n                  <AccountCircleIcon />\n                </IconButton>\n              }\n              <UserConfig \n                open={userConfigOpen} \n                onClose={applyUserTheme} \n                selectedValue={userTheme} \n                possibleValues={[ThemeMode.AUTO, ThemeMode.BRIGHT, ThemeMode.DARK]}\n              ></UserConfig>\n            </Toolbar>\n          </AppBar>\n          <Switch>\n            <Route path=\"/:gameId\" component={(props: RouteComponentProps<any>) => <JustOneGame gameId={props.match.params.gameId} setTheme={setUserColor}/>} />\n            <Route children={<JustOneHome/>} />\n          </Switch> \n        </Paper>  \n      </ThemeProvider>\n    </Router>\n  );  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}