{"version":3,"sources":["../node_modules/short-unique-id/lib sync","just-one/WordCard.tsx","just-one/PencilAnimation.tsx","just-one/WordHint.tsx","just-one/WordHintInput.tsx","just-one/GameStats.tsx","just-one/GameField.tsx","just-one/NewPlayer.tsx","just-one/GameLobby.tsx","just-one/GameEndView.tsx","just-one/JustOne.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","WordCard","currentWord","this","props","word","guesser","className","style","color","React","Component","PencilAnimation","styleObj1","backgroundColor","styleObj2","borderTopColor","WordHint","currentHint","hint","styleObj","author","showPencil","classes","duplicate","push","length","extraClasses","join","WordHintInput","state","value","handleChange","bind","submitHint","keyPressed","event","setState","target","key","TextField","required","label","onChange","onKeyPress","Button","variant","disabled","onClick","buttonText","GameStats","game","round","words","correctWords","wrongWords","GameField","currentUserId","localStorage","getItem","showHints","guess","hintWord","currentUser","getCurrentUser","fetch","GAME_URL","method","headers","body","JSON","stringify","catch","console","log","currentGuesser","name","isGuesser","isComparingPhase","phase","isGuessingPhase","currentHints","hints","map","hintObj","isDuplicate","players","find","player","ShortUniqueId","require","default","NewPlayer","setRandomColor","addPlayer","updatePlayer","generateRandomColor","placeholder","dictionary","generator","GameLobby","SETTING_NAME","SETTING_COLOR","setPlayerProps","startGame","SETTING_ID","then","res","json","data","setLocalPlayer","setItem","listOfPlayers","isHost","host","isInGame","findIndex","GameEndView","JustOne","allWords","_interval","createGame","gameId","loadGame","setInterval","loadGames","clearInterval","currentGame","games","filter","p","allGames","optionalContent","gameList","currentUserName","to","AppBar","position","Toolbar","IconButton","edge","aria-label","Home","Typography","Chip","icon","AccountCircle","apiPort","window","location","hostname","protocol","App","primaryColor","theme","createMuiTheme","palette","primary","main","secondary","ThemeProvider","path","component","match","params","children","Boolean","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iGAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,4NCAZC,EAAb,uKAGG,IAAMC,EAAcC,KAAKC,MAAMC,KACxBC,EAAUH,KAAKC,MAAME,QAE3B,OACC,yBAAKC,UAAU,aACbL,EACGI,GAAW,0BAAMC,UAAU,aAAaC,MAAO,CAACC,MAAON,KAAKC,MAAMK,QAASH,EAAhE,oBATrB,GAA8BI,IAAMC,WCFvBC,EAAb,uKAGI,IAAMC,EAAY,CACjBC,gBAAiBX,KAAKC,MAAMK,OAEvBM,EAAY,CACjBC,eAAgBb,KAAKC,MAAMK,OAG5B,OACD,yBAAKF,UAAU,UACV,yBAAKA,UAAU,OAAOC,MAAOK,IAC7B,yBAAKN,UAAU,MAAMC,MAAOO,SAbpC,GAAqCL,IAAMC,WCK9BM,EAAb,uKAGG,IAAMC,EAAcf,KAAKC,MAAMe,KACxBV,EAAQN,KAAKC,MAAMK,MACnBW,EAAW,CAChB,MAASX,GAEJY,EAASlB,KAAKC,MAAMiB,OACpBC,EAAanB,KAAKC,MAAMkB,aAAenB,KAAKC,MAAMe,KAElDI,EAAU,CAAC,aACbpB,KAAKC,MAAMoB,WAAWD,EAAQE,KAAK,uBACnCP,GAAeA,EAAYQ,OAAS,GAAIH,EAAQE,KAAK,kBAChDP,GAAeA,EAAYQ,OAAS,IAAIH,EAAQE,KAAK,kBAC9D,IAAME,EAAeJ,EAAQK,KAAK,KAElC,OACC,yBAAKrB,UAAWoB,EAAcnB,MAAOY,GACjCF,EACAI,GAAc,kBAAC,EAAD,CAAiBb,MAAOA,IACtCY,GAAU,0BAAMd,UAAU,cAAcc,QArBjD,GAA8BX,IAAMC,W,SCEvBkB,EAAb,kDAEE,WAAYzB,GAA4B,IAAD,8BACtC,cAAMA,IACA0B,MAAQ,CAACC,MAAO,IAErB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBANmB,EAFzC,yDAWeG,GACXjC,KAAKkC,SAAS,CAACN,MAAOK,EAAME,OAAOP,UAZvC,mCAgBG5B,KAAKC,MAAM8B,WAAW/B,KAAK2B,MAAMC,OACjC5B,KAAKkC,SAAS,CAACN,MAAO,OAjBzB,iCAoBaK,GACQ,UAAdA,EAAMG,KACRpC,KAAK+B,eAtBV,+BA2BI,OACC,yBAAK3B,UAAU,mBACd,kBAACiC,EAAA,EAAD,CAAWC,UAAQ,EAACC,MAAOvC,KAAKC,MAAMsC,OAAS,eAC9CX,MAAO5B,KAAK2B,MAAMC,MAClBY,SAAUxC,KAAK6B,aACfY,WAAYzC,KAAKgC,aACnB,kBAACU,EAAA,EAAD,CAAQC,QAAQ,YAAYrC,MAAM,UACjCsC,UAAW5C,KAAK2B,MAAMC,MACtBiB,QAAS7C,KAAK+B,YAAa/B,KAAKC,MAAM6C,YAAc,2BAnC1D,GAAmCvC,IAAMC,WCN5BuC,EAAb,uKAEI,IAAMC,EAAchD,KAAKC,MAAM+C,KAE/B,OACE,yBAAK5C,UAAU,iBAAf,UACU4C,EAAKC,MAAM,EADrB,IACyBD,EAAKE,MAAM3B,OADpC,eACwDyB,EAAKG,aAAa5B,OAD1E,cAC6FyB,EAAKI,WAAW7B,YANnH,GAA+BhB,IAAMC,WCYxB6C,EAAb,kDAGE,WAAYpD,GAAwB,IAAD,8BACjC,cAAMA,IAHDqD,cAAwBC,aAAaC,QAV3B,aAUkD,GAKjE,EAAKzB,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAK2B,UAAY,EAAKA,UAAU3B,KAAf,gBACjB,EAAK4B,MAAQ,EAAKA,MAAM5B,KAAX,gBAEb,EAAKH,MAAQ,GAPoB,EAHrC,oGAiBagC,GACT,IAAMC,EAAcC,EAAe7D,KAAKC,MAAM+C,KAAMhD,KAAKsD,eACzD,GAAKM,EAAL,CACA,IAAM5C,EAAc,CAAEA,KAAM2C,EAAUzC,OAAQ0C,GAE9CE,MAAM,GAAD,OAAIC,EAAJ,YAAgB/D,KAAKC,MAAM+C,KAAKnD,GAAhC,SAA2C,CAC9CmE,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACpD,WACrBqD,MAAMC,QAAQC,QA7BrB,kCAiCIT,MAAM,GAAD,OAAIC,EAAJ,YAAgB/D,KAAKC,MAAM+C,KAAKnD,GAAhC,cAAgD,CACnDmE,OAAQ,QACPK,MAAMC,QAAQC,OAnCrB,4BAsCQb,GACJI,MAAM,GAAD,OAAIC,EAAJ,YAAgB/D,KAAKC,MAAM+C,KAAKnD,GAAhC,UAA4C,CAC/CmE,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACV,YACrBW,MAAMC,QAAQC,OA9CrB,+BAkDI,IAAMvB,EAAchD,KAAKC,MAAM+C,KACzBY,EAAcC,EAAeb,EAAMhD,KAAKsD,eACxCnD,EAAU6C,EAAKwB,eAAiBxB,EAAKwB,eAAiB,CAAEC,KAAM,IAAK5E,GAAI,KACvE6E,EAAYd,GAAeA,EAAY/D,KAAOM,EAAQN,GAEtD8E,EAAkC,IAAf3B,EAAK4B,MACxBC,EAAiC,IAAf7B,EAAK4B,MAEvB7E,EAAc2E,EAAY,IAAO1B,EAAKjD,aAAe,GACrD+E,EAAe9B,EAAK+B,MAAMC,KAAI,SAAAC,GAClC,IAAIjE,EAAe,IAUnB,OATI6D,EACF7D,EAAO0D,GAAaO,EAAQC,YAAc,iBAAmBD,EAAQjE,KAC5D2D,EACJD,IAAW1D,EAAOiE,EAAQjE,MACtB4C,GAAeA,EAAY/D,KAAOoF,EAAQ/D,OAAOrB,GAC1DmB,EAAOiE,EAAQjE,KACLiE,EAAQjE,OAClBA,EAAO,IAEF,kBAAC,EAAD,CAAUoB,IAAK6C,EAAQ/D,OAAOrB,GAAImB,KAAMA,EAAMV,MAAO2E,EAAQ/D,OAAOZ,MAAOe,UAAW4D,EAAQC,YAAahE,OAAQ+D,EAAQ/D,OAAOuD,UAG3I,OACE,yBAAKrE,UAAU,cACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAW4C,KAAMA,IACjB,kBAAC,EAAD,CAAU9C,KAAMH,EAAaI,QAASA,EAAQsE,KAAMnE,MAAOH,EAAQG,QAClEuE,GAAmBH,GAAa,kBAAC,EAAD,CAAe3C,WAAY/B,KAAK0D,MAAOnB,MAAM,cAAcO,WAAW,iBAEzG,yBAAK1C,UAAU,kBACXsE,GAAa,kBAAC,EAAD,CAAe3C,WAAY/B,KAAK+B,aAC/C,yBAAK3B,UAAU,iBAAiB0E,GAC/BH,IAAqBD,GAAa,kBAAChC,EAAA,EAAD,CAAQC,QAAQ,YAAYrC,MAAM,UAAUuC,QAAS7C,KAAKyD,WAAYtD,EAAQsE,KAAO,yBAnFlI,GAA+BlE,IAAMC,WA0FrC,SAASqD,EAAeb,EAAaM,GACnC,OAAON,EAAKmC,QAAQC,MAAK,SAAAC,GAAM,OAAIA,EAAOxF,KAAOyD,KC1GnD,IAAMgC,EAAgBC,EAAQ,IAAmBC,QASpCC,EAAb,kDAEE,WAAYxF,GAAwB,IAAD,8BACjC,cAAMA,IAED4B,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAK4D,eAAiB,EAAKA,eAAe5D,KAApB,gBACtB,EAAK6D,UAAY,EAAKA,UAAU7D,KAAf,gBALgB,EAFrC,yDAUeG,GACX,IAAIoD,EAAgB,CAClBxF,GAAI,GACJ4E,KAAMzE,KAAKC,MAAMwE,KACjBnE,MAAON,KAAKC,MAAMK,OAEM,SAAtB2B,EAAME,OAAOsC,KACfY,EAAOZ,KAAOxC,EAAME,OAAOP,MACI,UAAtBK,EAAME,OAAOsC,OACtBY,EAAO/E,MAAQ2B,EAAME,OAAOP,OAG9B5B,KAAKC,MAAM2F,aAAaP,KAtB5B,uCA0BI,IAAMA,EAAgB,CACpBxF,GAAI,GACJ4E,KAAMzE,KAAKC,MAAMwE,KACjBnE,MAAOuF,KAET7F,KAAKC,MAAM2F,aAAaP,KA/B5B,kCAmCI,IAAMA,EAAgB,CACpBxF,GAAI,GACJ4E,KAAMzE,KAAKC,MAAMwE,KACjBnE,MAAON,KAAKC,MAAMK,OAEpBN,KAAKC,MAAM0F,UAAUN,KAxCzB,+BA4CI,OACE,yBAAKjF,UAAU,cACb,kBAACiC,EAAA,EAAD,CAAWC,UAAQ,EAACC,MAAM,cACxBkC,KAAK,OACL7C,MAAO5B,KAAKC,MAAMwE,KAClBjC,SAAUxC,KAAK6B,eACjB,kBAACQ,EAAA,EAAD,CAAWC,UAAQ,EAACC,MAAM,eACxBuD,YAAY,gBACZrB,KAAK,QACL7C,MAAO5B,KAAKC,MAAMK,MAClBkC,SAAUxC,KAAK6B,eACjB,kBAACa,EAAA,EAAD,CAAQC,QAAQ,YACdE,QAAS7C,KAAK0F,gBADhB,gBAEA,kBAAChD,EAAA,EAAD,CAAQC,QAAQ,YAAYrC,MAAM,UAChCsC,UAAW5C,KAAKC,MAAMwE,KACtB5B,QAAS7C,KAAK2F,WAFhB,mBAzDR,GAA+BpF,IAAMC,WAkE9B,SAASqF,IAUd,MADc,IARI,IAAIP,EAAc,CAClCS,WAAY,CACV,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,MAGCC,CAAU,GCxEzB,IAAMC,EAAb,kDAOE,WAAYhG,GAAwB,IAAD,8BACjC,cAAMA,IAND0B,MAAwB,CAC7B8C,KAAMlB,aAAaC,QAAQ0C,IAAiB,GAC5C5F,MAAOiD,aAAaC,QAAQ2C,IAAkBN,KAAyB,SAMvE,EAAKF,UAAY,EAAKA,UAAU7D,KAAf,gBACjB,EAAKsE,eAAiB,EAAKA,eAAetE,KAApB,gBACtB,EAAKuE,UAAY,EAAKA,UAAUvE,KAAf,gBALgB,EAPrC,2DAeiBuD,GACbrF,KAAKkC,SAAS,CACZuC,KAAMY,EAAOZ,KACbnE,MAAO+E,EAAO/E,OAAS,OAlB7B,gCAsBY+E,GAAgB,IAAD,OACjB/B,EAAgBC,aAAaC,QAAQ8C,IAAe,GAC1DjB,EAAOxF,GAAKyD,EACZQ,MAAM,GAAD,OAAIC,EAAJ,YAAgB/D,KAAKC,MAAM+C,KAAKnD,GAAhC,cAAgD,CACnDmE,OAAQ,MACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACiB,aACrBkB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKC,eAAeD,EAAKrB,QACzB,EAAKnD,SAAS,CACZ5B,MAAOuF,KAAyB,QAChCpB,KAAM,QAGTJ,MAAMC,QAAQC,OAxCrB,qCA2CiBc,GACb9B,aAAaqD,QAAQN,EAAYjB,EAAOxF,IACxC0D,aAAaqD,QAAQV,EAAcb,EAAOZ,MACtCY,EAAO/E,OAAOiD,aAAaqD,QAAQ,cAAevB,EAAO/E,SA9CjE,kCAkDIwD,MAAM,GAAD,OAAIC,EAAJ,YAAgB/D,KAAKC,MAAM+C,KAAKnD,GAAhC,UAA4C,CAC/CmE,OAAQ,QACPuC,MAAK,SAACG,OAGNrC,MAAMC,QAAQC,OAvDrB,+BA2DI,IAAMsC,EAAgB7G,KAAKC,MAAM+C,KAAKmC,QAAQH,KAAI,SAAAK,GAAM,OACtD,kBAAC,EAAD,CAAUjD,IAAKiD,EAAOxF,GAAImB,KAAMqE,EAAOZ,KAAMnE,MAAO+E,EAAO/E,WAGvDgD,EAAwBC,aAAaC,QAAQ8C,IAAe,GAC5DQ,IAAoBxD,GAAiBtD,KAAKC,MAAM+C,KAAK+D,OAASzD,EAC9D0D,IAAsB1D,GAAiBtD,KAAKC,MAAM+C,KAAKmC,QAAQ8B,WAAU,SAAA5B,GAAM,OAAIA,EAAOxF,KAAOyD,MAAkB,EAEzH,OACE,yBAAKlD,UAAU,cACb,yBAAKA,UAAU,eAEV4G,GACD,kBAAC,EAAD,CAAWvC,KAAMzE,KAAK2B,MAAM8C,KAAMnE,MAAON,KAAK2B,MAAMrB,MAClDsF,aAAc5F,KAAKoG,eACnBT,UAAW3F,KAAK2F,YAGlBmB,GACA,kBAACpE,EAAA,EAAD,CAAQC,QAAQ,YAAYrC,MAAM,UAChCsC,SAAU5C,KAAKC,MAAM+C,KAAKmC,QAAQ5D,OAAS,EAC3CsB,QAAS7C,KAAKqG,WAFhB,mBAKJ,yBAAKjG,UAAU,eACZyG,EACD,kBAAC,EAAD,CAAU7F,KAAMhB,KAAK2B,MAAM8C,MAAQ,IAAKnE,MAAON,KAAK2B,MAAMrB,MAAOa,YAAY,UArFvF,GAA+BZ,IAAMC,WCRxB0G,EAAb,uKAEI,IAAMlE,EAAchD,KAAKC,MAAM+C,KACzBG,EAAeH,EAAKG,aAAa6B,KAAI,SAAA9E,GACzC,OAAO,kBAAC,EAAD,CAAUkC,IAAKlC,EAAMA,KAAMA,OAE9BkD,EAAaJ,EAAKI,WAAW4B,KAAI,SAAA9E,GACrC,OAAO,kBAAC,EAAD,CAAUkC,IAAKlC,EAAMA,KAAMA,OAGpC,OACE,yBAAKE,UAAU,iBACb,yBAAKA,UAAU,iBACb,wCAAc4C,EAAKG,aAAa5B,OAAhC,KACC4B,GAEH,yBAAK/C,UAAU,eACb,uCAAa4C,EAAKI,WAAW7B,OAA7B,KACC6B,QAlBX,GAAiC7C,IAAMC,WCe1B2G,EAAb,kDAYE,WAAYlH,GAAsB,IAAD,8BAC/B,cAAMA,IAZDqD,cAAwBC,aAAaC,QAb3B,aAakD,GAWlC,EAVjC4D,SAAW,CACT,SACA,YACA,QACA,cACA,UACA,YAI+B,EAFzBC,eAEyB,EAG/B,EAAKC,WAAa,EAAKA,WAAWxF,KAAhB,gBAElB,EAAKH,MAAQ,GALkB,EAZnC,gEAqBQ3B,KAAKC,MAAMsH,QACbvH,KAAKwH,WAELxH,KAAKqH,UAAYI,YAAYzH,KAAKwH,SAAS1F,KAAK9B,MAlC7B,OAoCnBA,KAAK0H,YAEL1H,KAAKqH,UAAYI,YAAYzH,KAAK0H,UAAU5F,KAAK9B,MAtC9B,QAUzB,6CAiCI2H,cAAc3H,KAAKqH,aAjCvB,iCAoCc,IAAD,OACLxH,EAAKG,KAAKC,MAAMsH,OACf1H,IAELyE,QAAQC,IAAIR,GAEZD,MAAM,GAAD,OAAIC,EAAJ,YAAgBlE,IAClB0G,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,EAAKxE,SAAS,CACZ0F,YAAalB,EAAK1D,UAGrBqB,MAAMC,QAAQC,QAjDrB,kCAoDe,IAAD,OACVT,MAAM,GAAD,OAAIC,EAAJ,SACFwC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACL,IAAImB,EAAQnB,EAAKmB,MACjBA,EAAQA,EAAMC,QAAO,SAAC9E,GACpB,OAAsB,IAAfA,EAAK4B,OAAgB,EAAKtB,eAAiBN,EAAKmC,QAAQ8B,WAAU,SAAAc,GAAC,OAAIA,EAAElI,KAAO,EAAKyD,kBAAkB,KAEhH,EAAKpB,SAAS,CACZ8F,SAAUH,OAGbxD,MAAMC,QAAQC,OAhErB,mCAoEI,IAAMvB,EA+DC,CAAC,GAAK,GAAI,KAAQ,GAAI,MAAQ,GAAG,QAAU,GAAG,KAAO,IAAI,MAAQ,EAAE,MAAQ,EAAE,MAAQ,GAAG,aAAe,GAAG,WAAa,IA9D9HA,EAAKE,MAAQlD,KAAKoH,SAElBtD,MAAM,GAAD,OAAIC,EAAJ,QAAoB,CACvBC,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACpB,WACrBuD,MAAK,SAACG,GACLpC,QAAQC,IAAImC,MAEbrC,MAAMC,QAAQC,OAjFrB,+BAqFI,IAGI0D,EACAC,EAJEN,EAA+B5H,KAAK2B,MAAMiG,YAC1CO,EAA+B5E,aAAaC,QAjGjC,cAuHjB,OAlBIoE,EAEAK,EADwB,IAAtBL,EAAYhD,MACI,kBAAC,EAAD,CAAW5B,KAAM4E,IACJ,IAAtBA,EAAYhD,MACF,6BACjB,kBAAClC,EAAA,EAAD,CAAQC,QAAQ,YAAYrC,MAAM,UAAUuC,QAAS7C,KAAKsH,YAA1D,eACA,kBAAC,EAAD,CAAatE,KAAM4E,KAGH,kBAAC,EAAD,CAAW5E,KAAM4E,KAGjC5H,KAAK2B,MAAMqG,WAAUE,EAAWlI,KAAK2B,MAAMqG,SAAShD,KAAI,SAAAhC,GAAI,OAC9D,kBAAC,IAAD,CAAMZ,IAAKY,EAAKnD,GAAIuI,GAAE,WAAMpF,EAAKnD,KAAjC,iBAAkDmD,EAAKnD,SAEzDoI,EAAkB,kBAACvF,EAAA,EAAD,CAAQC,QAAQ,YAAYrC,MAAM,UAAUuC,QAAS7C,KAAKsH,YAA1D,gBAIlB,6BACE,kBAACe,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMH,GAAG,IAAIhI,UAAU,cACrB,kBAACoI,EAAA,EAAD,CAAYC,KAAK,QAAQnI,MAAM,UAAUoI,aAAW,QAClD,kBAACC,EAAA,EAAD,QAGJ,kBAACC,EAAA,EAAD,CAAYjG,QAAQ,KAAKvC,UAAU,YAAnC,iBAGC+H,GAAmB,kBAACU,EAAA,EAAD,CAAMtG,MAAO4F,EAAiBW,KAAM,kBAACC,EAAA,EAAD,UAG3Dd,EACAC,OA5HT,GAA6B3H,IAAMC,W,qBCT7BwI,EADsC,qBAA7BC,OAAOC,SAASC,SACN,QAAU,QAEtBpF,EADUkF,OAAOC,SAASE,SAAW,KAAOH,OAAOC,SAASC,SAAWH,EAAU,OAC5D,SACrB1C,EAAa,WACbJ,EAAe,aACfC,EAAgB,cAgCdkD,MA5Bf,WACE,IAAMC,EAAe/F,aAAaC,QAAQ2C,IAJd,UAMtBoD,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAML,GAERM,UAAW,CACTD,KAXwB,cAgB9B,OACE,kBAAC,IAAD,KACE,kBAACE,EAAA,EAAD,CAAeN,MAAOA,GACtB,yBAAKnJ,UAAU,OACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO0J,KAAK,WAAWC,UAAW,SAAC9J,GAAD,OAAqC,kBAAC,EAAD,CAASsH,OAAQtH,EAAM+J,MAAMC,OAAO1C,YAC3G,kBAAC,IAAD,CAAO2C,SAAU,kBAAC,EAAD,aC/BTC,QACW,cAA7BlB,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASa,MACvB,2DCZNI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpE,MAAK,SAAAqE,GACJA,EAAaC,gBAEdxG,OAAM,SAAAyG,GACLxG,QAAQwG,MAAMA,EAAMC,a","file":"static/js/main.db24498d.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 104;","import React from 'react';\n\ntype WordCardProps = {\n\tword: string;\n\tguesser?: string;\n\tcolor?: string;\n}\n\nexport class WordCard extends React.Component<WordCardProps> {\n\n  render() {\n  \tconst currentWord = this.props.word;\n    const guesser = this.props.guesser;\n\n    return (\n\t    <div className=\"Word-card\">\n\t    \t{currentWord}\n        \t{guesser && <span className=\"Author-tag\" style={{color: this.props.color}}>{guesser} muss raten</span>}\n\t    </div>\n    );\n  }\n\n}","import React from 'react';\n\ntype PencilAnimationProps = {\n\tcolor?: string,\n}\n\nexport class PencilAnimation extends React.Component<PencilAnimationProps> {\n\n  render() {\n    const styleObj1 = {\n    \tbackgroundColor: this.props.color,\n    };\n    const styleObj2 = {\n    \tborderTopColor: this.props.color,\n    };\n\n    return (\n\t  <div className=\"pencil\">\n        <div className=\"body\" style={styleObj1}></div>\n        <div className=\"nib\" style={styleObj2}></div>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { PencilAnimation } from './PencilAnimation';\n\ntype WordHintProps = {\n\thint?: string,\n\tcolor?: string,\n\tduplicate?: boolean,\n  author?: string,\n  showPencil?: boolean\n}\n\nexport class WordHint extends React.Component<WordHintProps> {\n\n  render() {\n  \tconst currentHint = this.props.hint;\n    const color = this.props.color;\n    const styleObj = {\n    \t'color': color\n    };\n    const author = this.props.author;\n    const showPencil = this.props.showPencil || !this.props.hint;\n\n    const classes = ['Word-hint'];\n    if (this.props.duplicate) classes.push('Word-hint-duplicate');\n    if (currentHint && currentHint.length > 20) classes.push('Word-hint-huge');\n    else if (currentHint && currentHint.length > 14) classes.push('Word-hint-long');\n    const extraClasses = classes.join(' ');\n\n    return (\n\t    <div className={extraClasses} style={styleObj}>\n        {currentHint}\n        {showPencil && <PencilAnimation color={color}></PencilAnimation>}\n        {author && <span className=\"Author-tag\">{author}</span>}\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\ntype WordHintInputProps = {\n  submitHint: (hint: string)=>void\n  label?: string,\n  buttonText?: string\n};\ntype WordHintInputState = {\n  value: string, \n};\n\nexport class WordHintInput extends React.Component<WordHintInputProps,WordHintInputState> {\n\n  constructor(props: WordHintInputProps) {\n  \tsuper(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.submitHint = this.submitHint.bind(this);\n    this.keyPressed = this.keyPressed.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({value: event.target.value});\n  }\n\n  submitHint() {\n  \tthis.props.submitHint(this.state.value)\n  \tthis.setState({value: ''});\n  }\n\n  keyPressed(event: React.KeyboardEvent<HTMLInputElement>) {\n  \tif (event.key === \"Enter\") {\n  \t  this.submitHint()\n  \t}\n  }\n\n  render() {\n    return (\n\t    <div className=\"Word-hint-input\">\n\t    \t<TextField required label={this.props.label || 'Wort-Hinweis'}\n\t    \t\tvalue={this.state.value} \n\t    \t\tonChange={this.handleChange} \n\t    \t\tonKeyPress={this.keyPressed} />\n  \t\t\t<Button variant=\"contained\" color=\"primary\" \n  \t\t\t\tdisabled={!this.state.value} \n  \t\t\t\tonClick={this.submitHint}>{this.props.buttonText || 'Hinweis abschicken'}</Button>\n\t    </div>\n    );\n  }\n\n}","import React from 'react';\nimport { IGame } from '../custom.d';\n\ntype GameStatsProps = {\n  game: IGame\n};\n\nexport class GameStats extends React.Component<GameStatsProps> {\n  render() {\n    const game: IGame = this.props.game;\n\n    return (\n      <div className=\"Game-progress\">\n        Runde: {game.round+1}/{game.words.length}, Richtige: {game.correctWords.length}, Falsche: {game.wrongWords.length}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport {WordCard} from './WordCard';\nimport { IGame, IHint, IUser } from '../custom.d';\nimport {WordHint} from './WordHint';\nimport {WordHintInput} from './WordHintInput';\nimport {GameStats} from './GameStats';\n\nimport { GAME_URL } from '../App';\n\nconst SETTING_ID = 'playerId';\n\ntype GameFieldProps = {\n  game: IGame\n};\ntype GameFieldState = {\n\n};\n\nexport class GameField extends React.Component<GameFieldProps,GameFieldState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n  constructor(props: GameFieldProps) {\n    super(props);\n\n    this.submitHint = this.submitHint.bind(this);\n    this.showHints = this.showHints.bind(this);\n    this.guess = this.guess.bind(this);\n\n    this.state = {  };\n  }\n\n  componentDidMount() {\n\n  }\n\n  submitHint(hintWord: string) {\n    const currentUser = getCurrentUser(this.props.game, this.currentUserId);\n    if (!currentUser) return; // TODO\n    const hint: IHint = { hint: hintWord, author: currentUser};\n\n    fetch(`${GAME_URL}/${this.props.game.id}/hint`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({hint})\n    }).catch(console.log)\n  }\n\n  showHints() {\n    fetch(`${GAME_URL}/${this.props.game.id}/showHints`, {\n      method: 'PUT'\n    }).catch(console.log)\n  }\n\n  guess(guess: string) {\n    fetch(`${GAME_URL}/${this.props.game.id}/guess`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({guess})\n    }).catch(console.log)\n  }\n\n  render() {\n    const game: IGame = this.props.game;\n    const currentUser = getCurrentUser(game, this.currentUserId); // TODO\n    const guesser = game.currentGuesser ? game.currentGuesser : { name: '?', id: '?' }; // TODO\n    const isGuesser = currentUser && currentUser.id === guesser.id;\n\n    const isComparingPhase = game.phase === 2 // TODO GamePhase.HintComparing;\n    const isGuessingPhase = game.phase === 3; // GamePhase.Guessing;\n\n    const currentWord = isGuesser ? '?' : (game.currentWord || '');\n    const currentHints = game.hints.map(hintObj => {\n      let hint: string = '?';\n      if (isGuessingPhase) {\n        hint = isGuesser && hintObj.isDuplicate ? 'LEIDER DOPPELT' : hintObj.hint;\n      } else if (isComparingPhase) {\n        if (!isGuesser) hint = hintObj.hint;\n      } else if (currentUser && currentUser.id === hintObj.author.id ) {\n        hint = hintObj.hint;\n      } else if (!hintObj.hint) {\n        hint = ''; // TODO\n      }\n      return <WordHint key={hintObj.author.id} hint={hint} color={hintObj.author.color} duplicate={hintObj.isDuplicate} author={hintObj.author.name}/>\n    });\n\n    return (\n      <div className=\"Game-field\">\n        <div className=\"Current-word\">\n          <GameStats game={game}></GameStats>\n          <WordCard word={currentWord} guesser={guesser.name} color={guesser.color}/>\n          {isGuessingPhase && isGuesser && <WordHintInput submitHint={this.guess} label=\"Rateversuch\" buttonText=\"Jetzt raten\"/>}\n        </div>\n        <div className=\"Current-hints\">\n          {!isGuesser && <WordHintInput submitHint={this.submitHint}/>}\n          <div className=\"WordHint-list\">{currentHints}</div>\n          {isComparingPhase && !isGuesser && <Button variant=\"contained\" color=\"primary\" onClick={this.showHints}>{guesser.name + ' kann losraten!'}</Button>}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction getCurrentUser(game: IGame, currentUserId: string): IUser|undefined {\n  return game.players.find(player => player.id === currentUserId);\n}\n","import React from 'react';\nimport { IUser } from '../custom.d';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nconst ShortUniqueId = require('short-unique-id').default;\n\ntype NewPlayerProps = {\n  addPlayer: (player: IUser) => void,\n  updatePlayer: (player: IUser) => void,\n  name: string,\n  color: string\n}\n\nexport class NewPlayer extends React.Component<NewPlayerProps> {\n\n  constructor(props: NewPlayerProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.setRandomColor = this.setRandomColor.bind(this);\n    this.addPlayer = this.addPlayer.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    let player: IUser = { \n      id: '', \n      name: this.props.name, \n      color: this.props.color \n    };\n    if (event.target.name === 'name') {\n      player.name = event.target.value;\n    } else if (event.target.name === 'color') {\n      player.color = event.target.value; \n    }\n\n    this.props.updatePlayer(player);\n  }\n\n  setRandomColor() {\n    const player: IUser = { \n      id: '', \n      name: this.props.name, \n      color: generateRandomColor()\n    };\n    this.props.updatePlayer(player);\n  }\n\n  addPlayer() {\n    const player: IUser = { \n      id: '', \n      name: this.props.name, \n      color: this.props.color \n    };\n    this.props.addPlayer(player);\n  }\n\n  render() {\n    return (\n      <div className=\"New-player\">\n        <TextField required label=\"Spielername\" \n          name='name'\n          value={this.props.name} \n          onChange={this.handleChange}  />\n        <TextField required label=\"Spielerfarbe\" \n          placeholder=\"Html-Farbcode\"\n          name='color'\n          value={this.props.color} \n          onChange={this.handleChange}  />\n        <Button variant=\"contained\" \n          onClick={this.setRandomColor}>Zufallsfarbe</Button>\n        <Button variant=\"contained\" color=\"primary\" \n          disabled={!this.props.name} \n          onClick={this.addPlayer}>Mitspielen</Button>\n      </div>\n    );\n  }\n\n}\n\nexport function generateRandomColor(): string {\n  const generator = new ShortUniqueId({\n    dictionary: [\n      '0', '1', '2', '3',\n      '4', '5', '6', '7',\n      '8', '9', 'A', 'B',\n      'C', 'D', 'E', 'F',\n    ],\n  });\n  const color = '#' + generator(6);\n  return color;\n}","import React from 'react';\nimport { IGame, IUser } from '../custom.d';\nimport { Button } from '@material-ui/core';\nimport { WordHint } from './WordHint';\nimport { NewPlayer, generateRandomColor } from './NewPlayer';\n\nimport { GAME_URL, SETTING_ID, SETTING_NAME, SETTING_COLOR } from '../App';\n\ntype GameLobbyProps = {\n  game: IGame\n}\ntype GameLobbyState = {\n  name: string,\n  color: string\n}\n\nexport class GameLobby extends React.Component<GameLobbyProps,GameLobbyState> {\n\n  public state: GameLobbyState = { \n    name: localStorage.getItem(SETTING_NAME) || '',\n    color: localStorage.getItem(SETTING_COLOR) || generateRandomColor() || 'black'\n  };\n\n  constructor(props: GameLobbyProps) {\n    super(props);\n\n    this.addPlayer = this.addPlayer.bind(this);\n    this.setPlayerProps = this.setPlayerProps.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  setPlayerProps(player: IUser) {\n    this.setState({\n      name: player.name,\n      color: player.color || ''\n    });\n  }\n\n  addPlayer(player: IUser) {\n    const currentUserId = localStorage.getItem(SETTING_ID) || '';\n    player.id = currentUserId;\n    fetch(`${GAME_URL}/${this.props.game.id}/addPlayer`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({player})\n    }).then(res => res.json())\n      .then((data) => {\n        this.setLocalPlayer(data.player);\n        this.setState({\n          color: generateRandomColor() || 'black',\n          name: ''\n        });\n      })\n      .catch(console.log)\n  }\n\n  setLocalPlayer(player: IUser) {\n    localStorage.setItem(SETTING_ID, player.id);\n    localStorage.setItem(SETTING_NAME, player.name);\n    if (player.color) localStorage.setItem('playerColor', player.color);\n  }\n\n  startGame() {\n    fetch(`${GAME_URL}/${this.props.game.id}/start`, {\n      method: 'PUT'\n    }).then((data) => {\n        // TODO\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const listOfPlayers = this.props.game.players.map(player => (\n      <WordHint key={player.id} hint={player.name} color={player.color}></WordHint>\n    ));\n\n    const currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n    const isHost: boolean = !!currentUserId && this.props.game.host === currentUserId;\n    const isInGame: boolean = !!currentUserId && this.props.game.players.findIndex(player => player.id === currentUserId) > -1;\n\n    return (\n      <div className=\"Game-lobby\">\n        <div className=\"New-player\">\n          { \n            !isInGame && \n            <NewPlayer name={this.state.name} color={this.state.color} \n              updatePlayer={this.setPlayerProps}\n              addPlayer={this.addPlayer}></NewPlayer>\n          }\n          {\n            isHost && \n            <Button variant=\"contained\" color=\"primary\" \n              disabled={this.props.game.players.length < 3} \n              onClick={this.startGame}>Spiel beginnen</Button>\n          }\n        </div>\n        <div className=\"Player-list\">\n          {listOfPlayers}\n          <WordHint hint={this.state.name || '?'} color={this.state.color} showPencil={true}></WordHint>\n        </div>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport {WordCard} from './WordCard';\nimport { IGame } from '../custom.d';\n\ntype GameEndViewProps = {\n  game: IGame\n};\n\nexport class GameEndView extends React.Component<GameEndViewProps> {\n  render() {\n    const game: IGame = this.props.game;\n    const correctWords = game.correctWords.map(word => {\n      return <WordCard key={word} word={word}/>\n    });\n    const wrongWords = game.wrongWords.map(word => {\n      return <WordCard key={word} word={word}/>\n    });\n\n    return (\n      <div className=\"Game-end-view\">\n        <div className=\"Correct-words\">\n          <h2>Richtig ({game.correctWords.length})</h2>\n          {correctWords}\n        </div>\n        <div className=\"Wrong-words\">\n          <h2>Falsch ({game.wrongWords.length})</h2>\n          {wrongWords}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, AppBar, Toolbar, IconButton, Typography, Chip } from '@material-ui/core';\nimport { Home as HomeIcon, AccountCircle as AccountCircleIcon } from '@material-ui/icons';\nimport {GameField} from './GameField';\nimport {GameLobby} from './GameLobby';\nimport {GameEndView} from './GameEndView';\nimport { IGame } from '../custom.d';\n\nimport { GAME_URL } from '../App';\n\nconst SETTING_ID = 'playerId';\nconst SETTING_NAME = 'playerName';\nconst POLLING_INTERVAL = 2000;\n\ntype JustOneProps = {\n  gameId?: string;\n};\ntype JustOneState = {\n  currentGame?: IGame,\n  allGames?: IGame[]\n};\n\nexport class JustOne extends React.Component<JustOneProps,JustOneState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n  allWords = [\n    'Ananas',\n    'Bauernhof',\n    'Clown',\n    'Dartscheibe',\n    'Elefant',\n    'Fussball',\n  ];\n  private _interval: any; // TODO\n\n  constructor(props: JustOneProps) {\n    super(props);\n\n    this.createGame = this.createGame.bind(this);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    if (this.props.gameId) {\n      this.loadGame();\n\n      this._interval = setInterval(this.loadGame.bind(this), POLLING_INTERVAL);\n    } else {\n      this.loadGames();\n\n      this._interval = setInterval(this.loadGames.bind(this), POLLING_INTERVAL);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._interval);\n  }\n\n  loadGame() {\n    let id = this.props.gameId;\n    if (!id) return;\n\n    console.log(GAME_URL);\n\n    fetch(`${GAME_URL}/${id}`)\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({\n          currentGame: data.game\n        });\n      })\n      .catch(console.log)\n  }\n\n  loadGames() {\n    fetch(`${GAME_URL}/all`)\n      .then(res => res.json())\n      .then((data) => {\n        let games = data.games;\n        games = games.filter((game: IGame) => {\n          return game.phase === 0 || (this.currentUserId && game.players.findIndex(p => p.id === this.currentUserId) > -1);\n        });\n        this.setState({\n          allGames: games\n        });\n      })\n      .catch(console.log)\n  }\n\n  createGame() {\n    const game: IGame = createGame();\n    game.words = this.allWords;\n\n    fetch(`${GAME_URL}/add`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({game})\n    }).then((data) => {\n        console.log(data);\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const currentGame: IGame|undefined = this.state.currentGame;\n    const currentUserName: string|null = localStorage.getItem(SETTING_NAME);\n\n    let optionalContent: React.ReactElement;\n    let gameList;\n    if (currentGame) {\n      if (currentGame.phase === 0) { // TODO GamePhase.Init\n        optionalContent = <GameLobby game={currentGame}></GameLobby>\n      } else if (currentGame.phase === 4) { // TODO GamePhase.End\n        optionalContent = (<div>\n          <Button variant=\"contained\" color=\"primary\" onClick={this.createGame}>Neues Spiel</Button>\n          <GameEndView game={currentGame}></GameEndView>\n        </div>);\n      } else {\n        optionalContent = <GameField game={currentGame}></GameField>;\n      }\n    } else {\n      if (this.state.allGames) gameList = this.state.allGames.map(game => (\n        <Link key={game.id} to={`/${game.id}`}>{`Spiele ${game.id}`}</Link>\n      ));\n      optionalContent = <Button variant=\"contained\" color=\"primary\" onClick={this.createGame}>Neues Spiel</Button>;\n    }\n\n    return (\n      <div>\n        <AppBar position=\"sticky\">\n          <Toolbar>\n            <Link to=\"/\" className=\"ButtonLink\">\n              <IconButton edge=\"start\" color=\"inherit\" aria-label=\"home\">\n                <HomeIcon />\n              </IconButton>\n            </Link>\n            <Typography variant=\"h2\" className=\"appTitle\">\n              Nur ein Wort!\n            </Typography>\n            {currentUserName && <Chip label={currentUserName} icon={<AccountCircleIcon />}/>}\n          </Toolbar>\n        </AppBar>\n        {optionalContent}\n        {gameList}\n      </div>\n    );\n  }\n}\n\nfunction createGame(): IGame {\n    return {\"id\":\"\", \"name\": \"\", \"words\":[],\"players\":[],\"host\":\"1\",\"round\":0,\"phase\":0,\"hints\":[],\"correctWords\":[],\"wrongWords\":[]};\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport './App.scss';\nimport {JustOne} from './just-one/JustOne';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { teal, pink } from '@material-ui/core/colors';\n\nconst isProd = window.location.hostname === 'justone.okj.name';\nconst apiPort = isProd ? ':9001' : ':9000';\nexport const API_URL = window.location.protocol + '//' + window.location.hostname + apiPort + '/api';\nexport const GAME_URL = API_URL + '/games';\nexport const SETTING_ID = 'playerId';\nexport const SETTING_NAME = 'playerName';\nexport const SETTING_COLOR = 'playerColor';\nconst DEFAULT_PRIMARY_COLOR = '#43a047';\nconst DEFAULT_SECONDARY_COLOR = '#3949ab';\n\nfunction App() {\n  const primaryColor = localStorage.getItem(SETTING_COLOR) || DEFAULT_PRIMARY_COLOR;\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: primaryColor\n      },\n      secondary: {\n        main: DEFAULT_SECONDARY_COLOR,\n      },  \n    }\n  });\n\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n      <div className=\"App\">\n        <Switch>\n            <Route path=\"/:gameId\" component={(props: RouteComponentProps<any>) => <JustOne gameId={props.match.params.gameId}/>} />\n            <Route children={<JustOne/>} />\n          </Switch> \n      </div>  \n    </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}