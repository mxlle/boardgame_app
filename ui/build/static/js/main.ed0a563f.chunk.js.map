{"version":3,"sources":["shared/constants.tsx","custom.d.ts","common/UserConfig.tsx","common/HeaderBar.tsx","i18n.tsx","shared/functions.tsx","just-one/GameList.tsx","common/ActionButton.tsx","shared/apiFunctions.tsx","just-one/JustOneHome.tsx","just-one/components/WordHintInput.tsx","common/PencilAnimation.tsx","just-one/components/WordHint.tsx","common/ColorPicker.tsx","common/NewPlayer.tsx","just-one/components/RoundSelector.tsx","just-one/GameLobby.tsx","just-one/components/WordCard.tsx","just-one/components/WordAdder.tsx","just-one/GamePreparation.tsx","just-one/GameEndView.tsx","just-one/components/GameStats.tsx","just-one/gamePhases/HintWritingView.tsx","just-one/gamePhases/HintComparingView.tsx","just-one/gamePhases/GuessingView.tsx","just-one/gamePhases/SolutionView.tsx","just-one/JustOneGame.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ThemeMode","apiPort","window","location","hostname","GAME_URL","protocol","GamePhase","UserConfig","this","props","tKey","open","onClose","selectedValue","possibleValues","Dialog","DialogTitle","Trans","i18nKey","List","map","value","ListItem","button","onClick","handleListItemClick","val","key","selected","ListItemText","primary","React","Component","HeaderBar","i18n","useTranslation","userTheme","applyUserTheme","useState","themeConfigOpen","setThemeConfigOpen","languageConfigOpen","setLanguageConfigOpen","language","setLanguage","anchorEl","setAnchorEl","openMenu","event","target","currentTarget","handleMenuClose","currentUserName","localStorage","getItem","availableThemes","AUTO","BRIGHT","DARK","AppBar","position","Toolbar","to","className","IconButton","edge","color","aria-label","Home","Typography","variant","Button","startIcon","AccountCircle","Menu","keepMounted","Boolean","MenuItem","ListItemIcon","BrightnessMedium","Translate","theme","lng","changeLanguage","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","initImmediate","interpolation","escapeValue","getCurrentUserId","userId","shortid","characters","setItem","getCurrentUserInGame","game","getUserInGame","players","find","player","id","setDocumentTitle","gameName","document","title","t","checkPrevResult","showSnackbar","wordIndex","End","phase","words","length","round","wordResult","context","prevWord","correctWords","reverse","wrIndex","findIndex","wr","word","wrongWords","trim","toLowerCase","guess","preventDuplicate","GameList","currentUserId","allGames","deleteGame","newGames","filter","Init","onGoingGames","includes","doneGames","createListItem","playersString","p","name","join","component","Link","secondary","host","ListItemSecondaryAction","newGamesList","onGoingGamesList","doneGamesList","Paper","ActionButton","children","loading","CircularProgress","size","loadGames","a","_get","games","loadGame","createGame","_post","endpoint","Promise","resolve","reject","fetch","method","headers","_getAuthHeader","then","data","error","console","addPlayer","_put","updatePlayer","startPreparation","wordsPerPlayer","resolveRound","correct","res","json","body","JSON","stringify","JustOneHome","_interval","_isMounted","bind","handleChange","triggerDeleteGame","state","newGameName","gamesLoading","clearInterval","setState","enqueueSnackbar","gameId","g","action","Fragment","closeSnackbar","_","reason","getInitialGameName","playerId","history","push","TextField","label","onChange","userName","withRouter","withSnackbar","WordHintInput","submitHint","keyPressed","onKeyPress","disabled","Send","PencilAnimation","styleObj1","backgroundColor","styleObj2","borderTopColor","style","WordHint","hint","author","showPencil","showCheck","showCross","showInput","showDuplicateToggle","toggleDuplicate","duplicate","styleObj","doShowPencil","isDuplicate","classes","extraClasses","undefined","Checkbox","icon","Mood","checkedIcon","MoodBad","checked","allColors","getRandomColor","Math","floor","random","ColorPicker","select","colorButtons","NewPlayer","setColor","currentPlayer","required","RoundSelector","numOfPlayers","options","i","wordCount","roundCount","count","disableBackdropClick","GameLobby","roundDialogOpen","setPlayerProps","selectNumRounds","shareGame","api","resultPlayer","setLocalPlayer","setTheme","playerAdded","gameUrl","href","navigator","share","text","url","clipboard","writeText","e","isHost","isInGame","listOfPlayers","newPlayerName","newPlayerColor","tOptions","WordCard","guesserText","originalWord","guesser","isGuesser","guessedRight","guesserName","borderColor","WordAdder","index","parseInt","substr","newWords","numOfWords","some","add","wordFields","placeholder","enterDisabled","GamePreparation","addWords","enteredWords","numWordsPerPlayer","myWords","allMyWordsEntered","wordsEntered","myWordCards","GameEndView","shownPrevResult","GameStats","gamePhase","roundHostName","roundHost","currentGuesser","HintWriting","slice","HintComparing","Guessing","Solution","rightCount","wrongCount","HintWritingView","shownMessage","currentUser","currentWord","currentHints","hints","hintObj","hintIsMine","authorName","showHint","HintComparingView","showHints","hintIndex","isRoundHost","GuessingView","SolutionView","shownResult","currentGuess","solutionButton2","solutionButton1","JustOneGame","setInterval","currentGame","gameContent","gameStats","Preparation","App","userColor","setUserColor","setUserTheme","prefersDarkMode","useMediaQuery","primaryColor","startsWith","useMemo","createMuiTheme","palette","main","type","classNames","ThemeProvider","fallback","maxSnack","anchorOrigin","vertical","horizontal","square","elevation","path","match","params","Loader","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ed0a563f.chunk.js","sourcesContent":["// api url\nconst isProd = window.location.hostname === 'justone.okj.name';\nconst apiPort = isProd ? '' : ':9000';\nexport const API_URL = window.location.protocol + '//' + window.location.hostname + apiPort + '/api';\nexport const GAME_URL = API_URL + '/games';\n\n// localStorage keys\nexport const SETTING_ID = 'playerId';\nexport const SETTING_NAME = 'playerName';\nexport const SETTING_COLOR = 'playerColor';\nexport const SETTING_THEME = 'darkTheme';\n\n// app content and theming\nexport const DEFAULT_NUM_WORDS: number = 2; // Two words per player\nexport const DEFAULT_PRIMARY_COLOR = '#43a047';\nexport const DEFAULT_SECONDARY_COLOR = '#d32f2f'; // also error dark\nexport enum ThemeMode {\n    AUTO = 'automatisch',\n    BRIGHT = 'hell',\n    DARK = 'dunkel'\n}","// custom module declarations\n\n// TODO \nexport interface IUser {\n    id: string;\n    name: string;\n    color?: string;\n    enteredWords?: string[];\n}\n\nexport interface IHint {\n    hint: string;\n    author: string;\n    isDuplicate?: boolean\n}\n\nexport enum GamePhase {\n    Init,\n    Preparation,\n    HintWriting,\n    HintComparing,\n    Guessing,\n    Solution,\n    End\n}\n\nexport interface WordResult {\n    word: string;\n    guess: string;\n}\n\nexport interface IGame {\n    id: string;\n    name: string;\n    words: string[];\n    players: IUser[];\n    host: string; // hostId\n    wordsPerPlayer: number;\n\n    round: number;\n    phase: GamePhase;\n    currentWord?: string;\n    currentGuesser?: string;\n    currentGuess?: string;\n    guessedRight?: boolean;\n    roundHost?: string;\n    hints: IHint[];\n    correctWords: WordResult[];\n    wrongWords: WordResult[];\n}","import React from 'react';\nimport { List, ListItem, ListItemText, DialogTitle, Dialog } from '@material-ui/core';\nimport { Trans } from 'react-i18next';\n\ntype UserConfigProps = {\n    tKey: string,\n    onClose: (value: string)=>void,\n    selectedValue: string,\n    possibleValues: {val: string, tKey: string}[],\n    open: boolean\n};\n\nexport class UserConfig extends React.Component<UserConfigProps> {\n    render() {\n        const { tKey, open, onClose, selectedValue, possibleValues } = this.props;\n\n        const handleClose = () => {\n            onClose(selectedValue);\n        };\n\n        const handleListItemClick = (value: string) => {\n            onClose(value);\n        };\n\n        return (\n            <Dialog onClose={handleClose} open={open}>\n                <DialogTitle>\n                    <Trans i18nKey={tKey}>Einstellung</Trans>\n                </DialogTitle>\n                <List>\n                    {possibleValues.map((value: {val: string, tKey: string}) => (\n                        <ListItem button onClick={() => handleListItemClick(value.val)} key={value.val} selected={selectedValue === value.val}>\n                            <ListItemText primary={<Trans i18nKey={value.tKey}>{value.val}</Trans>} />\n                        </ListItem>\n                    ))}\n                </List>\n            </Dialog>\n        );\n    }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { AppBar, Toolbar, IconButton, Typography, Button, Menu, MenuItem, ListItemIcon } from '@material-ui/core';\nimport { \n    Home as HomeIcon, \n    AccountCircle as AccountCircleIcon, \n    Translate as TranslateIcon, \n    BrightnessMedium as BrightnessMediumIcon \n} from '@material-ui/icons';\n\nimport { SETTING_NAME, ThemeMode } from '../shared/constants';\n\nimport { UserConfig } from '../common/UserConfig';\n\ntype HeaderBarProps = {\n    userTheme: string,\n    applyUserTheme: (color: string)=>void\n};\n\nexport const HeaderBar = (props: HeaderBarProps) => {\n    const { i18n } = useTranslation();\n    const { userTheme, applyUserTheme } = props;\n    const [themeConfigOpen, setThemeConfigOpen] = React.useState(false);\n    const [languageConfigOpen, setLanguageConfigOpen] = React.useState(false);\n    const [language, setLanguage] = React.useState(i18n.language);\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const openMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\n        const target: any = event.currentTarget; // TODO \n        setAnchorEl(target);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n    const changeLanguage = (lng: string) => {\n        setLanguage(lng);\n        i18n.changeLanguage(lng);\n    };\n\n    const currentUserName: string|null = localStorage.getItem(SETTING_NAME);\n\n    const availableThemes = [\n        { val: ThemeMode.AUTO, tKey: 'THEMEPICK.AUTO' },\n        { val: ThemeMode.BRIGHT, tKey: 'THEMEPICK.BRIGHT' },\n        { val: ThemeMode.DARK, tKey: 'THEMEPICK.DARK' }\n    ];\n\n    const availableLanguages = [\n        { val: 'de', tKey: 'LANGPICK.DE' },\n        { val: 'en', tKey: 'LANGPICK.EN' }\n    ];\n\n    return (\n        <AppBar position=\"sticky\">\n            <Toolbar>\n                <Link to=\"/\" className=\"ButtonLink\">\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"home\">\n                        <HomeIcon />\n                    </IconButton>\n                </Link>\n                <Typography variant=\"h2\" className=\"appTitle\">\n                    <Trans i18nKey=\"APP_TITLE\">Nur ein Wort!</Trans>\n                </Typography>\n                { \n                    currentUserName ? \n                    <Button onClick={openMenu} className=\"Account-button\" color=\"inherit\" startIcon={<AccountCircleIcon />}>\n                        {currentUserName}\n                    </Button> : \n                    <IconButton onClick={openMenu} edge=\"end\" color=\"inherit\">\n                        <AccountCircleIcon />\n                    </IconButton>\n                }\n                <Menu\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleMenuClose}\n                >\n                    <MenuItem onClick={()=>{setThemeConfigOpen(true);handleMenuClose();}}>\n                        <ListItemIcon><BrightnessMediumIcon/></ListItemIcon>\n                        <Trans i18nKey=\"THEMEPICK.HEADING\">Nachtmodus</Trans>\n                    </MenuItem>\n                    <MenuItem onClick={()=>{setLanguageConfigOpen(true);handleMenuClose();}}>\n                        <ListItemIcon><TranslateIcon/></ListItemIcon>\n                        <Trans i18nKey=\"LANGPICK.HEADING\">Sprache</Trans>\n                    </MenuItem>\n                </Menu>\n                <UserConfig \n                    tKey=\"THEMEPICK.HEADING\"\n                    open={themeConfigOpen} \n                    onClose={(theme: string) => { applyUserTheme(theme); setThemeConfigOpen(false); }}\n                    selectedValue={userTheme} \n                    possibleValues={availableThemes}\n                ></UserConfig>\n                <UserConfig \n                    tKey=\"LANGPICK.HEADING\"\n                    open={languageConfigOpen} \n                    onClose={(lng: string) => { changeLanguage(lng); setLanguageConfigOpen(false); }}\n                    selectedValue={language} \n                    possibleValues={availableLanguages}\n                ></UserConfig>\n            </Toolbar>\n        </AppBar>\n    );    \n}\n\nexport default HeaderBar;\n\n","import i18n from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\ni18n\n    // load translation using http -> see /public/locales\n    // learn more: https://github.com/i18next/i18next-http-backend\n    .use(Backend)\n    // detect user language\n    // learn more: https://github.com/i18next/i18next-browser-languageDetector\n    .use(LanguageDetector)\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n        fallbackLng: 'de',\n        debug: true,\n        initImmediate: false,\n\n        interpolation: {\n            escapeValue: false, // not needed for react as it escapes by default\n        },\n    });\n\n// saveMissing: true, // TODO\n\n\nexport default i18n;","import { SETTING_ID } from './constants';\nimport { IGame, IUser, WordResult, GamePhase } from '../custom.d';\nimport shortid from 'shortid';\nimport i18n from '../i18n'; \n\nexport function getCurrentUserId() {\n\tlet userId = localStorage.getItem(SETTING_ID) || '';\n\tif (!userId) {\n\t\tuserId = generateId();\n\t\tlocalStorage.setItem(SETTING_ID, userId);\n\t}\n\treturn userId;\n}\n\nexport function getCurrentUserInGame(game: IGame): IUser|undefined {\n    return getUserInGame(game, getCurrentUserId());\n}\n\nexport function getUserInGame(game: IGame, userId?: string): IUser|undefined {\n    return game.players.find((player: IUser) => player.id === userId);\n}\n\nexport function generateId() {\n\tshortid.characters('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZüÜ');\n\treturn shortid();\n}\n\nexport function setDocumentTitle(gameName?: string) {\n\tconst appTitleFallback = 'Nur ein Wort!';\n    if (gameName) {\n        document.title = `${i18n.t('APP_TITLE', appTitleFallback)} - ${gameName}`;\n    } else {\n        document.title = i18n.t('APP_TITLE', appTitleFallback);\n    }\n}\n\nexport function checkPrevResult(game: IGame, showSnackbar: any, onClose: ()=>void) {\n\tconst wordIndex = GamePhase.End === game.phase ? game.words.length-1 : game.round-1;\n    if (wordIndex >= 0) {\n        const prevWord = game.words[wordIndex];\n        const correctWords = [...game.correctWords].reverse();\n        let wrIndex: number = correctWords.findIndex((wr: WordResult) => wr.word === prevWord);\n        let wordResult: WordResult, context: string, variant: 'success'|'error';\n        if (wrIndex > -1) {\n            wordResult = correctWords[wrIndex];\n            context = 'CORRECT';\n            variant = 'success';\n        } else {\n            wordResult = game.wrongWords[game.wrongWords.length-1];\n            context = 'WRONG';\n            variant = 'error';\n        }\n        if (wordResult.word.trim().toLowerCase() !== wordResult.guess.trim().toLowerCase()) {\n            showSnackbar(i18n.t('GAME.MESSAGE.PREV_RESULT', 'Runde abgeschlossen', { context: context, word: wordResult.guess }), {\n                variant: variant,\n                preventDuplicate: true,\n                onClose: onClose\n            }); \n        }\n    }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n    List, \n    ListItem, \n    ListItemText, \n    ListItemSecondaryAction, \n    IconButton,\n    Paper,\n    Typography\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Trans } from 'react-i18next';\nimport { IGame, GamePhase } from '../custom.d';\n\nimport { SETTING_ID, SETTING_NAME } from '../shared/constants';\nimport { getCurrentUserInGame } from '../shared/functions';\n\ntype GameListProps = {\n    allGames: IGame[],\n    deleteGame: (gameId:string)=>void,\n};\n\ntype GameListState = {\n}\n\nexport class GameList extends React.Component<GameListProps,GameListState> {\n    public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n    public currentUserName: string = localStorage.getItem(SETTING_NAME) || '';\n\n    render() {\n        const {allGames,deleteGame} = this.props;\n        const newGames = allGames.filter(game => game.phase === GamePhase.Init && !getCurrentUserInGame(game));\n        const onGoingGames = allGames.filter(game => \n            ![GamePhase.Init,GamePhase.End].includes(game.phase) || (game.phase === GamePhase.Init && !!getCurrentUserInGame(game))\n        );\n        const doneGames = allGames.filter(game => game.phase === GamePhase.End);\n\n        const createListItem = (game: IGame) => {\n            const playersString = game.players.map(p => p.name).join(', ') || '-';\n\n            return (\n                <ListItem key={game.id} className=\"GameListItem\"\n                    {...{ to: `/${game.id}` }}\n                    component={Link}\n                    button\n                >\n                    <ListItemText \n                        id={game.id} \n                        primary={`${game.name || game.id}`}\n                        secondary={<Trans i18nKey=\"HOME.GAME_LIST.PLAYERS\">Spieler: {{playersString}}</Trans>} \n                    />\n                    {\n                        this.currentUserId === game.host && (\n                            <ListItemSecondaryAction>\n                                <IconButton onClick={() => deleteGame(game.id)}>\n                                    <DeleteIcon/>\n                                </IconButton>\n                            </ListItemSecondaryAction>\n                        )\n                    }\n                </ListItem>\n            );\n        }\n\n        const newGamesList = newGames.map(createListItem);\n        const onGoingGamesList = onGoingGames.map(createListItem);\n        const doneGamesList = doneGames.map(createListItem);\n\n        return (\n            <div className=\"GameList\">\n                {\n                    onGoingGamesList.length > 0 && (\n                        <Paper>\n                            <Typography variant=\"h5\"><Trans i18nKey=\"HOME.GAME_LIST.ONGOING\">Meine laufenden Spiele</Trans></Typography>\n                            <List>\n                                {onGoingGamesList}\n                            </List> \n                        </Paper>\n                    )\n                }\n                {\n                    newGamesList.length > 0 && (\n                        <Paper>\n                            <Typography variant=\"h5\"><Trans i18nKey=\"HOME.GAME_LIST.NEW\">Neue Spiele</Trans></Typography>\n                            <List>\n                                {newGamesList}\n                            </List> \n                        </Paper>\n                    )\n                }\n                {\n                    doneGamesList.length > 0 && (\n                        <Paper>\n                            <Typography variant=\"h5\"><Trans i18nKey=\"HOME.GAME_LIST.DONE\">Meine beendeten Spiele</Trans></Typography>\n                            <List>\n                                {doneGamesList}\n                            </List> \n                        </Paper>\n                    )\n                }\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\ntype ActionButtonProps = {\n\tloading: boolean;\n    children: React.ReactNode\n}\n\nexport class ActionButton extends React.Component<ActionButtonProps> {\n\n    render() {\n    \tconst { children, loading } = this.props;\n\n        return (\n            <div className=\"buttonWithLoading\">\n                { children }\n                { loading && <CircularProgress size={24} className=\"loadingInButton\" /> }\n            </div>\n        );\n    }\n\n}","import { GAME_URL } from './constants';\nimport { getCurrentUserId } from './functions';\nimport { IGame, IUser } from '../custom.d';\n\nexport async function loadGames(): Promise<IGame[]> {\n    return (await _get('all')).games || [];\n}\n\nexport async function loadGame(id: string): Promise<IGame> {\n    return (await _get(id)).game;\n}\n\nexport async function createGame(game: IGame): Promise<{id:string,playerId:string}> {\n    return _post('add', {game});\n}\n\nexport function deleteGame(id: string) {\n    return _delete(`delete/${id}`);\n}\n\nexport async function addPlayer(id: string, player: IUser): Promise<IUser> {\n    return (await _put(`${id}/addPlayer`, {player})).player;\n}\n\nexport async function updatePlayer(id: string, player: IUser): Promise<IUser> {\n    return (await _put(`${id}/updatePlayer`, {player})).player;\n}\n\nexport function startPreparation(id: string, wordsPerPlayer: number) {\n    return _put(`${id}/startPreparation`, {wordsPerPlayer});\n}\n\nexport function submitHint(id: string, hint: string) {\n    return _put(`${id}/hint`, {hint});\n}\n\nexport function toggleDuplicate(id: string, hintIndex: number) {\n    return _put(`${id}/toggleDuplicateHint`, {hintIndex});\n}\n\nexport function showHints(id: string) {\n    return _put(`${id}/showHints`);\n}\n\nexport function guess(id: string, guess: string) {\n    return _put(`${id}/guess`, {guess});\n}\n\nexport function resolveRound(id: string, correct: boolean) {\n    return _put(`${id}/resolve`, {correct});\n}\n\n\nfunction _get(endpoint: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n        fetch(`${GAME_URL}/${endpoint}`, {\n            method: 'GET',\n            headers: {\n                ..._getAuthHeader()\n            }\n        })\n            .then(res => res.json())\n            .then((data) => {\n                resolve(data);\n            }, (error) => {\n                console.error(error);\n                reject(error);\n            });\n    });\n}\n\nfunction _post(endpoint: string, data: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n        fetch(`${GAME_URL}/${endpoint}`, {\n            method: 'POST',\n            headers: {\n                ..._getAuthHeader(),\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then((data) => {\n                resolve(data);\n            }, (error) => {\n                console.error(error);\n                reject(error);\n            })\n    });\n}\n\nfunction _put(endpoint: string, data?: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n        fetch(`${GAME_URL}/${endpoint}`, {\n            method: 'PUT',\n            headers: {\n                ..._getAuthHeader(),\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => {\n                res.json().then(data => {\n                    resolve(data);\n                }, error => {\n                    resolve();\n                });\n            }, (error) => {\n                console.error(error);\n                reject(error);\n            })\n    });\n}\n\nfunction _delete(endpoint: string) {\n    return new Promise((resolve, reject) => {\n        fetch(`${GAME_URL}/${endpoint}`, { \n            method: 'DELETE',\n            headers: {\n                ..._getAuthHeader()\n            }\n        })\n            .then((data) => {\n                resolve();\n            }, (error) => {\n                console.error(error);\n                reject(error);\n            })\n    });   \n}\n\nfunction _getAuthHeader() {\n    return {\n        'Authorization': getCurrentUserId()\n    }\n}","import React from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\nimport { Button, TextField } from '@material-ui/core';\nimport { Trans } from 'react-i18next';\nimport { withSnackbar, WithSnackbarProps, CloseReason } from 'notistack';\nimport { IGame } from '../custom.d';\nimport { GameList } from './GameList';\nimport { ActionButton } from '../common/ActionButton';\n\nimport { SETTING_ID, SETTING_NAME, DEFAULT_NUM_WORDS } from '../shared/constants';\nimport { setDocumentTitle } from '../shared/functions';\nimport { loadGames, createGame, deleteGame } from '../shared/apiFunctions';\nimport i18n from '../i18n';\n\ntype JustOneHomeProps = {}&WithSnackbarProps&RouteComponentProps;\ntype JustOneHomeState = {\n    newGameName: string|null,\n    allGames: IGame[],\n    gamesLoading: boolean\n};\n\nclass JustOneHome extends React.Component<JustOneHomeProps,JustOneHomeState> {\n    public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n    public currentUserName: string = localStorage.getItem(SETTING_NAME) || '';\n\n    private _interval: number|undefined;\n    private _isMounted: boolean = false;\n\n    constructor(props: JustOneHomeProps) {\n        super(props);\n\n        this.createGame = this.createGame.bind(this);\n        this.loadGames = this.loadGames.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.triggerDeleteGame = this.triggerDeleteGame.bind(this);\n        this.deleteGame = this.deleteGame.bind(this);\n\n        this.state = { allGames: [], newGameName: null, gamesLoading: true };\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        setDocumentTitle();\n\n        this.loadGames();\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        clearInterval(this._interval);\n    }\n\n    async loadGames() {\n        this.setState({\n            gamesLoading: true\n        });\n        try {\n            let games = await loadGames();\n            if (!this._isMounted) return;     \n            this.setState({\n                allGames: games,\n                gamesLoading: false\n            });\n        } catch(e) {\n            this.props.enqueueSnackbar(i18n.t('ERROR.LOAD_GAMES', 'Fehler'), { variant: 'error' });\n            this.setState({\n                gamesLoading: false\n            });\n        }\n    }\n\n    triggerDeleteGame(gameId: string) {\n        this.setState((state) => {\n            return {\n                allGames: state.allGames.filter(g => g.id !== gameId)\n            }\n        });\n        const action = (key: string) => (\n            <React.Fragment>\n                <Button onClick={() => { this.props.closeSnackbar(key); this.loadGames(); }} color=\"inherit\">\n                    <Trans i18nKey=\"COMMON.UNDO\">Rückgängig</Trans>\n                </Button>\n            </React.Fragment>\n        );\n        this.props.enqueueSnackbar(i18n.t('HOME.DELETED_GAME', 'Spiel gelöscht'), {\n            action: action,\n            onClose: (_: any, reason: CloseReason) => {\n                if (reason !== 'instructed') {\n                    this.deleteGame(gameId);\n                }\n            }\n        });\n    }\n\n    async deleteGame(gameId: string) {\n        await deleteGame(gameId);\n        this.loadGames();\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({newGameName: event.target.value});\n    }\n\n    async createGame() {\n        const game: IGame = emptyGame();\n        let gameName = this.state.newGameName;\n        if (gameName === null) gameName = getInitialGameName(this.currentUserName);\n        game.name = gameName;\n\n        try {\n            const {id, playerId} = await createGame(game);\n\n            if(this.currentUserId !== playerId) {\n                localStorage.setItem(SETTING_ID, playerId);\n            }\n\n            this.props.history.push('/'+id);\n\n        } catch(e) {\n            this.props.enqueueSnackbar(i18n.t('ERROR.CREATE_GAME', 'Fehler'), { variant: 'error' });\n        }\n    }\n\n    render() {\n        let {newGameName, allGames, gamesLoading} = this.state;\n        if (newGameName === null) newGameName = getInitialGameName(this.currentUserName);\n\n        return (\n            <div className=\"JustOneHome\">\n                <TextField label={<Trans i18nKey=\"HOME.GAME_NAME\">Spielname</Trans>} value={newGameName} onChange={this.handleChange} />\n                <Button variant=\"contained\" color=\"primary\" onClick={this.createGame}>\n                    <Trans i18nKey=\"HOME.NEW_GAME\">Neues Spiel</Trans>\n                </Button>\n                <ActionButton loading={gamesLoading}>\n                    <Button variant=\"contained\" onClick={this.loadGames}>\n                        <Trans i18nKey=\"HOME.LOAD_GAMES\">Spiele aktualisieren</Trans>\n                    </Button>\n                </ActionButton>\n                <GameList allGames={allGames} deleteGame={this.triggerDeleteGame} />\n            </div>\n        );\n    }\n}\n\nfunction getInitialGameName(userName?: string) {\n    return userName ? i18n.t('HOME.NEW_GAME_PERSONAL', 'Neues Spiel', {name: userName}) : i18n.t('HOME.NEW_GAME', 'Neues Spiel');\n}\n\nfunction emptyGame(): IGame {\n    return {\"id\":\"\", \"name\": \"\", \"words\":[],\"players\":[],\"host\":\"\",\"wordsPerPlayer\":DEFAULT_NUM_WORDS,\"round\":0,\"phase\":0,\"hints\":[],\"correctWords\":[],\"wrongWords\":[]};\n}\n\nexport default withRouter(withSnackbar(JustOneHome));","import React from 'react';\nimport i18n from '../../i18n';\nimport { IconButton } from '@material-ui/core';\nimport { Send as SendIcon } from '@material-ui/icons';\nimport TextField from '@material-ui/core/TextField';\n\ntype WordHintInputProps = {\n    submitHint: (hint: string)=>void\n    label?: string\n};\ntype WordHintInputState = {\n    value: string, \n};\n\nexport class WordHintInput extends React.Component<WordHintInputProps,WordHintInputState> {\n\n    constructor(props: WordHintInputProps) {\n    \tsuper(props);\n        this.state = {value: ''};\n\n        this.handleChange = this.handleChange.bind(this);\n        this.submitHint = this.submitHint.bind(this);\n        this.keyPressed = this.keyPressed.bind(this);\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({value: event.target.value});\n    }\n\n    submitHint() {\n    \tthis.props.submitHint(this.state.value)\n    \tthis.setState({value: ''});\n    }\n\n    keyPressed(event: React.KeyboardEvent<HTMLInputElement>) {\n    \tif (event.key === \"Enter\") {\n    \t    this.submitHint()\n    \t}\n    }\n\n    render() {\n        return (\n\t        <div className=\"Word-hint-input\">\n\t        \t<TextField label={this.props.label || i18n.t('GAME.COMMON.ENTER_HINT', 'Hinweis eingeben')}\n\t        \t\tvalue={this.state.value} \n\t        \t\tonChange={this.handleChange} \n\t        \t\tonKeyPress={this.keyPressed} />\n    \t\t\t<IconButton color=\"primary\" \n    \t\t\t\tdisabled={!this.state.value} \n    \t\t\t\tonClick={this.submitHint}>\n                    <SendIcon></SendIcon>\n                </IconButton>\n\t        </div>\n        );\n    }\n\n}","import React from 'react';\n\ntype PencilAnimationProps = {\n\tcolor?: string,\n}\n\nexport class PencilAnimation extends React.Component<PencilAnimationProps> {\n\n    render() {\n        const styleObj1 = {\n        \tbackgroundColor: this.props.color,\n        };\n        const styleObj2 = {\n        \tborderTopColor: this.props.color,\n        };\n\n        return (\n\t    <div className=\"pencil\">\n                <div className=\"body\" style={styleObj1}></div>\n                <div className=\"nib\" style={styleObj2}></div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { WordHintInput } from './WordHintInput';\nimport { PencilAnimation } from '../../common/PencilAnimation';\nimport { Checkbox, Paper } from '@material-ui/core';\nimport { Mood as MoodIcon, MoodBad as MoodBadIcon } from '@material-ui/icons';\n\ntype WordHintProps = {\n\thint?: string,\n\tcolor?: string,\n\tduplicate?: boolean,\n    author?: string,\n    showPencil?: boolean,\n    showCheck?: boolean,\n    showCross?: boolean,\n    showInput?: boolean,\n    submitHint?: (hint:string)=>void,\n    showDuplicateToggle?: boolean,\n    toggleDuplicate?: ()=>void\n}\n\nexport class WordHint extends React.Component<WordHintProps> {\n\n    render() {\n        const { hint, color, author, \n                showPencil, showCheck, showCross, \n                showInput, submitHint,\n                showDuplicateToggle, toggleDuplicate, duplicate \n        } = this.props;\n        const styleObj = {\n        \t'color': color,\n            'borderColor': color\n        };\n        const doShowPencil = showPencil || !this.props.hint;\n        const isDuplicate = duplicate || false;\n\n        const classes = ['Word-hint'];\n        if (doShowPencil) classes.push('Word-hint-writing');\n        if (isDuplicate) classes.push('Word-hint-duplicate');\n        if (showCross) classes.push('Word-hint-showCross');\n        if (hint && hint.length > 20) classes.push('Word-hint-huge');\n        else if (hint && hint.length > 14) classes.push('Word-hint-long');\n        const extraClasses = classes.join(' ');\n\n        if (showInput && submitHint) {\n            return (\n                <Paper className={extraClasses} style={styleObj}>\n                    <WordHintInput submitHint={submitHint}/>\n                    {author && <span className=\"Author-tag\">{author}</span>}\n                </Paper>\n            );\n        } else {\n            return (\n                <Paper className={extraClasses} style={isDuplicate?undefined:styleObj}>\n                    {!showCheck && !showCross && hint}\n                    {showCheck && !showCross && <span className=\"Done-icon\">✓</span>}\n                    {showCross && <span className=\"Invalid-icon\">✗</span>}\n                    {doShowPencil && <PencilAnimation color={color}></PencilAnimation>}\n                    {showDuplicateToggle && toggleDuplicate && (\n                        <Checkbox className=\"Duplicate-toggle\" \n                            icon={<MoodIcon />} checkedIcon={<MoodBadIcon />} \n                            checked={isDuplicate}\n                            onChange={()=>toggleDuplicate()}/>\n                    )}\n                    {author && <span className=\"Author-tag\" style={styleObj}>{author}</span>}\n                </Paper>\n            );\n        }\n\n        \n    }\n\n}","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\n\nexport const allColors: string[] = [\n    '#e51235',\n    '#d81b60',\n    '#8e24aa',\n    '#6e45c1',\n    '#4959cc',\n    '#1e88e5',\n    '#039be5',\n    '#00acc1',\n    '#00897b',\n    '#43a047',\n    '#7cb342',\n    '#c0ca33',\n    '#ffc215',\n    '#ffab00',\n    '#ff6d00',\n    '#f4511e'\n];\n\nexport function getRandomColor(color?: string|null): string {\n    if (!color || !allColors.includes(color)) {\n        return allColors[Math.floor(Math.random()*allColors.length)];\n    } else {\n        return color;\n    }\n}\n\ntype ColorPickerProps = {\n\tselected?: string;\n    select: (color: string)=>void;\n}\n\nexport class ColorPicker extends React.Component<ColorPickerProps> {\n\n    render() {\n    \tconst { selected, select } = this.props;\n\n        const colorButtons = allColors.map((color: string) => {\n            const classes = ['Color-button'];\n            if (selected === color) classes.push('Color-selected');\n            return (\n                <IconButton className={classes.join(' ')} onClick={() => select(color)} style={{ backgroundColor: color }} key={color}>\n                    {selected === color && <CheckIcon/>}\n                </IconButton>\n            )\n        });\n\n        return (\n            <div className=\"Color-picker\">\n                { colorButtons }\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { IUser } from '../custom.d';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { ColorPicker } from '../common/ColorPicker';\n\ntype NewPlayerProps = {\n    addPlayer: (player: IUser) => void,\n    updatePlayer: (player: IUser) => void,\n    currentPlayer: IUser\n}\n\nexport class NewPlayer extends React.Component<NewPlayerProps> {\n\n    constructor(props: NewPlayerProps) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.setColor = this.setColor.bind(this);\n        this.addPlayer = this.addPlayer.bind(this);\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        if (event.target.name === 'name') {\n            this.props.currentPlayer.name = event.target.value;\n\n            this.props.updatePlayer(this.props.currentPlayer);     \n\n        }\n    }\n\n    setColor(color: string) {\n        this.props.currentPlayer.color = color;\n        this.props.updatePlayer(this.props.currentPlayer);    \n    }\n\n    addPlayer() {\n        this.props.addPlayer(this.props.currentPlayer);\n    }\n\n    render() {\n        const { currentPlayer } = this.props;\n\n        return (\n            <div className=\"New-player\">\n                <TextField required label=\"Spielername\" \n                    name='name'\n                    value={currentPlayer.name} \n                    onChange={this.handleChange}/>\n                <ColorPicker select={this.setColor} selected={currentPlayer.color}/>\n                <Button variant=\"contained\" color=\"primary\" \n                    disabled={!currentPlayer.name} \n                    onClick={this.addPlayer}><Trans i18nKey=\"GAME.LOBBY.JOIN\">Mitspielen</Trans></Button>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { List, ListItem, ListItemText, DialogTitle, Dialog } from '@material-ui/core';\nimport { Trans } from 'react-i18next';\n\ntype RoundSelectorProps = {\n    onClose: (value?: number)=>void,\n    numOfPlayers: number,\n    open: boolean\n};\n\nexport class RoundSelector extends React.Component<RoundSelectorProps> {\n    render() {\n        const { open, onClose, numOfPlayers } = this.props;\n\n        const handleClose = () => {\n            onClose();\n        };\n\n        const handleListItemClick = (value: number) => {\n            onClose(value);\n        };\n\n        const options = [];\n        for (let i = 0; i < 3; i++) {\n            const wordCount = i+1;\n            const roundCount = wordCount*numOfPlayers;\n            options.push(\n                <ListItem button onClick={() => handleListItemClick(wordCount)} key={wordCount}>\n                    <ListItemText \n                        primary={<Trans i18nKey=\"GAME.LOBBY.ROUND_SELECT.NUM\" count={roundCount}>{{roundCount}} Runden</Trans>}\n                        secondary={<Trans i18nKey=\"GAME.LOBBY.ROUND_SELECT.WORDS\" count={wordCount}>{{wordCount}} Begriff(e) pro Spieler</Trans>} />\n                </ListItem>\n            );\n        }\n\n        return (\n            <Dialog onClose={handleClose} open={open} disableBackdropClick>\n                <DialogTitle>\n                    <Trans i18nKey=\"GAME.LOBBY.ROUND_SELECT.HEADING\">Lege die Rundenanzahl fest</Trans>\n                </DialogTitle>\n                <List>\n                    {options}\n                </List>\n            </Dialog>\n        );\n    }\n}","import React from 'react';\nimport { IGame, IUser } from '../custom.d';\nimport { Button, Paper, Typography } from '@material-ui/core';\nimport ShareIcon from '@material-ui/icons/Share';\nimport { Trans } from 'react-i18next';\nimport i18n from '../i18n';\nimport { withSnackbar, WithSnackbarProps } from 'notistack';\nimport { WordHint } from './components/WordHint';\nimport { NewPlayer } from '../common/NewPlayer';\nimport { RoundSelector } from './components/RoundSelector';\nimport { getRandomColor } from '../common/ColorPicker';\n\nimport { SETTING_ID, SETTING_NAME, SETTING_COLOR, DEFAULT_NUM_WORDS } from '../shared/constants';\nimport * as api from '../shared/apiFunctions';\n\ntype GameLobbyProps = {\n    game: IGame,\n    setTheme?: (color: string)=>void\n}&WithSnackbarProps;\n\ntype GameLobbyState = {\n    currentPlayer: IUser,\n    roundDialogOpen: boolean,\n    playerAdded?: boolean\n};\n\nclass GameLobby extends React.Component<GameLobbyProps,GameLobbyState> {\n\n    public state: GameLobbyState = { \n        currentPlayer: {\n            id: localStorage.getItem(SETTING_ID) || '',\n            name: localStorage.getItem(SETTING_NAME) || '',\n            color: getRandomColor(localStorage.getItem(SETTING_COLOR))\n        }, \n        roundDialogOpen: false\n    };\n\n    constructor(props: GameLobbyProps) {\n        super(props);\n\n        this.addPlayer = this.addPlayer.bind(this);\n        this.setPlayerProps = this.setPlayerProps.bind(this);\n        this.selectNumRounds = this.selectNumRounds.bind(this);\n        this.startPreparation = this.startPreparation.bind(this);\n        this.shareGame = this.shareGame.bind(this);\n    }\n\n    setPlayerProps(player: IUser) {\n        this.setState({\n            currentPlayer: player\n        });\n    }\n\n    async addPlayer(player: IUser) {\n        const resultPlayer = await api.addPlayer(this.props.game.id, player);\n        if (!resultPlayer) return;\n        this.setLocalPlayer(resultPlayer);\n    }\n\n    setLocalPlayer(player: IUser) {\n        localStorage.setItem(SETTING_ID, player.id);\n        localStorage.setItem(SETTING_NAME, player.name);\n        if (player.color) localStorage.setItem('playerColor', player.color);\n        if (this.props.setTheme && player.color) {\n            this.props.setTheme(player.color);\n        }\n        this.setState({\n            currentPlayer: player,\n            playerAdded: true\n        });\n    }\n\n    selectNumRounds() {\n        this.setState({\n            roundDialogOpen: true\n        });\n    }\n\n    startPreparation(wordsPerPlayer: number = DEFAULT_NUM_WORDS) {\n        this.setState({\n            roundDialogOpen: false\n        });\n\n        api.startPreparation(this.props.game.id, wordsPerPlayer);\n    }\n\n    shareGame() {\n        const gameUrl = window.location.href;\n        if (navigator.share) {\n            navigator.share({\n                title: document.title || i18n.t('APP_TITLE', 'Nur ein Wort!'),\n                text: i18n.t('GAME.LOBBY.INVITE_PLAYERS_MESSAGE', 'Spiele online mit mir'),\n                url: gameUrl,\n            });\n        } else {\n            try {\n                navigator.clipboard.writeText(gameUrl);\n                this.props.enqueueSnackbar(<Trans i18nKey=\"GAME.LOBBY.COPIED_LINK\">Link kopiert</Trans>);\n            } catch (e) {\n                this.props.enqueueSnackbar(<Trans i18nKey=\"GAME.LOBBY.COPIED_LINK_ERROR\">Fehler beim Link kopieren</Trans>, {variant: 'error'});\n            }      \n        }\n    }\n\n    render() {\n        const { game } = this.props;\n        const { currentPlayer, roundDialogOpen, playerAdded } = this.state;\n        const currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n        const isHost: boolean = !!currentUserId && game.host === currentUserId;\n        let isInGame: boolean = false;\n        const listOfPlayers = game.players.map(player => {\n            if (player.id === currentUserId) {\n                isInGame = true;\n            } \n            return (\n                <WordHint key={player.id} hint={player.name} color={player.color}></WordHint>\n            )\n        });\n        isInGame = isInGame || !!playerAdded;\n        const newPlayerName: string = !currentPlayer.name ? '?' : currentPlayer.name;\n        const newPlayerColor: string = !currentPlayer.color ? getRandomColor() : currentPlayer.color;\n\n        return (\n            <div className=\"Game-lobby\">\n                <div className=\"New-player\">\n                    { \n                        isInGame ? (\n                            <Paper className=\"StatusInfo\">\n                                <Trans i18nKey=\"GAME.LOBBY.WAIT_MESSAGE\" tOptions={{context: isHost ? 'HOST' : 'PLAYER'}}>\n                                    Warten auf Mitspieler ... Sobald alle Mitspieler da sind, kann der Spielleiter das Spiel starten.\n                                </Trans> \n                            </Paper>\n                        ) : (\n                            <NewPlayer currentPlayer={currentPlayer}\n                                updatePlayer={this.setPlayerProps}\n                                addPlayer={this.addPlayer}/>\n                        )\n                    }\n                    {\n                        isInGame && (\n                            <Button variant=\"contained\"\n                                startIcon={<ShareIcon />}\n                                onClick={this.shareGame}>\n                                <Trans i18nKey=\"GAME.LOBBY.INVITE_PLAYERS\">Personen einladen</Trans>\n                            </Button>\n                        )\n                    }\n                    {\n                        isHost && isInGame && (\n                            <Button variant=\"contained\" color=\"primary\" \n                                disabled={game.players.length < 3}\n                                onClick={this.selectNumRounds}>\n                                <Trans i18nKey=\"GAME.LOBBY.START_BUTTON\">Alle Spieler sind da</Trans>\n                            </Button>\n                        )\n                    }\n                </div>\n                <div className=\"Player-list\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"COMMON.TEAMMATES\">Mitspieler</Trans>\n                    </Typography>\n                    {listOfPlayers}\n                    {!isInGame && <WordHint hint={newPlayerName} color={newPlayerColor} showPencil={true}></WordHint>}\n                </div>\n                <RoundSelector numOfPlayers={game.players.length} open={roundDialogOpen} onClose={this.startPreparation}/>\n            </div>\n        );\n    }\n\n}\n\nexport default withSnackbar(GameLobby);","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport i18n from '../../i18n';\nimport { Paper } from '@material-ui/core';\nimport { WordHintInput } from './WordHintInput';\n\ntype WordCardProps = {\n\tword: string;\n\tguesser?: string;\n\tcolor?: string;\n    isGuesser?: boolean;\n    guess?: string;\n    guessedRight?: boolean;\n    showInput?: boolean;\n    submitHint?: (hint:string)=>void\n}\n\nexport class WordCard extends React.Component<WordCardProps> {\n\n    render() {\n        const { word, guesser, color, isGuesser, guess, guessedRight, showInput, submitHint} = this.props\n        const guesserName = guesser;\n        let guesserText;\n        let originalWord;\n        if (guess) {\n            originalWord = i18n.t('GAME.COMMON.WORD', 'Begriff') + ': ' + word;\n        } else if (guesser) {\n            guesserText = <Trans i18nKey=\"GAME.COMMON.TURN_GUESSING\" tOptions={{context: (isGuesser ? 'ME' : '')}}>{{guesserName}} muss raten</Trans>;\n        }\n        const classes = ['Word-card'];\n        if (guess) {\n            classes.push('Word-card-guess');\n            if (guessedRight) {\n                classes.push('Word-card-correct');\n            } else {\n                classes.push('Word-card-wrong');\n            }\n        }\n\n        return (\n\t        <Paper className={classes.join(' ')} style={{borderColor: color}}>\n\t        \t{\n                    (showInput && submitHint) ? \n                    <WordHintInput submitHint={submitHint} label={i18n.t('GAME.COMMON.GUESS', 'Rateversuch')}/> : \n                    <span className=\"Word\" style={{color: guess && color}}>{guess || word}</span>\n                }\n                {guesserText && <span className=\"Author-tag\" style={{color: color}}>{guesserText}</span>}\n                {originalWord && <span className=\"Orig-word-tag\">{originalWord}</span>}\n\t        </Paper>\n        );\n    }\n\n}","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { Button, Typography } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport i18n from '../../i18n';\n\ntype WordAdderProps = {\n    add: (words: string[])=>void,\n    numOfWords: number\n}\n\ntype WordAdderState = {\n    words: string[]\n}\n\nexport class WordAdder extends React.Component<WordAdderProps, WordAdderState> {\n\n    public state: WordAdderState = {\n        words: []\n    };\n\n    constructor(props: WordAdderProps) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.keyPressed = this.keyPressed.bind(this);\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        const index = parseInt(event.target.name.substr(4));\n        const word = event.target.value;\n        this.setState((state, props) => {\n            const newWords = state.words;\n            newWords[index] = word;\n            return {\n                words: newWords\n            };\n        });\n    }\n\n    keyPressed(event: React.KeyboardEvent<HTMLInputElement>) {\n        if (event.key === \"Enter\") {\n            const words = this.state.words;\n            const enterDisabled = words.length < this.props.numOfWords || words.some(word => !word || word.length === 0);\n            if (!enterDisabled) this.props.add(words);\n        }\n    }\n\n    render() {\n        const { add, numOfWords } = this.props;\n        const { words } = this.state;\n        const wordFields = [];\n        for (let i=0; i<numOfWords; i++) {\n            const label = i18n.t(\"GAME.PREP.WORD_ADDER.LABEL\", \"Wort \"+(i+1), {count: numOfWords, index: i+1});\n            wordFields.push(\n                <TextField required label={label}\n                    placeholder={i18n.t(\"GAME.PREP.WORD_ADDER.PLACEHOLDER\", \"Ratebegriff eingeben\")}\n                    name={`word${i}`}\n                    key={`word${i}`}\n                    value={words[i]||''} \n                    onChange={this.handleChange} \n                    onKeyPress={this.keyPressed}/>\n            );\n        }\n        \n        const enterDisabled = words.length < numOfWords || words.some(word => !word || word.length === 0);\n\n        return (\n            <div className=\"Word-adder\">\n                <Typography variant=\"subtitle1\">\n                    <Trans i18nKey=\"GAME.PREP.WORD_ADDER.HEADING\" count={numOfWords}>Gib Begriffe für das Spiel ein</Trans>\n                </Typography>\n                {wordFields}\n                <Button variant=\"contained\" color=\"primary\" \n                    disabled={enterDisabled} \n                    onClick={() => add(words)}>\n                    <Trans i18nKey=\"GAME.PREP.WORD_ADDER.BUTTON\" count={numOfWords}>Jetzt abschicken</Trans>\n                </Button>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { IGame, IUser } from '../custom.d';\nimport { Paper, Typography } from '@material-ui/core';\nimport { WordHint } from './components/WordHint';\nimport { WordCard } from './components/WordCard';\nimport { WordAdder } from './components/WordAdder';\nimport { getRandomColor } from '../common/ColorPicker';\n\nimport { SETTING_ID, SETTING_NAME, SETTING_COLOR, DEFAULT_NUM_WORDS } from '../shared/constants';\nimport * as api from '../shared/apiFunctions';\n\ntype GamePreparationProps = {\n    game: IGame\n}\n\nexport class GamePreparation extends React.Component<GamePreparationProps> {\n    // TODO central place for player\n    public currentPlayer: IUser =  {\n        id: localStorage.getItem(SETTING_ID) || '',\n        name: localStorage.getItem(SETTING_NAME) || '',\n        color: getRandomColor(localStorage.getItem(SETTING_COLOR))\n    };\n\n    constructor(props: GamePreparationProps) {\n        super(props);\n\n        this.addWords = this.addWords.bind(this);\n    }\n\n    async addWords(words: string[]) {\n        let player: IUser = this.currentPlayer;\n        player.enteredWords = words;\n\n        api.updatePlayer(this.props.game.id, player);\n    }\n\n    render() {\n        const { game } = this.props;\n        const numWordsPerPlayer = game.wordsPerPlayer || DEFAULT_NUM_WORDS;\n        const currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n        let isInGame: boolean = false;\n        let myWords: string[] = [];\n        let allMyWordsEntered: boolean = false;\n        const listOfPlayers = game.players.map(player => {\n            const wordsEntered: boolean = !!player.enteredWords && player.enteredWords.length === numWordsPerPlayer;\n            if (player.id === currentUserId) {\n                isInGame = true;\n                myWords = player.enteredWords || [];\n                allMyWordsEntered = wordsEntered;\n            } \n            return (\n                <WordHint key={player.id} hint={player.name} color={player.color} showPencil={!wordsEntered}></WordHint>\n            )\n        });\n\n        const myWordCards = myWords.map(word => <WordCard key={word} word={word} color={this.currentPlayer.color}/>)\n\n        // TODO not in game users\n        // TODO css classes\n        return (\n            <div className=\"Game-lobby\">\n                <div className=\"New-player\">\n                    { \n                        allMyWordsEntered || !isInGame ? ( \n                            <Paper className=\"StatusInfo\">\n                                <Trans i18nKey=\"GAME.PREP.WAIT_MESSAGE\">Warten auf Mitspieler ... Sobald alle fertig sind, geht's los.</Trans>\n                            </Paper>\n                        ) : (\n                            <WordAdder add={this.addWords} numOfWords={numWordsPerPlayer}/>\n                        )\n                    }\n                    {myWordCards.length > 0 && (\n                        <Typography variant=\"subtitle1\">\n                            <Trans i18nKey=\"GAME.PREP.MY_WORDS\" count={myWords.length}>Meine Begriffe</Trans>\n                        </Typography>\n                    )}\n                    {myWordCards}\n                </div>\n                <div className=\"Player-list\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"COMMON.TEAMMATES\">Mitspieler</Trans>\n                    </Typography>\n                    {listOfPlayers}\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { withSnackbar, WithSnackbarProps } from 'notistack';\nimport {WordCard} from './components/WordCard';\nimport { IGame } from '../custom.d';\nimport { checkPrevResult } from '../shared/functions';\n\ntype GameEndViewProps = {\n    game: IGame\n}&WithSnackbarProps;\n\ntype HintWritingViewState = {\n    shownPrevResult: boolean\n};\n\nclass GameEndView extends React.Component<GameEndViewProps> {\n    public state: HintWritingViewState = { shownPrevResult: false };\n    private _isMounted: boolean = false;\n\n    componentDidMount() {\n        this._isMounted = true;\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        this.props.closeSnackbar();\n    }\n\n    render() {\n        const game: IGame = this.props.game;\n        const { shownPrevResult } = this.state;\n        const correctWords = game.correctWords.map(wordResult => {\n            return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={true}/>\n        });\n        const wrongWords = game.wrongWords.map(wordResult => {\n            return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={false}/>\n        });\n\n        if (!shownPrevResult) {\n            checkPrevResult(game, this.props.enqueueSnackbar, ()=>{ \n                if(this._isMounted) this.setState({shownPrevResult: true}); \n            });\n        }\n\n        return (\n            <div className=\"Game-end-view\">\n                <div className=\"Correct-words\">\n                    <h2><Trans i18nKey=\"GAME.END.RIGHT\" count={game.correctWords.length}>Richtig</Trans></h2>\n                    {correctWords}\n                </div>\n                <div className=\"Wrong-words\">\n                    <h2><Trans i18nKey=\"GAME.END.WRONG\" count={game.wrongWords.length}>Falsch</Trans></h2>\n                    {wrongWords}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withSnackbar(GameEndView);\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { IGame, GamePhase } from '../../custom.d';\nimport { getUserInGame } from '../../shared/functions';\n\ntype GameStatsProps = {\n    game: IGame\n};\n\nexport class GameStats extends React.Component<GameStatsProps> {\n    render() {\n        const game: IGame = this.props.game;\n        const roundHost = getUserInGame(game, game.roundHost) || { name: '?' };\n        const roundHostName = roundHost.name;\n        const guesser = getUserInGame(game, game.currentGuesser) || { name: '?' };\n        const guesserName = guesser.name;\n\n        let gamePhase;\n        switch(game.phase) {\n            case GamePhase.HintWriting: \n                const players = game.players.filter(p => game.currentGuesser && p.id !== game.currentGuesser).map(p => p.name);\n                const playersString = players.slice(0, players.length-1).join(', ') + ' und ' + players[players.length-1];\n                gamePhase = <Trans i18nKey=\"GAME.STATS.PHASE_WRITING\">{{playersString}} schreiben Hinweise auf...</Trans>;\n                break;\n            case GamePhase.HintComparing: \n                gamePhase = <Trans i18nKey=\"GAME.STATS.PHASE_COMPARING\">{{roundHostName}} überprüft die Hinweise ...</Trans>;\n                break;\n            case GamePhase.Guessing: \n                gamePhase = <Trans i18nKey=\"GAME.STATS.PHASE_GUESSING\">{{guesserName}} versucht den Begriff zu erraten...</Trans>;\n                break;\n            case GamePhase.Solution: \n                if (game.guessedRight) {\n                    gamePhase = <Trans i18nKey=\"GAME.STATS.PHASE_SOLUTION\">{{guesserName}} lag genau richtig!</Trans>;\n                } else {\n                    gamePhase = <Trans i18nKey=\"GAME.STATS.PHASE_SOLUTION_WRONG\">{{roundHostName}} lag daneben! {{guesserName}} entscheidet ob es trotzdem zählt...</Trans>;\n                }\n                break;\n        }\n\n        const round = game.round+1;\n        const roundCount = game.words.length;\n        const rightCount = game.correctWords.length;\n        const wrongCount = game.wrongWords.length;\n\n        return (\n            <div className=\"Game-progress\">\n                <div>\n                    <Trans i18nKey=\"GAME.STATS.ROUND\">\n                        Runde {{round}}/{{roundCount}}\n                    </Trans>, <Trans i18nKey=\"GAME.STATS.RIGHT\">\n                        Richtige: {{rightCount}}\n                    </Trans>, <Trans i18nKey=\"GAME.STATS.WRONG\">\n                        Falsche: {{wrongCount}}\n                    </Trans>\n                </div>\n                <div><Trans i18nKey=\"GAME.STATS.PHASE\">Phase</Trans>: {gamePhase}</div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport i18n from '../../i18n';\nimport { Typography } from '@material-ui/core';\nimport { withSnackbar, WithSnackbarProps } from 'notistack';\nimport { IGame, IHint } from '../../custom.d';\nimport { WordCard } from '../components/WordCard';\nimport { WordHint } from '../components/WordHint';\n\nimport { getCurrentUserInGame, getUserInGame, checkPrevResult } from '../../shared/functions';\nimport * as api from '../../shared/apiFunctions';\n\ntype HintWritingViewProps = {\n    game: IGame\n}&WithSnackbarProps;\n\ntype HintWritingViewState = {\n    shownMessage: boolean,\n    shownPrevResult: boolean\n};\n\nclass HintWritingView extends React.Component<HintWritingViewProps, HintWritingViewState> {\n    public state: HintWritingViewState = { shownMessage: false, shownPrevResult: false };\n    private _isMounted: boolean = false;\n\n    constructor(props: HintWritingViewProps) {\n        super(props);\n\n        this.submitHint = this.submitHint.bind(this);\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    submitHint(hint: string) {\n        api.submitHint(this.props.game.id, hint);\n    }\n\n    render() {\n        const game: IGame = this.props.game;\n        const { shownMessage, shownPrevResult } = this.state;\n        const currentUser = getCurrentUserInGame(game);\n        const guesser = getUserInGame(game, game.currentGuesser) || { name: '?', id: '?' };\n        const isGuesser = currentUser && currentUser.id === guesser.id;\n\n        if (!shownPrevResult) checkPrevResult(game, this.props.enqueueSnackbar, ()=>{ if(this._isMounted) this.setState({shownPrevResult: true}); });\n\n        const currentWord = isGuesser ? '?' : (game.currentWord || '');\n        const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n            const hint: string = hintObj.hint;\n            const hintIsMine = currentUser && currentUser.id === hintObj.author;\n            const author = getUserInGame(game, hintObj.author) || { name: '?', id: '?' };\n            const authorName = hintIsMine ? i18n.t('COMMON.ME', 'Ich') : author.name;\n            const showHint = !hint || hintIsMine;\n            const showInput = !hint && hintIsMine;\n\n            if (hintIsMine && !hint && !shownMessage) {\n                this.props.enqueueSnackbar(i18n.t('GAME.MESSAGE.YOUR_TURN', 'Du bist dran!', { context: 'HINT_WRITING' }), {\n                    variant: 'info',\n                    preventDuplicate: true,\n                    onClose: ()=>{ if(this._isMounted) this.setState({shownMessage: true}); }\n                });\n            }\n\n            return (\n                <WordHint \n                    key={hintObj.author+index} \n                    hint={hint} \n                    color={author.color}\n                    showInput={showInput}\n                    submitHint={this.submitHint}\n                    showCheck={!showHint}\n                    author={authorName}\n                />\n            );\n        });\n\n        return (\n            <div className=\"Game-field\">\n                <div className=\"Current-word\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.WORD\">Begriff</Trans>\n                    </Typography>\n                    <WordCard \n                        word={currentWord} \n                        guesser={guesser.name} \n                        isGuesser={isGuesser}\n                        color={guesser.color} />\n                </div>\n                <div className=\"Current-hints\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.PLAYER_HINTS\">Spieler-Hinweise</Trans>\n                    </Typography>\n                    <div className=\"WordHint-list\">{currentHints}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withSnackbar(HintWritingView);\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport i18n from '../../i18n';\nimport { Button, Typography } from '@material-ui/core';\nimport { withSnackbar, WithSnackbarProps } from 'notistack';\nimport { IGame, IHint } from '../../custom.d';\nimport { WordCard } from '../components/WordCard';\nimport { WordHint } from '../components/WordHint';\n\nimport { getCurrentUserInGame, getUserInGame } from '../../shared/functions';\nimport * as api from '../../shared/apiFunctions';\n\ntype HintComparingViewProps = {\n    game: IGame\n}&WithSnackbarProps;\n\ntype HintComparingViewState = {\n    shownMessage: boolean\n};\n\nclass HintComparingView extends React.Component<HintComparingViewProps,HintComparingViewState> {\n    public state: HintComparingViewState = { shownMessage: false };\n    private _isMounted: boolean = false;\n\n    constructor(props: HintComparingViewProps) {\n        super(props);\n\n        this.toggleDuplicate = this.toggleDuplicate.bind(this);\n        this.showHints = this.showHints.bind(this);\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    toggleDuplicate(hintIndex: number) {\n        api.toggleDuplicate(this.props.game.id, hintIndex);\n    }\n\n    showHints() {\n        api.showHints(this.props.game.id);\n    }\n\n    render() {\n        const game: IGame = this.props.game;\n        const { shownMessage } = this.state;\n        const currentUser = getCurrentUserInGame(game);\n        const guesser = getUserInGame(game, game.currentGuesser) || { name: '?', id: '?' };\n        const isGuesser = currentUser && currentUser.id === guesser.id;\n        const guesserName = guesser.name;\n        const isRoundHost = currentUser && currentUser.id === game.roundHost;\n\n        if (isRoundHost && !shownMessage) {\n            this.props.enqueueSnackbar(i18n.t('GAME.MESSAGE.YOUR_TURN', 'Du bist dran!', { context: 'HINT_COMPARING' }), {\n                variant: 'info',\n                preventDuplicate: true,\n                onClose: ()=>{ if(this._isMounted) this.setState({shownMessage: true}); }\n            });\n        }\n\n        const currentWord = isGuesser ? '?' : (game.currentWord || '');\n        const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n            const hintIsMine = currentUser && currentUser.id === hintObj.author;\n            const author = getUserInGame(game, hintObj.author) || { name: '?', id: '?' };\n            const authorName = hintIsMine ? i18n.t('COMMON.ME', 'Ich') : author.name;\n\n            return (\n                <WordHint \n                    key={hintObj.author+index} \n                    hint={hintObj.hint} \n                    color={author.color}\n                    showCheck={isGuesser}\n                    showCross={isGuesser&&hintObj.isDuplicate}\n                    duplicate={hintObj.isDuplicate}\n                    showDuplicateToggle={isRoundHost}\n                    toggleDuplicate={()=>this.toggleDuplicate(index)}\n                    author={authorName}\n                />\n            );\n        });\n\n        return (\n            <div className=\"Game-field\">\n                <div className=\"Current-word\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.WORD\">Begriff</Trans>\n                    </Typography>\n                    <WordCard \n                        word={currentWord} \n                        guesser={guesser.name} \n                        isGuesser={isGuesser}\n                        color={guesser.color} />\n                </div>\n                <div className=\"Current-hints\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.PLAYER_HINTS\">Spieler-Hinweise</Trans>\n                    </Typography>\n                    <div className=\"WordHint-list\">{currentHints}</div>\n                    { isRoundHost && (\n                        <Typography variant=\"subtitle1\">\n                            <Trans i18nKey=\"GAME.COMPARING.INFO\">Markiere ungültige Hinweise</Trans>\n                        </Typography>\n                    )}\n                    {isRoundHost && (\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.showHints}>\n                            <Trans i18nKey=\"GAME.COMPARING.BUTTON\">{{guesserName}} kann losraten!</Trans>\n                        </Button>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withSnackbar(HintComparingView);","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport i18n from '../../i18n';\nimport { Typography } from '@material-ui/core';\nimport { withSnackbar, WithSnackbarProps } from 'notistack';\nimport { IGame, IHint } from '../../custom.d';\nimport { WordCard } from '../components/WordCard';\nimport { WordHint } from '../components/WordHint';\n\nimport { getCurrentUserInGame, getUserInGame } from '../../shared/functions';\nimport * as api from '../../shared/apiFunctions';\n\ntype GuessingViewProps = {\n    game: IGame\n}&WithSnackbarProps;\n\ntype GuessingViewState = {\n    shownMessage: boolean\n};\n\nclass GuessingView extends React.Component<GuessingViewProps,GuessingViewState> {\n    public state: GuessingViewState = { shownMessage: false };\n    private _isMounted: boolean = false;\n\n    constructor(props: GuessingViewProps) {\n        super(props);\n\n        this.guess = this.guess.bind(this);\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    guess(guess: string) {\n        api.guess(this.props.game.id, guess);\n    }\n\n    render() {\n        const game: IGame = this.props.game;\n        const { shownMessage } = this.state;\n        const currentUser = getCurrentUserInGame(game);\n        const guesser = getUserInGame(game, game.currentGuesser) || { name: '?', id: '?' };\n        const isGuesser = currentUser && currentUser.id === guesser.id;\n\n        if (isGuesser && !shownMessage) {\n            this.props.enqueueSnackbar(i18n.t('GAME.MESSAGE.YOUR_TURN', 'Du bist dran!', { context: 'GUESSING' }), {\n                variant: 'info',\n                preventDuplicate: true,\n                onClose: ()=>{ if(this._isMounted) this.setState({shownMessage: true}); }\n            });\n        }\n\n        const currentWord = isGuesser ? '?' : (game.currentWord || '');\n        const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n            const hint: string = hintObj.hint;\n            const hintIsMine = currentUser && currentUser.id === hintObj.author;\n            const author = getUserInGame(game, hintObj.author) || { name: '?', id: '?' };\n            const authorName = hintIsMine ? i18n.t('COMMON.ME', 'Ich') : author.name;\n\n            return (\n                <WordHint \n                    key={hintObj.author+index} \n                    hint={hint} \n                    color={author.color}\n                    showCross={isGuesser&&hintObj.isDuplicate}\n                    duplicate={hintObj.isDuplicate}\n                    author={authorName}\n                />\n            );\n        });\n\n        return (\n            <div className=\"Game-field\">\n                <div className=\"Current-word\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.WORD\">Begriff</Trans>\n                    </Typography>\n                    <WordCard \n                        word={currentWord} \n                        guesser={guesser.name} \n                        isGuesser={isGuesser}\n                        color={guesser.color} \n                        showInput={isGuesser}\n                        submitHint={this.guess}/>\n                </div>\n                <div className=\"Current-hints\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.PLAYER_HINTS\">Spieler-Hinweise</Trans>\n                    </Typography>\n                    <div className=\"WordHint-list\">{currentHints}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withSnackbar(GuessingView);\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport i18n from '../../i18n';\nimport { Button, Typography } from '@material-ui/core';\nimport { withSnackbar, WithSnackbarProps } from 'notistack';\nimport { IGame, IHint } from '../../custom.d';\nimport { WordCard } from '../components/WordCard';\nimport { WordHint } from '../components/WordHint';\n\nimport { getCurrentUserInGame, getUserInGame } from '../../shared/functions';\nimport * as api from '../../shared/apiFunctions';\n\ntype SolutionViewProps = {\n    game: IGame\n}&WithSnackbarProps;\n\ntype SolutionViewState = {\n    shownMessage: boolean,\n    shownResult: boolean\n};\n\nclass SolutionView extends React.Component<SolutionViewProps,SolutionViewState> {\n    public state: SolutionViewState = { shownMessage: false, shownResult: false };\n    private _isMounted: boolean = false;\n\n    constructor(props: SolutionViewProps) {\n        super(props);\n\n        this.resolveRound = this.resolveRound.bind(this);\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    resolveRound(correct: boolean = true) {\n        api.resolveRound(this.props.game.id, correct);\n    }\n\n    render() {\n        const game: IGame = this.props.game;\n        const { shownMessage, shownResult } = this.state;\n        const currentUser = getCurrentUserInGame(game);\n        const guesser = getUserInGame(game, game.currentGuesser) ||  { name: '?', id: '?' };\n        const guesserName = guesser.name;\n        const isGuesser = currentUser && currentUser.id === guesser.id;\n        const isRoundHost = currentUser && currentUser.id === game.roundHost;\n\n        const currentWord = game.currentWord || '';\n        const currentGuess = game.currentGuess || '';\n        const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n            const hintIsMine = currentUser && currentUser.id === hintObj.author;\n            const author = getUserInGame(game, hintObj.author) || { name: '?', id: '?' };\n            const authorName = hintIsMine ? i18n.t('COMMON.ME', 'Ich') : author.name;\n\n            return (\n                <WordHint \n                    key={hintObj.author+index} \n                    hint={hintObj.hint} \n                    color={author.color}\n                    author={authorName}\n                />\n            );\n        });\n\n        if (isRoundHost && !game.guessedRight && !shownMessage) {\n            this.props.enqueueSnackbar(i18n.t('GAME.MESSAGE.YOUR_TURN', 'Du bist dran!', { context: 'SOLUTION' }), {\n                variant: 'info',\n                preventDuplicate: true,\n                onClose: ()=>{ if(this._isMounted) this.setState({shownMessage: true}); }\n            });\n        }\n\n        if (!shownResult) {\n            const context = game.guessedRight ? 'CORRECT' : 'WRONG';\n            const variant = game.guessedRight ? 'success' : 'warning';\n            this.props.enqueueSnackbar(i18n.t('GAME.MESSAGE.RESULT', `${guesserName} hat geraten`, { context: context, guesserName: guesserName }), {\n                variant: variant,\n                preventDuplicate: true,\n                onClose: () =>{ if(this._isMounted) this.setState({shownResult: true}); }\n            });\n        }\n\n        let solutionButton1 = (\n            <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(true)}>\n                <Trans i18nKey=\"GAME.SOLUTION.CONTINUE\">Weiter</Trans>\n            </Button>\n        );\n        let solutionButton2;\n        if (!game.guessedRight) {\n            solutionButton1 = (\n                <Button variant=\"contained\" onClick={() => this.resolveRound(true)}>\n                    <Trans i18nKey=\"GAME.SOLUTION.CONTINUE_RIGHT\">Das zählt trotzdem</Trans>\n                </Button>\n            );\n            solutionButton2 = (\n                <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(false)}>\n                    <Trans i18nKey=\"GAME.SOLUTION.CONTINUE_WRONG\">Leider falsch</Trans>\n                </Button>\n            );\n        }\n\n        return (\n            <div className=\"Game-field\">\n                <div className=\"Current-word\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.WORD\">Begriff</Trans>\n                    </Typography>\n                    <WordCard \n                        word={currentWord} \n                        guesser={guesserName} \n                        isGuesser={isGuesser}\n                        color={guesser.color} \n                        guess={currentGuess} \n                        guessedRight={game.guessedRight}/>\n                    {(isRoundHost || game.guessedRight) && solutionButton1}\n                    {isRoundHost && solutionButton2}\n                </div>\n                <div className=\"Current-hints\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.PLAYER_HINTS\">Spieler-Hinweise</Trans>\n                    </Typography>\n                    <div className=\"WordHint-list\">{currentHints}</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withSnackbar(SolutionView);","import React from 'react';\nimport GameLobby from './GameLobby';\nimport {GamePreparation} from './GamePreparation';\nimport GameEndView from './GameEndView';\nimport {GameStats} from './components/GameStats';\nimport HintWritingView from './gamePhases/HintWritingView';\nimport HintComparingView from './gamePhases/HintComparingView';\nimport GuessingView from './gamePhases/GuessingView';\nimport SolutionView from './gamePhases/SolutionView';\nimport { IGame, GamePhase } from '../custom.d';\n\nimport { loadGame } from '../shared/apiFunctions';\nimport { setDocumentTitle } from '../shared/functions';\n\nconst POLLING_INTERVAL = 1000;\n\ntype JustOneGameProps = {\n    gameId: string,\n    setTheme?: (color: string)=>void\n};\ntype JustOneGameState = {\n    currentGame?: IGame\n};\n\nexport class JustOneGame extends React.Component<JustOneGameProps,JustOneGameState> {\n    public state: JustOneGameState = {};\n    private _interval: number|undefined;\n    private _isMounted: boolean = false;\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        this.loadGame();\n\n        this._interval = window.setInterval(this.loadGame.bind(this), POLLING_INTERVAL);\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        clearInterval(this._interval);\n    }\n\n    async loadGame() {\n        const id = this.props.gameId;\n        const game = await loadGame(id);\n        if (!this._isMounted) return;\n        if (!game) return;\n        setDocumentTitle(game.name);\n        this.setState({\n            currentGame: game\n        });\n    }\n\n    render() {\n        const {setTheme} = this.props;\n        const {currentGame} = this.state;\n\n        if (!currentGame) return null;\n\n        let gameContent;\n        let gameStats;\n\n        switch(currentGame.phase) {\n            case GamePhase.Init:\n                gameContent = <GameLobby game={currentGame} setTheme={setTheme} />;\n                break;\n            case GamePhase.Preparation:\n                gameContent = <GamePreparation game={currentGame} />;\n                break;\n            case GamePhase.HintWriting:\n                gameContent = <HintWritingView game={currentGame} />;\n                gameStats   = <GameStats game={currentGame} />;\n                break;\n            case GamePhase.HintComparing:\n                gameContent = <HintComparingView game={currentGame} />;\n                gameStats   = <GameStats game={currentGame} />;\n                break;\n            case GamePhase.Guessing:\n                gameContent = <GuessingView game={currentGame} />;\n                gameStats   = <GameStats game={currentGame} />;\n                break;\n            case GamePhase.Solution:\n                gameContent = <SolutionView game={currentGame} />;\n                gameStats   = <GameStats game={currentGame} />;\n                break;\n            case GamePhase.End:\n                gameContent = <GameEndView game={currentGame} />;\n                break;\n        }\n\n        return (\n            <div className=\"Game-content\">\n                {gameStats}\n                {gameContent}\n            </div>\n        );\n    }\n}\n","import React, { useState, Suspense } from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    RouteComponentProps,\n} from 'react-router-dom';\nimport './App.scss';\nimport { Paper, CircularProgress } from '@material-ui/core';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { SnackbarProvider } from 'notistack';\n\nimport { SETTING_COLOR, SETTING_THEME, \n         ThemeMode, DEFAULT_PRIMARY_COLOR, DEFAULT_SECONDARY_COLOR } from './shared/constants';\n\nimport {HeaderBar} from './common/HeaderBar';\nimport JustOneHome from './just-one/JustOneHome';\nimport {JustOneGame} from './just-one/JustOneGame';\n\nimport './i18n';\n\nexport const App = () =>    {\n    const [userColor, setUserColor] = useState(localStorage.getItem(SETTING_COLOR));\n    const [userTheme, setUserTheme] = useState(localStorage.getItem(SETTING_THEME) || ThemeMode.AUTO);\n\n    let prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    if (userTheme === ThemeMode.BRIGHT) {\n        prefersDarkMode = false;\n    } else if (userTheme === ThemeMode.DARK) {\n        prefersDarkMode = true;\n    }\n\n    let primaryColor = userColor;\n    if (!primaryColor || !primaryColor.startsWith('#') || primaryColor.length !== 7) {\n        primaryColor = DEFAULT_PRIMARY_COLOR;\n    }\n\n    const applyUserTheme = (value: string) => {\n        setUserTheme(value);\n        localStorage.setItem(SETTING_THEME, value);\n    }\n\n    const theme = React.useMemo(\n        () =>\n            createMuiTheme({\n                palette: {\n                    primary: {\n                        main: primaryColor || DEFAULT_PRIMARY_COLOR\n                    },\n                    secondary: {\n                        main: DEFAULT_SECONDARY_COLOR,\n                    }, \n                    type: prefersDarkMode ? 'dark' : 'light',\n                },\n            }),\n        [prefersDarkMode, primaryColor],\n    );\n\n    const classNames = ['App'];\n    if (prefersDarkMode) classNames.push('App-dark');\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Suspense fallback={<Loader classes={classNames}/>}>\n                <Router>\n                    <SnackbarProvider maxSnack={2} anchorOrigin={{ vertical: 'bottom', horizontal: 'center'}}>\n                        <Paper square elevation={0} className={classNames.join(' ')}>\n                            <HeaderBar userTheme={userTheme} applyUserTheme={applyUserTheme}/>\n                            <Switch>\n                                <Route path=\"/:gameId\" component={(props: RouteComponentProps<any>) => <JustOneGame gameId={props.match.params.gameId} setTheme={setUserColor}/>} />\n                                <Route children={<JustOneHome/>} />\n                            </Switch> \n                        </Paper>\n                    </SnackbarProvider>\n                </Router>\n            </Suspense>\n        </ThemeProvider>\n    );    \n}\n\nexport default App;\n\n// TODO \nconst Loader = (props: {classes: string[]}) => {\n    let {classes} = props;\n    classes.push('App-loading');\n    return (\n        <Paper square elevation={0} className={classes.join(' ')}>\n            <CircularProgress />\n        </Paper>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}