{"version":3,"sources":["../node_modules/short-unique-id/lib sync","just-one/JustOneHome.tsx","custom.d.ts","just-one/WordHintInput.tsx","just-one/WordCard.tsx","just-one/PencilAnimation.tsx","just-one/WordHint.tsx","just-one/GameField.tsx","just-one/NewPlayer.tsx","just-one/GameLobby.tsx","just-one/GameEndView.tsx","just-one/GameStats.tsx","just-one/JustOneGame.tsx","just-one/JustOne.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","JustOneHome","props","currentUserId","localStorage","getItem","SETTING_ID","_interval","createGame","bind","state","allGames","this","loadGames","setInterval","clearInterval","fetch","GAME_URL","then","res","json","data","games","filter","game","phase","players","findIndex","p","setState","catch","console","log","method","headers","body","JSON","stringify","gameList","map","key","to","className","Button","variant","color","onClick","React","Component","GamePhase","WordHintInput","value","handleChange","submitHint","keyPressed","event","target","TextField","label","onChange","onKeyPress","IconButton","disabled","Send","WordCard","currentWord","word","guesser","guesserText","guess","toLowerCase","classes","guessedRight","push","join","style","borderColor","showInput","PencilAnimation","styleObj1","backgroundColor","styleObj2","borderTopColor","WordHint","currentHint","hint","styleObj","author","showPencil","showCheck","showDuplicateToggle","toggleDuplicate","duplicate","length","extraClasses","Checkbox","icon","Mood","checkedIcon","MoodBad","checked","GameField","showHints","resolveRound","hintWord","currentUser","getCurrentUser","hintIndex","countCorrect","solutionButton2","currentGuesser","name","isGuesser","isWritingPhase","HintWriting","isComparingPhase","HintComparing","isGuessingPhase","Guessing","isSolutionPhase","Solution","isRoundHost","hints","currentGuess","currentHints","hintObj","index","hintIsMine","showHint","isDuplicate","authorName","solutionButton1","showGuessInput","guesserName","Typography","find","player","ShortUniqueId","require","default","NewPlayer","words","setRandomColor","addPlayer","includes","updatePlayer","startsWith","parseInt","substr","newWords","generateRandomColor","enteredWords","wordFields","i","required","placeholder","enterDisabled","some","InputProps","endAdornment","InputAdornment","position","AccountCircle","Opacity","dictionary","generator","GameLobby","SETTING_NAME","SETTING_COLOR","setPlayerProps","startGame","setLocalPlayer","setItem","setTheme","listOfPlayers","isHost","host","isInGame","newPlayerName","newPlayerColor","GameEndView","correctWords","wordResult","wrongWords","GameStats","gamePhase","roundHost","slice","round","JustOneGame","loadGame","gameId","currentGame","gameContent","gameStats","Init","End","JustOne","apiPort","window","location","hostname","protocol","App","primaryColor","currentUserName","theme","createMuiTheme","palette","primary","main","secondary","ThemeProvider","AppBar","Toolbar","edge","aria-label","Home","Chip","path","component","match","params","children","Boolean","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.69a6c2eb.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 110;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@material-ui/core';\nimport { IGame } from '../custom.d';\n\nimport { GAME_URL, SETTING_ID } from '../App';\n\nconst POLLING_INTERVAL = 2000;\n\ntype JustOneHomeProps = {};\ntype JustOneHomeState = {\n  allGames: IGame[]\n};\n\nexport class JustOneHome extends React.Component<JustOneHomeProps,JustOneHomeState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n  private _interval: any; // TODO\n\n  constructor(props: JustOneHomeProps) {\n    super(props);\n\n    this.createGame = this.createGame.bind(this);\n\n    this.state = { allGames: [] };\n  }\n\n  componentDidMount() {\n      this.loadGames();\n\n      this._interval = setInterval(this.loadGames.bind(this), POLLING_INTERVAL);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._interval);\n  }\n\n  loadGames() {\n    fetch(`${GAME_URL}/all`)\n      .then(res => res.json())\n      .then((data) => {\n        let games = data.games || [];\n        games = games.filter((game: IGame) => {\n          return game.phase === 0 || (this.currentUserId && game.players.findIndex(p => p.id === this.currentUserId) > -1);\n        });\n        this.setState({\n          allGames: games\n        });\n      })\n      .catch(console.log)\n  }\n\n  createGame() {\n    const game: IGame = createGame();\n\n    fetch(`${GAME_URL}/add`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({game})\n    }).then((data) => {\n        console.log(data);\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const gameList = this.state.allGames.map(game => (\n      <Link key={game.id} to={`/${game.id}`}>{`Spiele ${game.id}`}</Link>\n    ));\n\n    return (\n      <div className=\"Game-list\">\n        <Button variant=\"contained\" color=\"primary\" onClick={this.createGame}>Neues Spiel</Button>\n        {gameList}\n      </div>\n    );\n  }\n}\n\nfunction createGame(): IGame {\n    return {\"id\":\"\", \"name\": \"\", \"words\":[],\"players\":[],\"host\":\"1\",\"round\":0,\"phase\":0,\"hints\":[],\"correctWords\":[],\"wrongWords\":[]};\n}","// custom module declarations\n\n// TODO \nexport interface IUser {\n    id: string;\n    name: string;\n    color?: string;\n    enteredWords?: string[];\n}\n\nexport interface IHint {\n    hint: string;\n    author: IUser;\n    isDuplicate?: boolean\n}\n\nexport enum GamePhase {\n    Init,\n    HintWriting,\n    HintComparing,\n    Guessing,\n    Solution,\n    End\n}\n\nexport interface WordResult {\n    word: string;\n    guess: string;\n}\n\nexport interface IGame {\n    id: string;\n    name: string;\n    words: string[];\n    players: IUser[];\n    host: string; // hostId\n\n    round: number;\n    phase: GamePhase;\n    currentWord?: string;\n    currentGuesser?: IUser;\n    currentGuess?: string;\n    guessedRight?: boolean;\n    hints: IHint[];\n    correctWords: WordResult[];\n    wrongWords: WordResult[];\n}","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport { Send as SendIcon } from '@material-ui/icons';\nimport TextField from '@material-ui/core/TextField';\n\ntype WordHintInputProps = {\n  submitHint: (hint: string)=>void\n  label?: string\n};\ntype WordHintInputState = {\n  value: string, \n};\n\nexport class WordHintInput extends React.Component<WordHintInputProps,WordHintInputState> {\n\n  constructor(props: WordHintInputProps) {\n  \tsuper(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.submitHint = this.submitHint.bind(this);\n    this.keyPressed = this.keyPressed.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({value: event.target.value});\n  }\n\n  submitHint() {\n  \tthis.props.submitHint(this.state.value)\n  \tthis.setState({value: ''});\n  }\n\n  keyPressed(event: React.KeyboardEvent<HTMLInputElement>) {\n  \tif (event.key === \"Enter\") {\n  \t  this.submitHint()\n  \t}\n  }\n\n  render() {\n    return (\n\t    <div className=\"Word-hint-input\">\n\t    \t<TextField label={this.props.label || 'Hinweis eingeben'}\n\t    \t\tvalue={this.state.value} \n\t    \t\tonChange={this.handleChange} \n\t    \t\tonKeyPress={this.keyPressed} />\n  \t\t\t<IconButton color=\"primary\" \n  \t\t\t\tdisabled={!this.state.value} \n  \t\t\t\tonClick={this.submitHint}>\n          <SendIcon></SendIcon>\n        </IconButton>\n\t    </div>\n    );\n  }\n\n}","import React from 'react';\nimport { WordHintInput } from './WordHintInput';\n\ntype WordCardProps = {\n\tword: string;\n\tguesser?: string;\n\tcolor?: string;\n  guess?: string;\n  guessedRight?: boolean;\n  showInput?: boolean;\n  submitHint?: (hint:string)=>void\n}\n\nexport class WordCard extends React.Component<WordCardProps> {\n\n  render() {\n  \tconst currentWord = this.props.word;\n    const guesser = this.props.guesser;\n    let guesserText = '';\n    if (guesser) {\n      if (this.props.guess) {\n        guesserText = (guesser.toLowerCase() === 'ich' ? 'Mein ' : (guesser + '\\'s ')) + 'Rateversuch: ' + this.props.guess;\n      } else {\n        guesserText = guesser + ' muss raten';\n      }\n    } else if (this.props.guess) {\n      guesserText = 'Rateversuch: ' + this.props.guess;\n    }\n    const classes = ['Word-card'];\n    if (this.props.guess) {\n      if (this.props.guessedRight) {\n        classes.push('Word-card-correct');\n      } else {\n        classes.push('Word-card-wrong');\n      }\n    }\n\n    return (\n\t    <div className={classes.join(' ')} style={{borderColor: this.props.color}}>\n\t    \t{\n          (this.props.showInput && this.props.submitHint) ? \n          <WordHintInput submitHint={this.props.submitHint} label=\"Rateversuch\"/> : \n          <span>{currentWord}</span>\n        }\n        {guesserText && <span className=\"Author-tag\" style={{color: this.props.color}}>{guesserText}</span>}\n\t    </div>\n    );\n  }\n\n}","import React from 'react';\n\ntype PencilAnimationProps = {\n\tcolor?: string,\n}\n\nexport class PencilAnimation extends React.Component<PencilAnimationProps> {\n\n  render() {\n    const styleObj1 = {\n    \tbackgroundColor: this.props.color,\n    };\n    const styleObj2 = {\n    \tborderTopColor: this.props.color,\n    };\n\n    return (\n\t  <div className=\"pencil\">\n        <div className=\"body\" style={styleObj1}></div>\n        <div className=\"nib\" style={styleObj2}></div>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { WordHintInput } from './WordHintInput';\nimport { PencilAnimation } from './PencilAnimation';\nimport { Checkbox } from '@material-ui/core';\nimport { Mood as MoodIcon, MoodBad as MoodBadIcon } from '@material-ui/icons';\n\ntype WordHintProps = {\n\thint?: string,\n\tcolor?: string,\n\tduplicate?: boolean,\n  author?: string,\n  showPencil?: boolean,\n  showCheck?: boolean,\n  showInput?: boolean,\n  submitHint?: (hint:string)=>void,\n  showDuplicateToggle?: boolean,\n  toggleDuplicate?: ()=>void\n}\n\nexport class WordHint extends React.Component<WordHintProps> {\n\n  render() {\n  \tconst currentHint = this.props.hint;\n    const color = this.props.color;\n    const styleObj = {\n    \t'color': color,\n      'borderColor': color\n    };\n    const author = this.props.author;\n    const showPencil = this.props.showPencil || !this.props.hint;\n    const showCheck = this.props.showCheck;\n    const showDuplicateToggle = this.props.showDuplicateToggle;\n    const toggleDuplicate = this.props.toggleDuplicate;\n\n    const classes = ['Word-hint'];\n    if (showPencil) classes.push('Word-hint-writing');\n    if (this.props.duplicate) classes.push('Word-hint-duplicate');\n    if (currentHint && currentHint.length > 20) classes.push('Word-hint-huge');\n    else if (currentHint && currentHint.length > 14) classes.push('Word-hint-long');\n    const extraClasses = classes.join(' ');\n\n    if (this.props.showInput && this.props.submitHint) {\n      return (\n        <div className={extraClasses} style={styleObj}>\n          <WordHintInput submitHint={this.props.submitHint}/>\n          {author && <span className=\"Author-tag\">{author}</span>}\n        </div>\n      );\n    } else {\n      return (\n        <div className={extraClasses} style={styleObj}>\n          {!showCheck && currentHint}\n          {showCheck && <span className=\"Done-icon\">✓</span>}\n          {showPencil && <PencilAnimation color={color}></PencilAnimation>}\n          {showDuplicateToggle && toggleDuplicate && (\n            <Checkbox className=\"Duplicate-toggle\" \n              icon={<MoodIcon />} checkedIcon={<MoodBadIcon />} \n              checked={this.props.duplicate}\n              onChange={()=>toggleDuplicate()}/>\n          )}\n          {author && <span className=\"Author-tag\">{author}</span>}\n        </div>\n      );\n    }\n\n    \n  }\n\n}","import React from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport {WordCard} from './WordCard';\nimport { IGame, IHint, IUser, GamePhase } from '../custom.d';\nimport {WordHint} from './WordHint';\n\nimport { GAME_URL } from '../App';\n\nconst SETTING_ID = 'playerId';\n\ntype GameFieldProps = {\n  game: IGame\n};\ntype GameFieldState = {\n\n};\n\nexport class GameField extends React.Component<GameFieldProps,GameFieldState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n  constructor(props: GameFieldProps) {\n    super(props);\n\n    this.submitHint = this.submitHint.bind(this);\n    this.toggleDuplicate = this.toggleDuplicate.bind(this);\n    this.showHints = this.showHints.bind(this);\n    this.guess = this.guess.bind(this);\n    this.resolveRound = this.resolveRound.bind(this);\n\n    this.state = {  };\n  }\n\n  componentDidMount() {\n\n  }\n\n  submitHint(hintWord: string) {\n    const currentUser = getCurrentUser(this.props.game, this.currentUserId);\n    if (!currentUser) return; // TODO\n    const hint: IHint = { hint: hintWord, author: currentUser};\n\n    fetch(`${GAME_URL}/${this.props.game.id}/hint`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({hint})\n    }).catch(console.log)\n  }\n\n  toggleDuplicate(hintIndex: number) {\n    fetch(`${GAME_URL}/${this.props.game.id}/toggleDuplicateHint`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({hintIndex})\n    }).catch(console.log)\n  }\n\n  showHints() {\n    fetch(`${GAME_URL}/${this.props.game.id}/showHints`, {\n      method: 'PUT'\n    }).catch(console.log)\n  }\n\n  guess(guess: string) {\n    fetch(`${GAME_URL}/${this.props.game.id}/guess`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({guess})\n    }).catch(console.log)\n  }\n\n  resolveRound(countCorrect: boolean = true) {\n    fetch(`${GAME_URL}/${this.props.game.id}/resolve`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({countCorrect})\n    }).catch(console.log)\n  }\n\n  render() {\n    const game: IGame = this.props.game;\n    const currentUser = getCurrentUser(game, this.currentUserId); // TODO\n    const guesser = game.currentGuesser ? game.currentGuesser : { name: '?', id: '?' }; // TODO\n    const isGuesser = currentUser && currentUser.id === guesser.id;\n\n    const isWritingPhase = game.phase === GamePhase.HintWriting;\n    const isComparingPhase = game.phase === GamePhase.HintComparing;\n    const isGuessingPhase = game.phase === GamePhase.Guessing;\n    const isSolutionPhase = game.phase === GamePhase.Solution;\n\n    const isRoundHost = this.currentUserId === game.hints[0].author.id;\n    const showDuplicateToggle = isRoundHost && isComparingPhase;\n\n    const currentWord = isGuesser && !isSolutionPhase ? '?' : (game.currentWord || '');\n    const currentGuess = game.currentGuess || '';\n    const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n      let hint: string = hintObj.hint;\n      const hintIsMine = currentUser && currentUser.id === hintObj.author.id;\n      const showHint = !hint || isGuessingPhase || isSolutionPhase || hintIsMine || (isComparingPhase && !isGuesser);\n      const showInput = !hint && isWritingPhase && hintIsMine;\n\n      if (isGuessingPhase && isGuesser && hintObj.isDuplicate) {\n        hint = 'LEIDER DOPPELT';\n      } \n\n      const authorName = hintIsMine ? 'Ich' : hintObj.author.name;\n\n      return <WordHint key={hintObj.author.id+index} \n              hint={hint} \n              color={hintObj.author.color}\n              showInput={showInput}\n              submitHint={this.submitHint}\n              showCheck={!showHint}\n              duplicate={hintObj.isDuplicate}\n              showDuplicateToggle={showDuplicateToggle}\n              toggleDuplicate={()=>this.toggleDuplicate(index)}\n              author={authorName}/>\n    });\n    let solutionButton1 = <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(true)}>Super, weiter geht's</Button>;\n    let solutionButton2;\n    if (!game.guessedRight) {\n      solutionButton1 = <Button variant=\"contained\" onClick={() => this.resolveRound(true)}>Das zählt trotzdem</Button>;\n      solutionButton2 = <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(false)}>Leider falsch</Button>;\n    }\n\n    const showGuessInput = isGuessingPhase && isGuesser;\n    const guesserName = isGuesser ? 'Ich' : guesser.name;\n\n    return (\n      <div className=\"Game-field\">\n        <div className=\"Current-word\">\n          <Typography variant=\"h5\" className=\"appTitle\">\n            Begriff\n          </Typography>\n          <WordCard \n            word={currentWord} \n            guesser={guesserName} \n            color={guesser.color} \n            showInput={showGuessInput}\n            submitHint={this.guess}\n            guess={isSolutionPhase ? currentGuess : ''} \n            guessedRight={game.guessedRight}/>\n          {isSolutionPhase && (!isGuesser || game.guessedRight) && solutionButton1}\n          {isSolutionPhase && !isGuesser && solutionButton2}\n        </div>\n        <div className=\"Current-hints\">\n          <Typography variant=\"h5\" className=\"appTitle\">\n            Spieler-Hinweise\n          </Typography>\n          <div className=\"WordHint-list\">{currentHints}</div>\n          {isComparingPhase && isRoundHost && <Button variant=\"contained\" color=\"primary\" onClick={this.showHints}>{guesser.name + ' kann losraten!'}</Button>}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction getCurrentUser(game: IGame, currentUserId: string): IUser|undefined {\n  return game.players.find(player => player.id === currentUserId);\n}\n","import React from 'react';\nimport { IUser } from '../custom.d';\nimport { Button, Typography, InputAdornment } from '@material-ui/core';\nimport { Opacity as OpacityIcon, AccountCircle as AccountCircleIcon  } from '@material-ui/icons';\nimport TextField from '@material-ui/core/TextField';\nconst ShortUniqueId = require('short-unique-id').default;\n\nconst DEFAULT_NUM_WORDS: number = 2; // Two words per player\n\ntype NewPlayerProps = {\n  addPlayer: (player: IUser) => void,\n  updatePlayer: (player: IUser) => void,\n  name: string,\n  color: string\n}\n\ntype NewPlayerState = {\n  words: string[]\n}\n\nexport class NewPlayer extends React.Component<NewPlayerProps, NewPlayerState> {\n\n  public state: NewPlayerState = {\n    words: []\n  };\n\n  constructor(props: NewPlayerProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.setRandomColor = this.setRandomColor.bind(this);\n    this.addPlayer = this.addPlayer.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    if (['name','color'].includes(event.target.name)) {\n      let player: IUser = { \n        id: '', \n        name: this.props.name, \n        color: this.props.color \n      };\n      if (event.target.name === 'name') {\n        player.name = event.target.value;\n      } else if (event.target.name === 'color') {\n        player.color = event.target.value; \n      }\n\n      this.props.updatePlayer(player);   \n\n    } else if (event.target.name.startsWith('word')) {\n      const index = parseInt(event.target.name.substr(4));\n      const word = event.target.value;\n      this.setState((state, props) => {\n        const newWords = state.words;\n        newWords[index] = word;\n        return {\n          words: newWords\n        };\n      });\n    }\n  }\n\n  setRandomColor() {\n    const player: IUser = { \n      id: '', \n      name: this.props.name, \n      color: generateRandomColor()\n    };\n    this.props.updatePlayer(player);\n  }\n\n  addPlayer() {\n    const player: IUser = { \n      id: '', \n      name: this.props.name, \n      color: this.props.color,\n      enteredWords: this.state.words\n    };\n    this.props.addPlayer(player);\n  }\n\n  render() {\n    const numOfWords = DEFAULT_NUM_WORDS;\n    const wordFields = [];\n    if (numOfWords>0) {\n      wordFields.push(\n        <Typography variant=\"subtitle1\" key=\"heading\">\n          Gebe {numOfWords} Wörter für das Spiel ein\n        </Typography>\n      );\n    }\n    for (let i=0; i<numOfWords; i++) {\n      wordFields.push(\n        <TextField required label={`Wort ${i+1}`}\n          placeholder=\"Für den Stapel\"\n          name={`word${i}`}\n          key={`word${i}`}\n          value={this.state.words[i]||''} \n          onChange={this.handleChange} />\n      );\n    }\n    let enterDisabled = !this.props.name || this.state.words.length < numOfWords || this.state.words.some(word => !word || word.length === 0);\n\n    return (\n      <div className=\"New-player\">\n        <TextField required label=\"Spielername\" \n          name='name'\n          value={this.props.name} \n          onChange={this.handleChange}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <AccountCircleIcon style={{color: this.props.color}}></AccountCircleIcon>\n              </InputAdornment>\n            )  \n          }} />\n        <TextField required label=\"Spielerfarbe\" \n          placeholder=\"Html-Farbcode\"\n          name='color'\n          value={this.props.color} \n          onChange={this.handleChange}\n          InputProps={{\n            style: {color: this.props.color},\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <OpacityIcon style={{color: this.props.color}}></OpacityIcon>\n              </InputAdornment>\n            )  \n          }} />\n        <Button variant=\"contained\" \n          onClick={this.setRandomColor}>Zufallsfarbe</Button>\n        {wordFields}\n        <Button variant=\"contained\" color=\"primary\" \n          disabled={enterDisabled} \n          onClick={this.addPlayer}>Mitspielen</Button>\n      </div>\n    );\n  }\n\n}\n\nexport function generateRandomColor(): string {\n  const generator = new ShortUniqueId({\n    dictionary: [\n      '0', '1', '2', '3',\n      '4', '5', '6', '7',\n      '8', '9', 'A', 'B',\n      'C', 'D', 'E', 'F',\n    ],\n  });\n  const color = '#' + generator(6);\n  return color;\n}","import React from 'react';\nimport { IGame, IUser } from '../custom.d';\nimport { Button } from '@material-ui/core';\nimport { WordHint } from './WordHint';\nimport { NewPlayer, generateRandomColor } from './NewPlayer';\n\nimport { GAME_URL, SETTING_ID, SETTING_NAME, SETTING_COLOR } from '../App';\n\ntype GameLobbyProps = {\n  game: IGame,\n  setTheme?: (color: string)=>void\n}\ntype GameLobbyState = {\n  name: string,\n  color: string\n}\n\nexport class GameLobby extends React.Component<GameLobbyProps,GameLobbyState> {\n\n  public state: GameLobbyState = { \n    name: localStorage.getItem(SETTING_NAME) || '',\n    color: localStorage.getItem(SETTING_COLOR) || generateRandomColor() || 'black'\n  };\n\n  constructor(props: GameLobbyProps) {\n    super(props);\n\n    this.addPlayer = this.addPlayer.bind(this);\n    this.setPlayerProps = this.setPlayerProps.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  setPlayerProps(player: IUser) {\n    this.setState({\n      name: player.name,\n      color: player.color || ''\n    });\n  }\n\n  addPlayer(player: IUser) {\n    const currentUserId = localStorage.getItem(SETTING_ID) || '';\n    player.id = currentUserId;\n    fetch(`${GAME_URL}/${this.props.game.id}/addPlayer`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({player})\n    }).then(res => res.json())\n      .then((data) => {\n        this.setLocalPlayer(data.player);\n        this.setState({\n          color: generateRandomColor() || 'black',\n          name: ''\n        });\n      })\n      .catch(console.log)\n  }\n\n  setLocalPlayer(player: IUser) {\n    localStorage.setItem(SETTING_ID, player.id);\n    localStorage.setItem(SETTING_NAME, player.name);\n    if (player.color) localStorage.setItem('playerColor', player.color);\n    if (this.props.setTheme && player.color) {\n      this.props.setTheme(player.color);\n    }\n  }\n\n  startGame() {\n    fetch(`${GAME_URL}/${this.props.game.id}/start`, {\n      method: 'PUT'\n    }).then((data) => {\n        // TODO\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const listOfPlayers = this.props.game.players.map(player => (\n      <WordHint key={player.id} hint={player.name} color={player.color}></WordHint>\n    ));\n\n    const currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n    const isHost: boolean = !!currentUserId && this.props.game.host === currentUserId;\n    const isInGame: boolean = !!currentUserId && this.props.game.players.findIndex(player => player.id === currentUserId) > -1;\n    const newPlayerName: string = (isInGame || !this.state.name) ? '?' : this.state.name;\n    const newPlayerColor: string = (isInGame || !this.state.color) ? generateRandomColor() : this.state.color;\n\n    return (\n      <div className=\"Game-lobby\">\n        <div className=\"New-player\">\n          { \n            !isInGame && \n            <NewPlayer name={this.state.name} color={this.state.color} \n              updatePlayer={this.setPlayerProps}\n              addPlayer={this.addPlayer}></NewPlayer>\n          }\n          {\n            isHost && \n            <Button variant=\"contained\" color=\"primary\" \n              disabled={this.props.game.players.length < 3} \n              onClick={this.startGame}>Spiel beginnen</Button>\n          }\n        </div>\n        <div className=\"Player-list\">\n          {listOfPlayers}\n          <WordHint hint={newPlayerName} color={newPlayerColor} showPencil={true}></WordHint>\n        </div>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport {WordCard} from './WordCard';\nimport { IGame } from '../custom.d';\n\ntype GameEndViewProps = {\n  game: IGame\n};\n\nexport class GameEndView extends React.Component<GameEndViewProps> {\n  render() {\n    const game: IGame = this.props.game;\n    const correctWords = game.correctWords.map(wordResult => {\n      return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={true}/>\n    });\n    const wrongWords = game.wrongWords.map(wordResult => {\n      return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={false}/>\n    });\n\n    return (\n      <div className=\"Game-end-view\">\n        <div className=\"Correct-words\">\n          <h2>Richtig ({game.correctWords.length})</h2>\n          {correctWords}\n        </div>\n        <div className=\"Wrong-words\">\n          <h2>Falsch ({game.wrongWords.length})</h2>\n          {wrongWords}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { IGame, GamePhase } from '../custom.d';\n\ntype GameStatsProps = {\n  game: IGame\n};\n\nexport class GameStats extends React.Component<GameStatsProps> {\n  render() {\n    const game: IGame = this.props.game;\n    const roundHost = !!game.hints.length && game.hints[0].author.name;\n    const guesser = game.currentGuesser ? game.currentGuesser.name : '?';\n\n    let gamePhase;\n    switch(game.phase) {\n      case GamePhase.HintWriting: \n        const players = game.players.filter(p => game.currentGuesser && p.id !== game.currentGuesser.id).map(p => p.name);\n        const playersString = players.slice(0, players.length-1).join(', ') + ' und ' + players[players.length-1];\n        gamePhase = playersString + ' schreiben Hinweise auf...';\n        break;\n      case GamePhase.HintComparing: \n        gamePhase = roundHost + ' überprüft die Hinweise auf ungültige oder doppelte Wörter...';\n        break;\n      case GamePhase.Guessing: \n        gamePhase = guesser + ' versucht den Begriff zu erraten...';\n        break;\n      case GamePhase.Solution: \n        if (game.guessedRight) {\n          gamePhase = guesser + ' lag genau richtig!';\n        } else {\n          gamePhase = guesser + ' lag daneben! ' + roundHost + ' entscheidet ob es trotzdem zählt...';\n        }\n        break;\n    }\n\n    return (\n      <div className=\"Game-progress\">\n        <div>Runde: {game.round+1}/{game.words.length}, Richtige: {game.correctWords.length}, Falsche: {game.wrongWords.length}</div>\n        <div>Phase: {gamePhase}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {GameField} from './GameField';\nimport {GameLobby} from './GameLobby';\nimport {GameEndView} from './GameEndView';\nimport {GameStats} from './GameStats';\nimport { IGame, GamePhase } from '../custom.d';\n\nimport { GAME_URL, SETTING_ID } from '../App';\n\nconst POLLING_INTERVAL = 2000;\n\ntype JustOneGameProps = {\n  gameId: string,\n  setTheme?: (color: string)=>void\n};\ntype JustOneGameState = {\n  currentGame?: IGame\n};\n\nexport class JustOneGame extends React.Component<JustOneGameProps,JustOneGameState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n  private _interval: any; // TODO\n\n  constructor(props: JustOneGameProps) {\n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.loadGame();\n\n    this._interval = setInterval(this.loadGame.bind(this), POLLING_INTERVAL);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._interval);\n  }\n\n  loadGame() {\n    let id = this.props.gameId;\n    if (!id) return;\n\n    fetch(`${GAME_URL}/${id}`)\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({\n          currentGame: data.game\n        });\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const currentGame: IGame|undefined = this.state.currentGame;\n\n    let gameContent;\n    let gameStats;\n    if (currentGame) {\n      if (currentGame.phase === GamePhase.Init) {\n        gameContent = <GameLobby game={currentGame} setTheme={this.props.setTheme}></GameLobby>\n      } else if (currentGame.phase === GamePhase.End) {\n        gameContent = <GameEndView game={currentGame}></GameEndView>;\n      } else {\n        gameStats = <GameStats game={currentGame}></GameStats>;\n        gameContent = <GameField game={currentGame}></GameField>;\n      }     \n    }\n\n    return (\n      <div className=\"Game-content\">\n        {gameStats}\n        {gameContent}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {JustOneHome} from './JustOneHome';\nimport {JustOneGame} from './JustOneGame';\n\ntype JustOneProps = {\n  gameId?: string,\n  setTheme?: (color: string)=>void\n};\ntype JustOneState = {\n\n};\n\nexport class JustOne extends React.Component<JustOneProps,JustOneState> {\n  render() {\n    if (this.props.gameId) {\n      return <JustOneGame gameId={this.props.gameId}></JustOneGame>;\n    } else {\n      return <JustOneHome></JustOneHome>\n    }\n  }\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport './App.scss';\nimport { AppBar, Toolbar, IconButton, Typography, Chip } from '@material-ui/core';\nimport { Home as HomeIcon, AccountCircle as AccountCircleIcon } from '@material-ui/icons';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport {JustOne} from './just-one/JustOne';\n\n\nconst isProd = window.location.hostname === 'justone.okj.name';\nconst apiPort = isProd ? '' : ':9000';\nexport const API_URL = window.location.protocol + '//' + window.location.hostname + apiPort + '/api';\nexport const GAME_URL = API_URL + '/games';\nexport const SETTING_ID = 'playerId';\nexport const SETTING_NAME = 'playerName';\nexport const SETTING_COLOR = 'playerColor';\nconst DEFAULT_PRIMARY_COLOR = '#43a047';\nconst DEFAULT_SECONDARY_COLOR = '#d32f2f'; // also error dark\n\ntype AppProps = {};\ntype AppState = {\n  primaryColor: string\n};\n\nexport class App extends React.Component<AppProps,AppState> {\n\n  public state: AppState = {\n    primaryColor: localStorage.getItem(SETTING_COLOR) || DEFAULT_PRIMARY_COLOR\n  };\n\n  constructor(props: AppProps) {\n    super(props);\n\n    this.setTheme = this.setTheme.bind(this);\n  }\n\n  setTheme(primaryColor: string) {\n    this.setState({primaryColor: primaryColor});\n  }\n\n  render() {\n    const currentUserName: string|null = localStorage.getItem(SETTING_NAME);\n\n    const theme = createMuiTheme({\n      palette: {\n        primary: {\n          main: this.state.primaryColor\n        },\n        secondary: {\n          main: DEFAULT_SECONDARY_COLOR,\n        },  \n      }\n    });\n\n    return (\n      <Router>\n        <ThemeProvider theme={theme}>\n        <div className=\"App\">\n          <AppBar position=\"sticky\">\n            <Toolbar>\n              <Link to=\"/\" className=\"ButtonLink\">\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"home\">\n                  <HomeIcon />\n                </IconButton>\n              </Link>\n              <Typography variant=\"h2\" className=\"appTitle\">\n                Nur ein Wort!\n              </Typography>\n              {currentUserName && <Chip label={currentUserName} icon={<AccountCircleIcon />}/>}\n            </Toolbar>\n          </AppBar>\n          <Switch>\n              <Route path=\"/:gameId\" component={(props: RouteComponentProps<any>) => <JustOne gameId={props.match.params.gameId} setTheme={this.setTheme}/>} />\n              <Route children={<JustOne/>} />\n            </Switch> \n        </div>  \n      </ThemeProvider>\n      </Router>\n    );  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}