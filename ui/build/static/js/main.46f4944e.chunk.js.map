{"version":3,"sources":["shared/constants.tsx","custom.d.ts","common/UserConfig.tsx","common/HeaderBar.tsx","i18n.tsx","shared/functions.tsx","just-one/GameList.tsx","shared/apiFunctions.tsx","just-one/JustOneHome.tsx","just-one/components/WordHintInput.tsx","common/PencilAnimation.tsx","just-one/components/WordHint.tsx","common/ColorPicker.tsx","common/NewPlayer.tsx","just-one/components/RoundSelector.tsx","just-one/GameLobby.tsx","just-one/components/WordCard.tsx","just-one/components/WordAdder.tsx","just-one/GamePreparation.tsx","just-one/GameEndView.tsx","just-one/components/GameStats.tsx","just-one/gamePhases/HintWritingView.tsx","just-one/gamePhases/HintComparingView.tsx","just-one/gamePhases/GuessingView.tsx","just-one/gamePhases/SolutionView.tsx","just-one/JustOneGame.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ThemeMode","apiPort","window","location","hostname","GAME_URL","protocol","GamePhase","UserConfig","this","props","tKey","open","onClose","selectedValue","possibleValues","Dialog","DialogTitle","Trans","i18nKey","List","map","value","ListItem","button","onClick","handleListItemClick","val","key","selected","ListItemText","primary","React","Component","HeaderBar","i18n","useTranslation","userTheme","applyUserTheme","useState","themeConfigOpen","setThemeConfigOpen","languageConfigOpen","setLanguageConfigOpen","language","setLanguage","anchorEl","setAnchorEl","openMenu","event","target","currentTarget","handleMenuClose","currentUserName","localStorage","getItem","availableThemes","AUTO","BRIGHT","DARK","AppBar","position","Toolbar","to","className","IconButton","edge","color","aria-label","Home","Typography","variant","Button","startIcon","AccountCircle","Menu","keepMounted","Boolean","MenuItem","ListItemIcon","BrightnessMedium","Translate","theme","lng","changeLanguage","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","initImmediate","interpolation","escapeValue","getCurrentUserId","userId","shortid","characters","setItem","getCurrentUserInGame","game","getUserInGame","players","find","player","id","setDocumentTitle","gameName","document","title","t","GameList","currentUserId","allGames","deleteGame","newGames","filter","phase","Init","onGoingGames","End","includes","doneGames","createListItem","playersString","p","name","join","component","Link","secondary","host","ListItemSecondaryAction","newGamesList","onGoingGamesList","doneGamesList","length","Paper","loadGames","a","_get","games","loadGame","createGame","_post","endpoint","Promise","resolve","reject","fetch","method","headers","_getAuthHeader","then","data","error","console","addPlayer","_put","updatePlayer","startPreparation","wordsPerPlayer","resolveRound","correct","res","json","body","JSON","stringify","JustOneHome","_interval","_isMounted","bind","handleChange","state","newGameName","setInterval","clearInterval","setState","gameId","g","getInitialGameName","playerId","href","TextField","label","onChange","userName","WordHintInput","submitHint","keyPressed","onKeyPress","disabled","Send","PencilAnimation","styleObj1","backgroundColor","styleObj2","borderTopColor","style","WordHint","currentHint","hint","styleObj","author","showPencil","showCheck","showDuplicateToggle","toggleDuplicate","classes","push","duplicate","extraClasses","showInput","Checkbox","icon","Mood","checkedIcon","MoodBad","checked","allColors","getRandomColor","Math","floor","random","ColorPicker","select","colorButtons","NewPlayer","setColor","currentPlayer","required","RoundSelector","numOfPlayers","options","i","wordCount","count","disableBackdropClick","GameLobby","roundDialogOpen","setPlayerProps","selectNumRounds","api","resultPlayer","setLocalPlayer","setTheme","playerAdded","isHost","isInGame","listOfPlayers","newPlayerName","newPlayerColor","tOptions","context","WordCard","guesserText","word","guesser","isGuesser","guess","guessedRight","guesserName","borderColor","WordAdder","words","index","parseInt","substr","newWords","numOfWords","some","add","wordFields","placeholder","enterDisabled","GamePreparation","addWords","enteredWords","numWordsPerPlayer","myWords","allMyWordsEntered","wordsEntered","myWordCards","GameEndView","correctWords","wordResult","wrongWords","GameStats","gamePhase","roundHostName","roundHost","currentGuesser","HintWriting","slice","HintComparing","Guessing","Solution","round","roundCount","rightCount","wrongCount","HintWritingView","currentUser","currentWord","currentHints","hints","hintObj","hintIsMine","authorName","showHint","HintComparingView","showHints","hintIndex","isRoundHost","isDuplicate","GuessingView","SolutionView","solutionButton2","currentGuess","solutionButton1","JustOneGame","currentGame","gameContent","gameStats","Preparation","App","userColor","setUserColor","setUserTheme","prefersDarkMode","useMediaQuery","primaryColor","startsWith","useMemo","createMuiTheme","palette","main","type","classNames","ThemeProvider","fallback","square","elevation","path","match","params","children","Loader","CircularProgress","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.46f4944e.chunk.js","sourcesContent":["// api url\nconst isProd = window.location.hostname === 'justone.okj.name';\nconst apiPort = isProd ? '' : ':9000';\nexport const API_URL = window.location.protocol + '//' + window.location.hostname + apiPort + '/api';\nexport const GAME_URL = API_URL + '/games';\n\n// localStorage keys\nexport const SETTING_ID = 'playerId';\nexport const SETTING_NAME = 'playerName';\nexport const SETTING_COLOR = 'playerColor';\nexport const SETTING_THEME = 'darkTheme';\n\n// app content and theming\nexport const DEFAULT_NUM_WORDS: number = 2; // Two words per player\nexport const DEFAULT_PRIMARY_COLOR = '#43a047';\nexport const DEFAULT_SECONDARY_COLOR = '#d32f2f'; // also error dark\nexport enum ThemeMode {\n    AUTO = 'automatisch',\n    BRIGHT = 'hell',\n    DARK = 'dunkel'\n}","// custom module declarations\n\n// TODO \nexport interface IUser {\n    id: string;\n    name: string;\n    color?: string;\n    enteredWords?: string[];\n}\n\nexport interface IHint {\n    hint: string;\n    author: string;\n    isDuplicate?: boolean\n}\n\nexport enum GamePhase {\n    Init,\n    Preparation,\n    HintWriting,\n    HintComparing,\n    Guessing,\n    Solution,\n    End\n}\n\nexport interface WordResult {\n    word: string;\n    guess: string;\n}\n\nexport interface IGame {\n    id: string;\n    name: string;\n    words: string[];\n    players: IUser[];\n    host: string; // hostId\n    wordsPerPlayer: number;\n\n    round: number;\n    phase: GamePhase;\n    currentWord?: string;\n    currentGuesser?: string;\n    currentGuess?: string;\n    guessedRight?: boolean;\n    roundHost?: string;\n    hints: IHint[];\n    correctWords: WordResult[];\n    wrongWords: WordResult[];\n}","import React from 'react';\nimport { List, ListItem, ListItemText, DialogTitle, Dialog } from '@material-ui/core';\nimport { Trans } from 'react-i18next';\n\ntype UserConfigProps = {\n    tKey: string,\n    onClose: (value: string)=>void,\n    selectedValue: string,\n    possibleValues: {val: string, tKey: string}[],\n    open: boolean\n};\n\nexport class UserConfig extends React.Component<UserConfigProps> {\n    render() {\n        const { tKey, open, onClose, selectedValue, possibleValues } = this.props;\n\n        const handleClose = () => {\n            onClose(selectedValue);\n        };\n\n        const handleListItemClick = (value: string) => {\n            onClose(value);\n        };\n\n        return (\n            <Dialog onClose={handleClose} open={open}>\n                <DialogTitle>\n                    <Trans i18nKey={tKey}>Einstellung</Trans>\n                </DialogTitle>\n                <List>\n                    {possibleValues.map((value: {val: string, tKey: string}) => (\n                        <ListItem button onClick={() => handleListItemClick(value.val)} key={value.val} selected={selectedValue === value.val}>\n                            <ListItemText primary={<Trans i18nKey={value.tKey}>{value.val}</Trans>} />\n                        </ListItem>\n                    ))}\n                </List>\n            </Dialog>\n        );\n    }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { AppBar, Toolbar, IconButton, Typography, Button, Menu, MenuItem, ListItemIcon } from '@material-ui/core';\nimport { \n    Home as HomeIcon, \n    AccountCircle as AccountCircleIcon, \n    Translate as TranslateIcon, \n    BrightnessMedium as BrightnessMediumIcon \n} from '@material-ui/icons';\n\nimport { SETTING_NAME, ThemeMode } from '../shared/constants';\n\nimport { UserConfig } from '../common/UserConfig';\n\ntype HeaderBarProps = {\n    userTheme: string,\n    applyUserTheme: (color: string)=>void\n};\n\nexport const HeaderBar = (props: HeaderBarProps) => {\n    const { i18n } = useTranslation();\n    const { userTheme, applyUserTheme } = props;\n    const [themeConfigOpen, setThemeConfigOpen] = React.useState(false);\n    const [languageConfigOpen, setLanguageConfigOpen] = React.useState(false);\n    const [language, setLanguage] = React.useState(i18n.language);\n    const [anchorEl, setAnchorEl] = React.useState(null);\n\n    const openMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\n        const target: any = event.currentTarget; // TODO \n        setAnchorEl(target);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n    };\n\n    const changeLanguage = (lng: string) => {\n        setLanguage(lng);\n        i18n.changeLanguage(lng);\n    };\n\n    const currentUserName: string|null = localStorage.getItem(SETTING_NAME);\n\n    const availableThemes = [\n        { val: ThemeMode.AUTO, tKey: 'THEMEPICK.AUTO' },\n        { val: ThemeMode.BRIGHT, tKey: 'THEMEPICK.BRIGHT' },\n        { val: ThemeMode.DARK, tKey: 'THEMEPICK.DARK' }\n    ];\n\n    const availableLanguages = [\n        { val: 'de', tKey: 'LANGPICK.DE' },\n        { val: 'en', tKey: 'LANGPICK.EN' }\n    ];\n\n    return (\n        <AppBar position=\"sticky\">\n            <Toolbar>\n                <Link to=\"/\" className=\"ButtonLink\">\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"home\">\n                        <HomeIcon />\n                    </IconButton>\n                </Link>\n                <Typography variant=\"h2\" className=\"appTitle\">\n                    <Trans i18nKey=\"APP_TITLE\">Nur ein Wort!</Trans>\n                </Typography>\n                { \n                    currentUserName ? \n                    <Button onClick={openMenu} className=\"Account-button\" color=\"inherit\" startIcon={<AccountCircleIcon />}>\n                        {currentUserName}\n                    </Button> : \n                    <IconButton onClick={openMenu} edge=\"end\" color=\"inherit\">\n                        <AccountCircleIcon />\n                    </IconButton>\n                }\n                <Menu\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleMenuClose}\n                >\n                    <MenuItem onClick={()=>{setThemeConfigOpen(true);handleMenuClose();}}>\n                        <ListItemIcon><BrightnessMediumIcon/></ListItemIcon>\n                        <Trans i18nKey=\"THEMEPICK.HEADING\">Nachtmodus</Trans>\n                    </MenuItem>\n                    <MenuItem onClick={()=>{setLanguageConfigOpen(true);handleMenuClose();}}>\n                        <ListItemIcon><TranslateIcon/></ListItemIcon>\n                        <Trans i18nKey=\"LANGPICK.HEADING\">Sprache</Trans>\n                    </MenuItem>\n                </Menu>\n                <UserConfig \n                    tKey=\"THEMEPICK.HEADING\"\n                    open={themeConfigOpen} \n                    onClose={(theme: string) => { applyUserTheme(theme); setThemeConfigOpen(false); }}\n                    selectedValue={userTheme} \n                    possibleValues={availableThemes}\n                ></UserConfig>\n                <UserConfig \n                    tKey=\"LANGPICK.HEADING\"\n                    open={languageConfigOpen} \n                    onClose={(lng: string) => { changeLanguage(lng); setLanguageConfigOpen(false); }}\n                    selectedValue={language} \n                    possibleValues={availableLanguages}\n                ></UserConfig>\n            </Toolbar>\n        </AppBar>\n    );    \n}\n\nexport default HeaderBar;\n\n","import i18n from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\ni18n\n    // load translation using http -> see /public/locales\n    // learn more: https://github.com/i18next/i18next-http-backend\n    .use(Backend)\n    // detect user language\n    // learn more: https://github.com/i18next/i18next-browser-languageDetector\n    .use(LanguageDetector)\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n        fallbackLng: 'de',\n        debug: true,\n        initImmediate: false,\n\n        interpolation: {\n            escapeValue: false, // not needed for react as it escapes by default\n        },\n    });\n\n// saveMissing: true, // TODO\n\n\nexport default i18n;","import { SETTING_ID } from './constants';\nimport { IGame, IUser } from '../custom.d';\nimport shortid from 'shortid';\nimport i18n from '../i18n'; \n\nexport function getCurrentUserId() {\n\tlet userId = localStorage.getItem(SETTING_ID) || '';\n\tif (!userId) {\n\t\tuserId = generateId();\n\t\tlocalStorage.setItem(SETTING_ID, userId);\n\t}\n\treturn userId;\n}\n\nexport function getCurrentUserInGame(game: IGame): IUser|undefined {\n    return getUserInGame(game, getCurrentUserId());\n}\n\nexport function getUserInGame(game: IGame, userId?: string): IUser|undefined {\n    return game.players.find((player: IUser) => player.id === userId);\n}\n\nexport function generateId() {\n\tshortid.characters('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZüÜ');\n\treturn shortid();\n}\n\nexport function setDocumentTitle(gameName?: string) {\n\tconst appTitleFallback = 'Nur ein Wort!';\n    if (gameName) {\n        document.title = `${i18n.t('APP_TITLE', appTitleFallback)} - ${gameName}`;\n    } else {\n        document.title = i18n.t('APP_TITLE', appTitleFallback);\n    }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n    List, \n    ListItem, \n    ListItemText, \n    ListItemSecondaryAction, \n    IconButton,\n    Paper,\n    Typography\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Trans } from 'react-i18next';\nimport { IGame, GamePhase } from '../custom.d';\n\nimport { SETTING_ID, SETTING_NAME } from '../shared/constants';\nimport { getCurrentUserInGame } from '../shared/functions';\n\ntype GameListProps = {\n    allGames: IGame[],\n    deleteGame: (gameId:string)=>void,\n};\n\ntype GameListState = {\n}\n\nexport class GameList extends React.Component<GameListProps,GameListState> {\n    public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n    public currentUserName: string = localStorage.getItem(SETTING_NAME) || '';\n\n    render() {\n        const {allGames,deleteGame} = this.props;\n        const newGames = allGames.filter(game => game.phase === GamePhase.Init && !getCurrentUserInGame(game));\n        const onGoingGames = allGames.filter(game => \n            ![GamePhase.Init,GamePhase.End].includes(game.phase) || (game.phase === GamePhase.Init && !!getCurrentUserInGame(game))\n        );\n        const doneGames = allGames.filter(game => game.phase === GamePhase.End);\n\n        const createListItem = (game: IGame) => {\n            const playersString = game.players.map(p => p.name).join(', ') || '-';\n\n            return (\n                <ListItem key={game.id} className=\"GameListItem\"\n                    {...{ to: `/${game.id}` }}\n                    component={Link}\n                    button\n                >\n                    <ListItemText \n                        id={game.id} \n                        primary={`${game.name || game.id}`}\n                        secondary={<Trans i18nKey=\"HOME.GAME_LIST.PLAYERS\">Spieler: {{playersString}}</Trans>} \n                    />\n                    {\n                        this.currentUserId === game.host && (\n                            <ListItemSecondaryAction>\n                                <IconButton onClick={() => deleteGame(game.id)}>\n                                    <DeleteIcon/>\n                                </IconButton>\n                            </ListItemSecondaryAction>\n                        )\n                    }\n                </ListItem>\n            );\n        }\n\n        const newGamesList = newGames.map(createListItem);\n        const onGoingGamesList = onGoingGames.map(createListItem);\n        const doneGamesList = doneGames.map(createListItem);\n\n        return (\n            <div className=\"GameList\">\n                {\n                    onGoingGamesList.length > 0 && (\n                        <Paper>\n                            <Typography variant=\"h5\"><Trans i18nKey=\"HOME.GAME_LIST.ONGOING\">Meine laufenden Spiele</Trans></Typography>\n                            <List>\n                                {onGoingGamesList}\n                            </List> \n                        </Paper>\n                    )\n                }\n                {\n                    newGamesList.length > 0 && (\n                        <Paper>\n                            <Typography variant=\"h5\"><Trans i18nKey=\"HOME.GAME_LIST.NEW\">Neue Spiele</Trans></Typography>\n                            <List>\n                                {newGamesList}\n                            </List> \n                        </Paper>\n                    )\n                }\n                {\n                    doneGamesList.length > 0 && (\n                        <Paper>\n                            <Typography variant=\"h5\"><Trans i18nKey=\"HOME.GAME_LIST.DONE\">Meine beendeten Spiele</Trans></Typography>\n                            <List>\n                                {doneGamesList}\n                            </List> \n                        </Paper>\n                    )\n                }\n            </div>\n        );\n    }\n}\n\n/*\nTODO Share Button\n\nimport ShareIcon from '@material-ui/icons/Share';\nimport {AlertBar} from '../common/AlertBar';\n\n    public state: GameListState = {\n        showAlert: false,\n        alertText: ''\n    }\n        const {showAlert,alertText} = this.state;\n\n        const shareGame = (gameId: string) => {\n            const gameUrl = `${window.location.protocol}//${window.location.host}/${gameId}`;\n            navigator.clipboard.writeText(gameUrl);\n            this.setState({\n                showAlert: true,\n                alertText: `Link zum Spiel wurde in die Zwischenablage kopiert`\n            });\n        }\n\n        const hideAlert = ()=> {\n            this.setState({\n                showAlert: false,\n                alertText: ``\n            });\n        }\n\n                    {\n                        game.phase === GamePhase.Init && (\n                            <ListItemSecondaryAction>\n                                <IconButton onClick={() => shareGame(game.id)}>\n                                    <ShareIcon/>\n                                </IconButton>\n                            </ListItemSecondaryAction>\n                        )\n                    }\n\n                <AlertBar show={showAlert} alertText={alertText} onClose={hideAlert}/>\n*/","import { GAME_URL } from './constants';\nimport { getCurrentUserId } from './functions';\nimport { IGame, IUser } from '../custom.d';\n\nexport async function loadGames(): Promise<IGame[]> {\n    return (await _get('all')).games || [];\n}\n\nexport async function loadGame(id: string): Promise<IGame> {\n    return (await _get(id)).game;\n}\n\nexport async function createGame(game: IGame): Promise<{id:string,playerId:string}> {\n    return _post('add', {game});\n}\n\nexport function deleteGame(id: string) {\n    return _delete(`delete/${id}`);\n}\n\nexport async function addPlayer(id: string, player: IUser): Promise<IUser> {\n    return (await _put(`${id}/addPlayer`, {player})).player;\n}\n\nexport async function updatePlayer(id: string, player: IUser): Promise<IUser> {\n    return (await _put(`${id}/updatePlayer`, {player})).player;\n}\n\nexport function startPreparation(id: string, wordsPerPlayer: number) {\n    return _put(`${id}/startPreparation`, {wordsPerPlayer});\n}\n\nexport function submitHint(id: string, hint: string) {\n    return _put(`${id}/hint`, {hint});\n}\n\nexport function toggleDuplicate(id: string, hintIndex: number) {\n    return _put(`${id}/toggleDuplicateHint`, {hintIndex});\n}\n\nexport function showHints(id: string) {\n    return _put(`${id}/showHints`);\n}\n\nexport function guess(id: string, guess: string) {\n    return _put(`${id}/guess`, {guess});\n}\n\nexport function resolveRound(id: string, correct: boolean) {\n    return _put(`${id}/resolve`, {correct});\n}\n\n\nfunction _get(endpoint: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n        fetch(`${GAME_URL}/${endpoint}`, {\n            method: 'GET',\n            headers: {\n                ..._getAuthHeader()\n            }\n        })\n            .then(res => res.json())\n            .then((data) => {\n                resolve(data);\n            }, (error) => {\n                console.error(error);\n                reject(error);\n            });\n    });\n}\n\nfunction _post(endpoint: string, data: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n        fetch(`${GAME_URL}/${endpoint}`, {\n            method: 'POST',\n            headers: {\n                ..._getAuthHeader(),\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            .then((data) => {\n                resolve(data);\n            }, (error) => {\n                console.error(error);\n                reject(error);\n            })\n    });\n}\n\nfunction _put(endpoint: string, data?: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n        fetch(`${GAME_URL}/${endpoint}`, {\n            method: 'PUT',\n            headers: {\n                ..._getAuthHeader(),\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(data)\n        })\n            .then(res => {\n                res.json().then(data => {\n                    resolve(data);\n                }, error => {\n                    resolve();\n                });\n            }, (error) => {\n                console.error(error);\n                reject(error);\n            })\n    });\n}\n\nfunction _delete(endpoint: string) {\n    return new Promise((resolve, reject) => {\n        fetch(`${GAME_URL}/${endpoint}`, { \n            method: 'DELETE',\n            headers: {\n                ..._getAuthHeader()\n            }\n        })\n            .then((data) => {\n                resolve();\n            }, (error) => {\n                console.error(error);\n                reject(error);\n            })\n    });   \n}\n\nfunction _getAuthHeader() {\n    return {\n        'Authorization': getCurrentUserId()\n    }\n}","import React from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport { Trans } from 'react-i18next';\nimport { IGame } from '../custom.d';\nimport { GameList } from './GameList';\n\nimport { SETTING_ID, SETTING_NAME, DEFAULT_NUM_WORDS } from '../shared/constants';\nimport { setDocumentTitle } from '../shared/functions';\nimport { loadGames, createGame, deleteGame } from '../shared/apiFunctions';\nimport i18n from '../i18n';\n\nconst POLLING_INTERVAL = 3000;\n\ntype JustOneHomeProps = {};\ntype JustOneHomeState = {\n    newGameName: string|null,\n    allGames: IGame[]\n};\n\nexport class JustOneHome extends React.Component<JustOneHomeProps,JustOneHomeState> {\n    public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n    public currentUserName: string = localStorage.getItem(SETTING_NAME) || '';\n\n    private _interval: number|undefined;\n    private _isMounted: boolean = false;\n\n    constructor(props: JustOneHomeProps) {\n        super(props);\n\n        this.createGame = this.createGame.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.deleteGame = this.deleteGame.bind(this);\n\n        this.state = { allGames: [], newGameName: null };\n    }\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        setDocumentTitle();\n\n        this.loadGames();\n        this._interval = window.setInterval(this.loadGames.bind(this), POLLING_INTERVAL);\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        clearInterval(this._interval);\n    }\n\n    async loadGames() {\n        let games = await loadGames();\n        if (!this._isMounted) return;\n        this.setState({\n            allGames: games\n        });\n    }\n\n    deleteGame(gameId: string) {\n        deleteGame(gameId);\n        this.setState((state) => {\n            return {\n                allGames: state.allGames.filter(g => g.id !== gameId)\n            }\n        });\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({newGameName: event.target.value});\n    }\n\n    async createGame() {\n        const game: IGame = emptyGame();\n        let gameName = this.state.newGameName;\n        if (gameName === null) gameName = getInitialGameName(this.currentUserName);\n        game.name = gameName;\n\n        const {id, playerId} = await createGame(game);\n\n        if(this.currentUserId !== playerId) {\n            localStorage.setItem(SETTING_ID, playerId);\n        }\n        window.location.href = '/' + id;\n    }\n\n    render() {\n        let {newGameName, allGames} = this.state;\n        if (newGameName === null) newGameName = getInitialGameName(this.currentUserName);\n\n        return (\n            <div className=\"JustOneHome\">\n                <TextField label={<Trans i18nKey=\"HOME.GAME_NAME\">Spielname</Trans>} value={newGameName} onChange={this.handleChange} />\n                <Button variant=\"contained\" color=\"primary\" onClick={this.createGame}>\n                    <Trans i18nKey=\"HOME.NEW_GAME\">Neues Spiel</Trans>\n                </Button>\n                <GameList allGames={allGames} deleteGame={this.deleteGame} />\n            </div>\n        );\n    }\n}\n\nfunction getInitialGameName(userName?: string) {\n    return userName ? i18n.t('HOME.NEW_GAME_PERSONAL', 'Neues Spiel', {name: userName}) : i18n.t('HOME.NEW_GAME', 'Neues Spiel');\n}\n\nfunction emptyGame(): IGame {\n    return {\"id\":\"\", \"name\": \"\", \"words\":[],\"players\":[],\"host\":\"\",\"wordsPerPlayer\":DEFAULT_NUM_WORDS,\"round\":0,\"phase\":0,\"hints\":[],\"correctWords\":[],\"wrongWords\":[]};\n}","import React from 'react';\nimport i18n from '../../i18n';\nimport { IconButton } from '@material-ui/core';\nimport { Send as SendIcon } from '@material-ui/icons';\nimport TextField from '@material-ui/core/TextField';\n\ntype WordHintInputProps = {\n    submitHint: (hint: string)=>void\n    label?: string\n};\ntype WordHintInputState = {\n    value: string, \n};\n\nexport class WordHintInput extends React.Component<WordHintInputProps,WordHintInputState> {\n\n    constructor(props: WordHintInputProps) {\n    \tsuper(props);\n        this.state = {value: ''};\n\n        this.handleChange = this.handleChange.bind(this);\n        this.submitHint = this.submitHint.bind(this);\n        this.keyPressed = this.keyPressed.bind(this);\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({value: event.target.value});\n    }\n\n    submitHint() {\n    \tthis.props.submitHint(this.state.value)\n    \tthis.setState({value: ''});\n    }\n\n    keyPressed(event: React.KeyboardEvent<HTMLInputElement>) {\n    \tif (event.key === \"Enter\") {\n    \t    this.submitHint()\n    \t}\n    }\n\n    render() {\n        return (\n\t        <div className=\"Word-hint-input\">\n\t        \t<TextField label={this.props.label || i18n.t('GAME.COMMON.ENTER_HINT', 'Hinweis eingeben')}\n\t        \t\tvalue={this.state.value} \n\t        \t\tonChange={this.handleChange} \n\t        \t\tonKeyPress={this.keyPressed} />\n    \t\t\t<IconButton color=\"primary\" \n    \t\t\t\tdisabled={!this.state.value} \n    \t\t\t\tonClick={this.submitHint}>\n                    <SendIcon></SendIcon>\n                </IconButton>\n\t        </div>\n        );\n    }\n\n}","import React from 'react';\n\ntype PencilAnimationProps = {\n\tcolor?: string,\n}\n\nexport class PencilAnimation extends React.Component<PencilAnimationProps> {\n\n    render() {\n        const styleObj1 = {\n        \tbackgroundColor: this.props.color,\n        };\n        const styleObj2 = {\n        \tborderTopColor: this.props.color,\n        };\n\n        return (\n\t    <div className=\"pencil\">\n                <div className=\"body\" style={styleObj1}></div>\n                <div className=\"nib\" style={styleObj2}></div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { WordHintInput } from './WordHintInput';\nimport { PencilAnimation } from '../../common/PencilAnimation';\nimport { Checkbox, Paper } from '@material-ui/core';\nimport { Mood as MoodIcon, MoodBad as MoodBadIcon } from '@material-ui/icons';\n\ntype WordHintProps = {\n\thint?: string,\n\tcolor?: string,\n\tduplicate?: boolean,\n    author?: string,\n    showPencil?: boolean,\n    showCheck?: boolean,\n    showInput?: boolean,\n    submitHint?: (hint:string)=>void,\n    showDuplicateToggle?: boolean,\n    toggleDuplicate?: ()=>void\n}\n\nexport class WordHint extends React.Component<WordHintProps> {\n\n    render() {\n    \tconst currentHint = this.props.hint;\n        const color = this.props.color;\n        const styleObj = {\n        \t'color': color,\n            'borderColor': color\n        };\n        const author = this.props.author;\n        const showPencil = this.props.showPencil || !this.props.hint;\n        const showCheck = this.props.showCheck;\n        const showDuplicateToggle = this.props.showDuplicateToggle;\n        const toggleDuplicate = this.props.toggleDuplicate;\n\n        const classes = ['Word-hint'];\n        if (showPencil) classes.push('Word-hint-writing');\n        if (this.props.duplicate) classes.push('Word-hint-duplicate');\n        if (currentHint && currentHint.length > 20) classes.push('Word-hint-huge');\n        else if (currentHint && currentHint.length > 14) classes.push('Word-hint-long');\n        const extraClasses = classes.join(' ');\n\n        if (this.props.showInput && this.props.submitHint) {\n            return (\n                <Paper className={extraClasses} style={styleObj}>\n                    <WordHintInput submitHint={this.props.submitHint}/>\n                    {author && <span className=\"Author-tag\">{author}</span>}\n                </Paper>\n            );\n        } else {\n            return (\n                <Paper className={extraClasses} style={styleObj}>\n                    {!showCheck && currentHint}\n                    {showCheck && <span className=\"Done-icon\">✓</span>}\n                    {showPencil && <PencilAnimation color={color}></PencilAnimation>}\n                    {showDuplicateToggle && toggleDuplicate && (\n                        <Checkbox className=\"Duplicate-toggle\" \n                            icon={<MoodIcon />} checkedIcon={<MoodBadIcon />} \n                            checked={this.props.duplicate}\n                            onChange={()=>toggleDuplicate()}/>\n                    )}\n                    {author && <span className=\"Author-tag\">{author}</span>}\n                </Paper>\n            );\n        }\n\n        \n    }\n\n}","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\n\nexport const allColors: string[] = [\n    '#e51235',\n    '#d81b60',\n    '#8e24aa',\n    '#6e45c1',\n    '#4959cc',\n    '#1e88e5',\n    '#039be5',\n    '#00acc1',\n    '#00897b',\n    '#43a047',\n    '#7cb342',\n    '#c0ca33',\n    '#ffc215',\n    '#ffab00',\n    '#ff6d00',\n    '#f4511e'\n];\n\nexport function getRandomColor(color?: string|null): string {\n    if (!color || !allColors.includes(color)) {\n        return allColors[Math.floor(Math.random()*allColors.length)];\n    } else {\n        return color;\n    }\n}\n\ntype ColorPickerProps = {\n\tselected?: string;\n    select: (color: string)=>void;\n}\n\nexport class ColorPicker extends React.Component<ColorPickerProps> {\n\n    render() {\n    \tconst { selected, select } = this.props;\n\n        const colorButtons = allColors.map((color: string) => {\n            const classes = ['Color-button'];\n            if (selected === color) classes.push('Color-selected');\n            return (\n                <IconButton className={classes.join(' ')} onClick={() => select(color)} style={{ backgroundColor: color }} key={color}>\n                    {selected === color && <CheckIcon/>}\n                </IconButton>\n            )\n        });\n\n        return (\n            <div className=\"Color-picker\">\n                { colorButtons }\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { IUser } from '../custom.d';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { ColorPicker } from '../common/ColorPicker';\n\ntype NewPlayerProps = {\n    addPlayer: (player: IUser) => void,\n    updatePlayer: (player: IUser) => void,\n    currentPlayer: IUser\n}\n\nexport class NewPlayer extends React.Component<NewPlayerProps> {\n\n    constructor(props: NewPlayerProps) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.setColor = this.setColor.bind(this);\n        this.addPlayer = this.addPlayer.bind(this);\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        if (event.target.name === 'name') {\n            this.props.currentPlayer.name = event.target.value;\n\n            this.props.updatePlayer(this.props.currentPlayer);     \n\n        }\n    }\n\n    setColor(color: string) {\n        this.props.currentPlayer.color = color;\n        this.props.updatePlayer(this.props.currentPlayer);    \n    }\n\n    addPlayer() {\n        this.props.addPlayer(this.props.currentPlayer);\n    }\n\n    render() {\n        const { currentPlayer } = this.props;\n\n        return (\n            <div className=\"New-player\">\n                <TextField required label=\"Spielername\" \n                    name='name'\n                    value={currentPlayer.name} \n                    onChange={this.handleChange}/>\n                <ColorPicker select={this.setColor} selected={currentPlayer.color}/>\n                <Button variant=\"contained\" color=\"primary\" \n                    disabled={!currentPlayer.name} \n                    onClick={this.addPlayer}><Trans i18nKey=\"GAME.LOBBY.JOIN\">Mitspielen</Trans></Button>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { List, ListItem, ListItemText, DialogTitle, Dialog } from '@material-ui/core';\nimport { Trans } from 'react-i18next';\n\ntype RoundSelectorProps = {\n    onClose: (value?: number)=>void,\n    numOfPlayers: number,\n    open: boolean\n};\n\nexport class RoundSelector extends React.Component<RoundSelectorProps> {\n    render() {\n        const { open, onClose, numOfPlayers } = this.props;\n\n        const handleClose = () => {\n            onClose();\n        };\n\n        const handleListItemClick = (value: number) => {\n            onClose(value);\n        };\n\n        const options = [];\n        for (let i = 0; i < 3; i++) {\n            const wordCount = i+1;\n            options.push(\n                <ListItem button onClick={() => handleListItemClick(wordCount)} key={wordCount}>\n                    <ListItemText \n                        primary={<Trans i18nKey=\"GAME.LOBBY.ROUND_SELECT.NUM\" count={wordCount*numOfPlayers}>{wordCount*numOfPlayers} Runden</Trans>}\n                        secondary={<Trans i18nKey=\"GAME.LOBBY.ROUND_SELECT.WORDS\" count={wordCount}>{wordCount} Begriff(e) pro Spieler</Trans>} />\n                </ListItem>\n            );\n        }\n\n        return (\n            <Dialog onClose={handleClose} open={open} disableBackdropClick>\n                <DialogTitle>\n                    <Trans i18nKey=\"GAME.LOBBY.ROUND_SELECT.HEADING\">Lege die Rundenanzahl fest</Trans>\n                </DialogTitle>\n                <List>\n                    {options}\n                </List>\n            </Dialog>\n        );\n    }\n}","import React from 'react';\nimport { IGame, IUser } from '../custom.d';\nimport { Button, Paper, Typography } from '@material-ui/core';\nimport { Trans } from 'react-i18next';\nimport { WordHint } from './components/WordHint';\nimport { NewPlayer } from '../common/NewPlayer';\nimport { RoundSelector } from './components/RoundSelector';\nimport { getRandomColor } from '../common/ColorPicker';\n\nimport { SETTING_ID, SETTING_NAME, SETTING_COLOR, DEFAULT_NUM_WORDS } from '../shared/constants';\nimport * as api from '../shared/apiFunctions';\n\ntype GameLobbyProps = {\n    game: IGame,\n    setTheme?: (color: string)=>void\n}\ntype GameLobbyState = {\n    currentPlayer: IUser,\n    roundDialogOpen: boolean,\n    playerAdded?: boolean\n}\n\nexport class GameLobby extends React.Component<GameLobbyProps,GameLobbyState> {\n\n    public state: GameLobbyState = { \n        currentPlayer: {\n            id: localStorage.getItem(SETTING_ID) || '',\n            name: localStorage.getItem(SETTING_NAME) || '',\n            color: getRandomColor(localStorage.getItem(SETTING_COLOR))\n        }, \n        roundDialogOpen: false\n    };\n\n    constructor(props: GameLobbyProps) {\n        super(props);\n\n        this.addPlayer = this.addPlayer.bind(this);\n        this.setPlayerProps = this.setPlayerProps.bind(this);\n        this.selectNumRounds = this.selectNumRounds.bind(this);\n        this.startPreparation = this.startPreparation.bind(this);\n    }\n\n    setPlayerProps(player: IUser) {\n        this.setState({\n            currentPlayer: player\n        });\n    }\n\n    async addPlayer(player: IUser) {\n        const resultPlayer = await api.addPlayer(this.props.game.id, player);\n        if (!resultPlayer) return;\n        this.setLocalPlayer(resultPlayer);\n    }\n\n    setLocalPlayer(player: IUser) {\n        localStorage.setItem(SETTING_ID, player.id);\n        localStorage.setItem(SETTING_NAME, player.name);\n        if (player.color) localStorage.setItem('playerColor', player.color);\n        if (this.props.setTheme && player.color) {\n            this.props.setTheme(player.color);\n        }\n        this.setState({\n            currentPlayer: player,\n            playerAdded: true\n        });\n    }\n\n    selectNumRounds() {\n        this.setState({\n            roundDialogOpen: true\n        });\n    }\n\n    startPreparation(wordsPerPlayer: number = DEFAULT_NUM_WORDS) {\n        this.setState({\n            roundDialogOpen: false\n        });\n\n        api.startPreparation(this.props.game.id, wordsPerPlayer);\n    }\n\n    render() {\n        const { game } = this.props;\n        const { currentPlayer, roundDialogOpen, playerAdded } = this.state;\n        const currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n        const isHost: boolean = !!currentUserId && game.host === currentUserId;\n        let isInGame: boolean = false;\n        const listOfPlayers = game.players.map(player => {\n            if (player.id === currentUserId) {\n                isInGame = true;\n            } \n            return (\n                <WordHint key={player.id} hint={player.name} color={player.color}></WordHint>\n            )\n        });\n        isInGame = isInGame || !!playerAdded;\n        const newPlayerName: string = !currentPlayer.name ? '?' : currentPlayer.name;\n        const newPlayerColor: string = !currentPlayer.color ? getRandomColor() : currentPlayer.color;\n\n        return (\n            <div className=\"Game-lobby\">\n                <div className=\"New-player\">\n                    { \n                        isInGame ? (\n                            <Paper className=\"StatusInfo\">\n                                <Trans i18nKey=\"GAME.LOBBY.WAIT_MESSAGE\" tOptions={{context: isHost ? 'HOST' : 'PLAYER'}}>\n                                    Warten auf Mitspieler ... Sobald alle Mitspieler da sind, kann der Spielleiter das Spiel starten.\n                                </Trans> \n                            </Paper>\n                        ) : (\n                            <NewPlayer currentPlayer={currentPlayer}\n                                updatePlayer={this.setPlayerProps}\n                                addPlayer={this.addPlayer}/>\n                        )\n                    }\n                    {\n                        isHost && isInGame && (\n                            <Button variant=\"contained\" color=\"primary\" \n                                disabled={game.players.length < 3}\n                                onClick={this.selectNumRounds}>\n                                <Trans i18nKey=\"GAME.LOBBY.START_BUTTON\">Alle Spieler sind da</Trans>\n                            </Button>\n                        )\n                    }\n                </div>\n                <div className=\"Player-list\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"COMMON.TEAMMATES\">Mitspieler</Trans>\n                    </Typography>\n                    {listOfPlayers}\n                    {!isInGame && <WordHint hint={newPlayerName} color={newPlayerColor} showPencil={true}></WordHint>}\n                </div>\n                <RoundSelector numOfPlayers={game.players.length} open={roundDialogOpen} onClose={this.startPreparation}/>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport i18n from '../../i18n';\nimport { Paper } from '@material-ui/core';\nimport { WordHintInput } from './WordHintInput';\n\ntype WordCardProps = {\n\tword: string;\n\tguesser?: string;\n\tcolor?: string;\n    isGuesser?: boolean;\n    guess?: string;\n    guessedRight?: boolean;\n    showInput?: boolean;\n    submitHint?: (hint:string)=>void\n}\n\nexport class WordCard extends React.Component<WordCardProps> {\n\n    render() {\n        const { word, guesser, color, isGuesser, guess, guessedRight, showInput, submitHint} = this.props\n        const guesserName = guesser;\n        let guesserText;\n        if (guesser) {\n            if (guess) {\n                guesserText = <Trans i18nKey=\"GAME.COMMON.CURRENT_GUESS\" tOptions={{context: (isGuesser ? 'ME' : '')}}>{{guesserName}}s    Rateversuch: {{guess}}</Trans>;\n            } else {\n                guesserText = <Trans i18nKey=\"GAME.COMMON.TURN_GUESSING\" tOptions={{context: (isGuesser ? 'ME' : '')}}>{{guesserName}} muss raten</Trans>;\n            }\n        } else if (guess) {\n            guesserText = <Trans i18nKey=\"GAME.COMMON.GUESS_SPEC\">Rateversuch: {{guess}}</Trans>;\n        }\n        const classes = ['Word-card'];\n        if (guess) {\n            if (guessedRight) {\n                classes.push('Word-card-correct');\n            } else {\n                classes.push('Word-card-wrong');\n            }\n        }\n\n        return (\n\t        <Paper className={classes.join(' ')} style={{borderColor: color}}>\n\t        \t{\n                    (showInput && submitHint) ? \n                    <WordHintInput submitHint={submitHint} label={i18n.t('GAME.COMMON.GUESS', 'Rateversuch')}/> : \n                    <span>{word}</span>\n                }\n                {guesserText && <span className=\"Author-tag\" style={{color: color}}>{guesserText}</span>}\n\t        </Paper>\n        );\n    }\n\n}","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { Button, Typography } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport i18n from '../../i18n';\n\ntype WordAdderProps = {\n    add: (words: string[])=>void,\n    numOfWords: number\n}\n\ntype WordAdderState = {\n    words: string[]\n}\n\nexport class WordAdder extends React.Component<WordAdderProps, WordAdderState> {\n\n    public state: WordAdderState = {\n        words: []\n    };\n\n    constructor(props: WordAdderProps) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.keyPressed = this.keyPressed.bind(this);\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        const index = parseInt(event.target.name.substr(4));\n        const word = event.target.value;\n        this.setState((state, props) => {\n            const newWords = state.words;\n            newWords[index] = word;\n            return {\n                words: newWords\n            };\n        });\n    }\n\n    keyPressed(event: React.KeyboardEvent<HTMLInputElement>) {\n        if (event.key === \"Enter\") {\n            const words = this.state.words;\n            const enterDisabled = words.length < this.props.numOfWords || words.some(word => !word || word.length === 0);\n            if (!enterDisabled) this.props.add(words);\n        }\n    }\n\n    render() {\n        const { add, numOfWords } = this.props;\n        const { words } = this.state;\n        const wordFields = [];\n        for (let i=0; i<numOfWords; i++) {\n            const label = i18n.t(\"GAME.PREP.WORD_ADDER.LABEL\", \"Wort \"+(i+1), {count: numOfWords, index: i+1});\n            wordFields.push(\n                <TextField required label={label}\n                    placeholder={i18n.t(\"GAME.PREP.WORD_ADDER.PLACEHOLDER\", \"Ratebegriff eingeben\")}\n                    name={`word${i}`}\n                    key={`word${i}`}\n                    value={words[i]||''} \n                    onChange={this.handleChange} \n                    onKeyPress={this.keyPressed}/>\n            );\n        }\n        \n        const enterDisabled = words.length < numOfWords || words.some(word => !word || word.length === 0);\n\n        return (\n            <div className=\"Word-adder\">\n                <Typography variant=\"subtitle1\">\n                    <Trans i18nKey=\"GAME.PREP.WORD_ADDER.HEADING\" count={numOfWords}>Gib Begriffe für das Spiel ein</Trans>\n                </Typography>\n                {wordFields}\n                <Button variant=\"contained\" color=\"primary\" \n                    disabled={enterDisabled} \n                    onClick={() => add(words)}>\n                    <Trans i18nKey=\"GAME.PREP.WORD_ADDER.BUTTON\" count={numOfWords}>Jetzt abschicken</Trans>\n                </Button>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { IGame, IUser } from '../custom.d';\nimport { Paper, Typography } from '@material-ui/core';\nimport { WordHint } from './components/WordHint';\nimport { WordCard } from './components/WordCard';\nimport { WordAdder } from './components/WordAdder';\nimport { getRandomColor } from '../common/ColorPicker';\n\nimport { SETTING_ID, SETTING_NAME, SETTING_COLOR, DEFAULT_NUM_WORDS } from '../shared/constants';\nimport * as api from '../shared/apiFunctions';\n\ntype GamePreparationProps = {\n    game: IGame\n}\n\nexport class GamePreparation extends React.Component<GamePreparationProps> {\n    // TODO central place for player\n    public currentPlayer: IUser =  {\n        id: localStorage.getItem(SETTING_ID) || '',\n        name: localStorage.getItem(SETTING_NAME) || '',\n        color: getRandomColor(localStorage.getItem(SETTING_COLOR))\n    };\n\n    constructor(props: GamePreparationProps) {\n        super(props);\n\n        this.addWords = this.addWords.bind(this);\n    }\n\n    async addWords(words: string[]) {\n        let player: IUser = this.currentPlayer;\n        player.enteredWords = words;\n\n        api.updatePlayer(this.props.game.id, player);\n    }\n\n    render() {\n        const { game } = this.props;\n        const numWordsPerPlayer = game.wordsPerPlayer || DEFAULT_NUM_WORDS;\n        const currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n        let isInGame: boolean = false;\n        let myWords: string[] = [];\n        let allMyWordsEntered: boolean = false;\n        const listOfPlayers = game.players.map(player => {\n            const wordsEntered: boolean = !!player.enteredWords && player.enteredWords.length === numWordsPerPlayer;\n            if (player.id === currentUserId) {\n                isInGame = true;\n                myWords = player.enteredWords || [];\n                allMyWordsEntered = wordsEntered;\n            } \n            return (\n                <WordHint key={player.id} hint={player.name} color={player.color} showPencil={!wordsEntered}></WordHint>\n            )\n        });\n\n        const myWordCards = myWords.map(word => <WordCard key={word} word={word} color={this.currentPlayer.color}/>)\n\n        // TODO not in game users\n        // TODO css classes\n        return (\n            <div className=\"Game-lobby\">\n                <div className=\"New-player\">\n                    { \n                        allMyWordsEntered || !isInGame ? ( \n                            <Paper className=\"StatusInfo\">\n                                <Trans i18nKey=\"GAME.PREP.WAIT_MESSAGE\">Warten auf Mitspieler ... Sobald alle fertig sind, geht's los.</Trans>\n                            </Paper>\n                        ) : (\n                            <WordAdder add={this.addWords} numOfWords={numWordsPerPlayer}/>\n                        )\n                    }\n                    {myWordCards.length > 0 && (\n                        <Typography variant=\"subtitle1\">\n                            <Trans i18nKey=\"GAME.PREP.MY_WORDS\" count={myWords.length}>Meine Begriffe</Trans>\n                        </Typography>\n                    )}\n                    {myWordCards}\n                </div>\n                <div className=\"Player-list\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"COMMON.TEAMMATES\">Mitspieler</Trans>\n                    </Typography>\n                    {listOfPlayers}\n                </div>\n            </div>\n        );\n    }\n\n}","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport {WordCard} from './components/WordCard';\nimport { IGame } from '../custom.d';\n\ntype GameEndViewProps = {\n    game: IGame\n};\n\nexport class GameEndView extends React.Component<GameEndViewProps> {\n    render() {\n        const game: IGame = this.props.game;\n        const correctWords = game.correctWords.map(wordResult => {\n            return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={true}/>\n        });\n        const wrongWords = game.wrongWords.map(wordResult => {\n            return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={false}/>\n        });\n\n        return (\n            <div className=\"Game-end-view\">\n                <div className=\"Correct-words\">\n                    <h2><Trans i18nKey=\"GAME.END.RIGHT\" count={game.correctWords.length}>Richtig</Trans></h2>\n                    {correctWords}\n                </div>\n                <div className=\"Wrong-words\">\n                    <h2><Trans i18nKey=\"GAME.END.WRONG\" count={game.wrongWords.length}>Falsch</Trans></h2>\n                    {wrongWords}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { IGame, GamePhase } from '../../custom.d';\nimport { getUserInGame } from '../../shared/functions';\n\ntype GameStatsProps = {\n    game: IGame\n};\n\nexport class GameStats extends React.Component<GameStatsProps> {\n    render() {\n        const game: IGame = this.props.game;\n        const roundHost = getUserInGame(game, game.roundHost) || { name: '?' };\n        const roundHostName = roundHost.name;\n        const guesser = getUserInGame(game, game.currentGuesser) || { name: '?' };\n        const guesserName = guesser.name;\n\n        let gamePhase;\n        switch(game.phase) {\n            case GamePhase.HintWriting: \n                const players = game.players.filter(p => game.currentGuesser && p.id !== game.currentGuesser).map(p => p.name);\n                const playersString = players.slice(0, players.length-1).join(', ') + ' und ' + players[players.length-1];\n                gamePhase = <Trans i18nKey=\"GAME.STATS.PHASE_WRITING\">{{playersString}} schreiben Hinweise auf...</Trans>;\n                break;\n            case GamePhase.HintComparing: \n                gamePhase = <Trans i18nKey=\"GAME.STATS.PHASE_COMPARING\">{{roundHostName}} überprüft die Hinweise ...</Trans>;\n                break;\n            case GamePhase.Guessing: \n                gamePhase = <Trans i18nKey=\"GAME.STATS.PHASE_GUESSING\">{{guesserName}} versucht den Begriff zu erraten...</Trans>;\n                break;\n            case GamePhase.Solution: \n                if (game.guessedRight) {\n                    gamePhase = <Trans i18nKey=\"GAME.STATS.PHASE_SOLUTION\">{{guesserName}} lag genau richtig!</Trans>;\n                } else {\n                    gamePhase = <Trans i18nKey=\"GAME.STATS.PHASE_SOLUTION_WRONG\">{{roundHostName}} lag daneben! {{guesserName}} entscheidet ob es trotzdem zählt...</Trans>;\n                }\n                break;\n        }\n\n        const round = game.round+1;\n        const roundCount = game.words.length;\n        const rightCount = game.correctWords.length;\n        const wrongCount = game.wrongWords.length;\n\n        return (\n            <div className=\"Game-progress\">\n                <div>\n                    <Trans i18nKey=\"GAME.STATS.ROUND\">\n                        Runde {{round}}/{{roundCount}}\n                    </Trans>, <Trans i18nKey=\"GAME.STATS.RIGHT\">\n                        Richtige: {{rightCount}}\n                    </Trans>, <Trans i18nKey=\"GAME.STATS.WRONG\">\n                        Falsche: {{wrongCount}}\n                    </Trans>\n                </div>\n                <div><Trans i18nKey=\"GAME.STATS.PHASE\">Phase</Trans>: {gamePhase}</div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport i18n from '../../i18n';\nimport { Typography } from '@material-ui/core';\nimport { IGame, IHint } from '../../custom.d';\nimport { WordCard } from '../components/WordCard';\nimport { WordHint } from '../components/WordHint';\n\nimport { getCurrentUserInGame, getUserInGame } from '../../shared/functions';\nimport * as api from '../../shared/apiFunctions';\n\ntype HintWritingViewProps = {\n    game: IGame\n};\n\nexport class HintWritingView extends React.Component<HintWritingViewProps> {\n    constructor(props: HintWritingViewProps) {\n        super(props);\n\n        this.submitHint = this.submitHint.bind(this);\n    }\n\n    submitHint(hint: string) {\n        api.submitHint(this.props.game.id, hint);\n    }\n\n    render() {\n        const game: IGame = this.props.game;\n        const currentUser = getCurrentUserInGame(game);\n        const guesser = getUserInGame(game, game.currentGuesser) || { name: '?', id: '?' };\n        const isGuesser = currentUser && currentUser.id === guesser.id;\n\n        const currentWord = isGuesser ? '?' : (game.currentWord || '');\n        const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n            const hint: string = hintObj.hint;\n            const hintIsMine = currentUser && currentUser.id === hintObj.author;\n            const author = getUserInGame(game, hintObj.author) || { name: '?', id: '?' };\n            const authorName = hintIsMine ? i18n.t('COMMON.ME', 'Ich') : author.name;\n            const showHint = !hint || hintIsMine;\n            const showInput = !hint && hintIsMine;\n\n            return (\n                <WordHint \n                    key={hintObj.author+index} \n                    hint={hint} \n                    color={author.color}\n                    showInput={showInput}\n                    submitHint={this.submitHint}\n                    showCheck={!showHint}\n                    author={authorName}\n                />\n            );\n        });\n\n        return (\n            <div className=\"Game-field\">\n                <div className=\"Current-word\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.WORD\">Begriff</Trans>\n                    </Typography>\n                    <WordCard \n                        word={currentWord} \n                        guesser={guesser.name} \n                        isGuesser={isGuesser}\n                        color={guesser.color} />\n                </div>\n                <div className=\"Current-hints\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.PLAYER_HINTS\">Spieler-Hinweise</Trans>\n                    </Typography>\n                    <div className=\"WordHint-list\">{currentHints}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport i18n from '../../i18n';\nimport { Button, Typography } from '@material-ui/core';\nimport { IGame, IHint } from '../../custom.d';\nimport { WordCard } from '../components/WordCard';\nimport { WordHint } from '../components/WordHint';\n\nimport { getCurrentUserInGame, getUserInGame } from '../../shared/functions';\nimport * as api from '../../shared/apiFunctions';\n\ntype HintComparingViewProps = {\n    game: IGame\n};\n\nexport class HintComparingView extends React.Component<HintComparingViewProps> {\n    constructor(props: HintComparingViewProps) {\n        super(props);\n\n        this.toggleDuplicate = this.toggleDuplicate.bind(this);\n        this.showHints = this.showHints.bind(this);\n    }\n\n    toggleDuplicate(hintIndex: number) {\n        api.toggleDuplicate(this.props.game.id, hintIndex);\n    }\n\n    showHints() {\n        api.showHints(this.props.game.id);\n    }\n\n    render() {\n        const game: IGame = this.props.game;\n        const currentUser = getCurrentUserInGame(game);\n        const guesser = getUserInGame(game, game.currentGuesser) || { name: '?', id: '?' };\n        const isGuesser = currentUser && currentUser.id === guesser.id;\n        const guesserName = guesser.name;\n        const isRoundHost = currentUser && currentUser.id === game.roundHost;\n\n        const currentWord = isGuesser ? '?' : (game.currentWord || '');\n        const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n            const hintIsMine = currentUser && currentUser.id === hintObj.author;\n            const author = getUserInGame(game, hintObj.author) || { name: '?', id: '?' };\n            const authorName = hintIsMine ? i18n.t('COMMON.ME', 'Ich') : author.name;\n\n            return (\n                <WordHint \n                    key={hintObj.author+index} \n                    hint={hintObj.hint} \n                    color={author.color}\n                    showCheck={isGuesser}\n                    duplicate={hintObj.isDuplicate}\n                    showDuplicateToggle={isRoundHost}\n                    toggleDuplicate={()=>this.toggleDuplicate(index)}\n                    author={authorName}\n                />\n            );\n        });\n\n        return (\n            <div className=\"Game-field\">\n                <div className=\"Current-word\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.WORD\">Begriff</Trans>\n                    </Typography>\n                    <WordCard \n                        word={currentWord} \n                        guesser={guesser.name} \n                        isGuesser={isGuesser}\n                        color={guesser.color} />\n                </div>\n                <div className=\"Current-hints\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.PLAYER_HINTS\">Spieler-Hinweise</Trans>\n                    </Typography>\n                    <div className=\"WordHint-list\">{currentHints}</div>\n                    { isRoundHost && (\n                        <Typography variant=\"subtitle1\">\n                            <Trans i18nKey=\"GAME.COMPARING.INFO\">Markiere ungültige Hinweise</Trans>\n                        </Typography>\n                    )}\n                    {isRoundHost && (\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.showHints}>\n                            <Trans i18nKey=\"GAME.COMPARING.BUTTON\">{{guesserName}} kann losraten!</Trans>\n                        </Button>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport i18n from '../../i18n';\nimport { Typography } from '@material-ui/core';\nimport { IGame, IHint } from '../../custom.d';\nimport { WordCard } from '../components/WordCard';\nimport { WordHint } from '../components/WordHint';\n\nimport { getCurrentUserInGame, getUserInGame } from '../../shared/functions';\nimport * as api from '../../shared/apiFunctions';\n\ntype GuessingViewProps = {\n    game: IGame\n};\n\nexport class GuessingView extends React.Component<GuessingViewProps> {\n    constructor(props: GuessingViewProps) {\n        super(props);\n\n        this.guess = this.guess.bind(this);\n    }\n\n    guess(guess: string) {\n        api.guess(this.props.game.id, guess);\n    }\n\n    render() {\n        const game: IGame = this.props.game;\n        const currentUser = getCurrentUserInGame(game);\n        const guesser = getUserInGame(game, game.currentGuesser) || { name: '?', id: '?' };\n        const isGuesser = currentUser && currentUser.id === guesser.id;\n\n        const currentWord = isGuesser ? '?' : (game.currentWord || '');\n        const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n            let hint: string = hintObj.hint;\n            const hintIsMine = currentUser && currentUser.id === hintObj.author;\n            const author = getUserInGame(game, hintObj.author) || { name: '?', id: '?' };\n            const authorName = hintIsMine ? i18n.t('COMMON.ME', 'Ich') : author.name;\n\n            if (isGuesser && hintObj.isDuplicate) {\n                hint = 'LEIDER DOPPELT';\n            } \n\n            return (\n                <WordHint \n                    key={hintObj.author+index} \n                    hint={hint} \n                    color={author.color}\n                    duplicate={hintObj.isDuplicate}\n                    author={authorName}\n                />\n            );\n        });\n\n        return (\n            <div className=\"Game-field\">\n                <div className=\"Current-word\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.WORD\">Begriff</Trans>\n                    </Typography>\n                    <WordCard \n                        word={currentWord} \n                        guesser={guesser.name} \n                        isGuesser={isGuesser}\n                        color={guesser.color} \n                        showInput={isGuesser}\n                        submitHint={this.guess}/>\n                </div>\n                <div className=\"Current-hints\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.PLAYER_HINTS\">Spieler-Hinweise</Trans>\n                    </Typography>\n                    <div className=\"WordHint-list\">{currentHints}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport i18n from '../../i18n';\nimport { Button, Typography } from '@material-ui/core';\nimport { IGame, IHint } from '../../custom.d';\nimport { WordCard } from '../components/WordCard';\nimport { WordHint } from '../components/WordHint';\n\nimport { getCurrentUserInGame, getUserInGame } from '../../shared/functions';\nimport * as api from '../../shared/apiFunctions';\n\ntype SolutionViewProps = {\n    game: IGame\n};\n\nexport class SolutionView extends React.Component<SolutionViewProps> {\n    constructor(props: SolutionViewProps) {\n        super(props);\n\n        this.resolveRound = this.resolveRound.bind(this);\n    }\n\n    resolveRound(correct: boolean = true) {\n        api.resolveRound(this.props.game.id, correct);\n    }\n\n    render() {\n        const game: IGame = this.props.game;\n        const currentUser = getCurrentUserInGame(game);\n        const guesser = getUserInGame(game, game.currentGuesser) ||  { name: '?', id: '?' };\n        const isGuesser = currentUser && currentUser.id === guesser.id;\n        const isRoundHost = currentUser && currentUser.id === game.roundHost;\n\n        const currentWord = game.currentWord || '';\n        const currentGuess = game.currentGuess || '';\n        const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n            const hintIsMine = currentUser && currentUser.id === hintObj.author;\n            const author = getUserInGame(game, hintObj.author) || { name: '?', id: '?' };\n            const authorName = hintIsMine ? i18n.t('COMMON.ME', 'Ich') : author.name;\n\n            return (\n                <WordHint \n                    key={hintObj.author+index} \n                    hint={hintObj.hint} \n                    color={author.color}\n                    author={authorName}\n                />\n            );\n        });\n        let solutionButton1 = (\n            <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(true)}>\n                <Trans i18nKey=\"GAME.SOLUTION.CONTINUE\">Weiter</Trans>\n            </Button>\n        );\n        let solutionButton2;\n        if (!game.guessedRight) {\n            solutionButton1 = (\n                <Button variant=\"contained\" onClick={() => this.resolveRound(true)}>\n                    <Trans i18nKey=\"GAME.SOLUTION.CONTINUE_RIGHT\">Das zählt trotzdem</Trans>\n                </Button>\n            );\n            solutionButton2 = (\n                <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(false)}>\n                    <Trans i18nKey=\"GAME.SOLUTION.CONTINUE_WRONG\">Leider falsch</Trans>\n                </Button>\n            );\n        }\n\n        return (\n            <div className=\"Game-field\">\n                <div className=\"Current-word\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.WORD\">Begriff</Trans>\n                    </Typography>\n                    <WordCard \n                        word={currentWord} \n                        guesser={guesser.name} \n                        isGuesser={isGuesser}\n                        color={guesser.color} \n                        guess={currentGuess} \n                        guessedRight={game.guessedRight}/>\n                    {(isRoundHost || game.guessedRight) && solutionButton1}\n                    {isRoundHost && solutionButton2}\n                </div>\n                <div className=\"Current-hints\">\n                    <Typography variant=\"h5\">\n                        <Trans i18nKey=\"GAME.COMMON.PLAYER_HINTS\">Spieler-Hinweise</Trans>\n                    </Typography>\n                    <div className=\"WordHint-list\">{currentHints}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport {GameLobby} from './GameLobby';\nimport {GamePreparation} from './GamePreparation';\nimport {GameEndView} from './GameEndView';\nimport {GameStats} from './components/GameStats';\nimport {HintWritingView} from './gamePhases/HintWritingView';\nimport {HintComparingView} from './gamePhases/HintComparingView';\nimport {GuessingView} from './gamePhases/GuessingView';\nimport {SolutionView} from './gamePhases/SolutionView';\nimport { IGame, GamePhase } from '../custom.d';\n\nimport { loadGame } from '../shared/apiFunctions';\nimport { setDocumentTitle } from '../shared/functions';\n\nconst POLLING_INTERVAL = 1000;\n\ntype JustOneGameProps = {\n    gameId: string,\n    setTheme?: (color: string)=>void\n};\ntype JustOneGameState = {\n    currentGame?: IGame\n};\n\nexport class JustOneGame extends React.Component<JustOneGameProps,JustOneGameState> {\n    public state: JustOneGameState = {};\n    private _interval: number|undefined;\n    private _isMounted: boolean = false;\n\n    componentDidMount() {\n        this._isMounted = true;\n\n        this.loadGame();\n\n        this._interval = window.setInterval(this.loadGame.bind(this), POLLING_INTERVAL);\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n        clearInterval(this._interval);\n    }\n\n    async loadGame() {\n        const id = this.props.gameId;\n        const game = await loadGame(id);\n        if (!this._isMounted) return;\n        if (!game) return;\n        setDocumentTitle(game.name);\n        this.setState({\n            currentGame: game\n        });\n    }\n\n    render() {\n        const {setTheme} = this.props;\n        const {currentGame} = this.state;\n\n        if (!currentGame) return null;\n\n        let gameContent;\n        let gameStats;\n\n        switch(currentGame.phase) {\n            case GamePhase.Init:\n                gameContent = <GameLobby game={currentGame} setTheme={setTheme} />;\n                break;\n            case GamePhase.Preparation:\n                gameContent = <GamePreparation game={currentGame} />;\n                break;\n            case GamePhase.HintWriting:\n                gameContent = <HintWritingView game={currentGame} />;\n                gameStats   = <GameStats game={currentGame} />;\n                break;\n            case GamePhase.HintComparing:\n                gameContent = <HintComparingView game={currentGame} />;\n                gameStats   = <GameStats game={currentGame} />;\n                break;\n            case GamePhase.Guessing:\n                gameContent = <GuessingView game={currentGame} />;\n                gameStats   = <GameStats game={currentGame} />;\n                break;\n            case GamePhase.Solution:\n                gameContent = <SolutionView game={currentGame} />;\n                gameStats   = <GameStats game={currentGame} />;\n                break;\n            case GamePhase.End:\n                gameContent = <GameEndView game={currentGame} />;\n                break;\n        }\n\n        return (\n            <div className=\"Game-content\">\n                {gameStats}\n                {gameContent}\n            </div>\n        );\n    }\n}\n","import React, { useState, Suspense } from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    RouteComponentProps,\n} from 'react-router-dom';\nimport './App.scss';\nimport { Paper, CircularProgress } from '@material-ui/core';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nimport { SETTING_COLOR, SETTING_THEME, \n         ThemeMode, DEFAULT_PRIMARY_COLOR, DEFAULT_SECONDARY_COLOR } from './shared/constants';\n\nimport {HeaderBar} from './common/HeaderBar';\nimport {JustOneHome} from './just-one/JustOneHome';\nimport {JustOneGame} from './just-one/JustOneGame';\n\nimport './i18n';\n\nexport const App = () =>    {\n    const [userColor, setUserColor] = useState(localStorage.getItem(SETTING_COLOR));\n    const [userTheme, setUserTheme] = useState(localStorage.getItem(SETTING_THEME) || ThemeMode.AUTO);\n\n    let prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    if (userTheme === ThemeMode.BRIGHT) {\n        prefersDarkMode = false;\n    } else if (userTheme === ThemeMode.DARK) {\n        prefersDarkMode = true;\n    }\n\n    let primaryColor = userColor;\n    if (!primaryColor || !primaryColor.startsWith('#') || primaryColor.length !== 7) {\n        primaryColor = DEFAULT_PRIMARY_COLOR;\n    }\n\n    const applyUserTheme = (value: string) => {\n        setUserTheme(value);\n        localStorage.setItem(SETTING_THEME, value);\n    }\n\n    const theme = React.useMemo(\n        () =>\n            createMuiTheme({\n                palette: {\n                    primary: {\n                        main: primaryColor || DEFAULT_PRIMARY_COLOR\n                    },\n                    secondary: {\n                        main: DEFAULT_SECONDARY_COLOR,\n                    }, \n                    type: prefersDarkMode ? 'dark' : 'light',\n                },\n            }),\n        [prefersDarkMode, primaryColor],\n    );\n\n    const classNames = ['App'];\n    if (prefersDarkMode) classNames.push('App-dark');\n\n    return (\n        <Router>\n            <ThemeProvider theme={theme}>\n                <Suspense fallback={<Loader />}>\n                    <Paper square elevation={0} className={classNames.join(' ')}>\n                        <HeaderBar userTheme={userTheme} applyUserTheme={applyUserTheme}/>\n                        <Switch>\n                            <Route path=\"/:gameId\" component={(props: RouteComponentProps<any>) => <JustOneGame gameId={props.match.params.gameId} setTheme={setUserColor}/>} />\n                            <Route children={<JustOneHome/>} />\n                        </Switch> \n                    </Paper>\n                </Suspense>\n            </ThemeProvider>\n        </Router>\n    );    \n}\n\nexport default App;\n\n// TODO \nconst Loader = () => (\n    <Paper square elevation={0} className=\"App App-loading\">\n        <CircularProgress />\n    </Paper>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}