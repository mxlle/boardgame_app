{"version":3,"sources":["just-one/JustOneHome.tsx","custom.d.ts","just-one/WordHintInput.tsx","just-one/WordCard.tsx","just-one/PencilAnimation.tsx","just-one/WordHint.tsx","just-one/GameField.tsx","common/ColorPicker.tsx","App.tsx","just-one/NewPlayer.tsx","just-one/WordAdder.tsx","just-one/GameLobby.tsx","just-one/GameEndView.tsx","just-one/GameStats.tsx","just-one/JustOneGame.tsx","just-one/JustOne.tsx","common/UserConfig.tsx","serviceWorker.ts","index.tsx"],"names":["JustOneHome","props","currentUserId","localStorage","getItem","SETTING_ID","_interval","createGame","bind","state","allGames","this","loadGames","setInterval","clearInterval","fetch","GAME_URL","then","res","json","data","games","filter","game","phase","players","findIndex","p","id","setState","catch","console","log","method","headers","body","JSON","stringify","gameList","map","key","to","className","Button","variant","color","onClick","React","Component","GamePhase","WordHintInput","value","handleChange","submitHint","keyPressed","event","target","TextField","label","onChange","onKeyPress","IconButton","disabled","Send","WordCard","currentWord","word","guesser","guesserText","guess","toLowerCase","classes","guessedRight","push","Paper","join","style","borderColor","showInput","PencilAnimation","styleObj1","backgroundColor","styleObj2","borderTopColor","WordHint","currentHint","hint","styleObj","author","showPencil","showCheck","showDuplicateToggle","toggleDuplicate","duplicate","length","extraClasses","Checkbox","icon","Mood","checkedIcon","MoodBad","checked","GameField","showHints","resolveRound","hintWord","currentUser","getCurrentUser","hintIndex","countCorrect","solutionButton2","currentGuesser","name","isGuesser","isWritingPhase","HintWriting","isComparingPhase","HintComparing","isGuessingPhase","Guessing","isSolutionPhase","Solution","isRoundHost","roundHost","currentGuess","currentHints","hints","hintObj","index","hintIsMine","showHint","isDuplicate","authorName","solutionButton1","showGuessInput","guesserName","Typography","find","player","allColors","getRandomColor","includes","Math","floor","random","ThemeMode","ColorPicker","selected","select","colorButtons","NewPlayer","setColor","addPlayer","updatePlayer","enteredWords","required","WordAdder","words","parseInt","substr","newWords","add","wordFields","i","placeholder","enterDisabled","some","GameLobby","currentPlayer","SETTING_NAME","SETTING_COLOR","addWords","setPlayerProps","startGame","setLocalPlayer","setItem","setTheme","isInGame","allMyWordsEntered","listOfPlayers","wordsEntered","isHost","host","allWordsEntered","newPlayerName","newPlayerColor","GameEndView","correctWords","wordResult","wrongWords","GameStats","gamePhase","slice","round","JustOneGame","loadGame","gameId","currentGame","gameContent","gameStats","Init","End","JustOne","UserConfig","open","onClose","selectedValue","possibleValues","Dialog","DialogTitle","List","ListItem","button","handleListItemClick","ListItemText","primary","apiPort","window","location","hostname","protocol","App","useState","userColor","setUserColor","AUTO","userTheme","setUserTheme","currentUserName","prefersDarkMode","useMediaQuery","BRIGHT","DARK","primaryColor","startsWith","theme","useMemo","createMuiTheme","palette","main","secondary","type","classNames","userConfigOpen","setUserConfigOpen","ThemeProvider","elevation","AppBar","position","Toolbar","edge","aria-label","Home","startIcon","AccountCircle","path","component","match","params","children","Boolean","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e4c8ce9d.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@material-ui/core';\nimport { IGame } from '../custom.d';\n\nimport { GAME_URL, SETTING_ID } from '../App';\n\nconst POLLING_INTERVAL = 2000;\n\ntype JustOneHomeProps = {};\ntype JustOneHomeState = {\n  allGames: IGame[]\n};\n\nexport class JustOneHome extends React.Component<JustOneHomeProps,JustOneHomeState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n  private _interval: any; // TODO\n\n  constructor(props: JustOneHomeProps) {\n    super(props);\n\n    this.createGame = this.createGame.bind(this);\n\n    this.state = { allGames: [] };\n  }\n\n  componentDidMount() {\n      this.loadGames();\n\n      this._interval = setInterval(this.loadGames.bind(this), POLLING_INTERVAL);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._interval);\n  }\n\n  loadGames() {\n    fetch(`${GAME_URL}/all`)\n      .then(res => res.json())\n      .then((data) => {\n        let games = data.games || [];\n        games = games.filter((game: IGame) => {\n          return game.phase === 0 || (this.currentUserId && game.players.findIndex(p => p.id === this.currentUserId) > -1);\n        });\n        this.setState({\n          allGames: games\n        });\n      })\n      .catch(console.log)\n  }\n\n  createGame() {\n    const game: IGame = createGame();\n\n    fetch(`${GAME_URL}/add`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({game})\n    }).then((data) => {\n        console.log(data);\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const gameList = this.state.allGames.map(game => (\n      <Link key={game.id} to={`/${game.id}`}>{`Spiele ${game.id}`}</Link>\n    ));\n\n    return (\n      <div className=\"Game-list\">\n        <Button variant=\"contained\" color=\"primary\" onClick={this.createGame}>Neues Spiel</Button>\n        {gameList}\n      </div>\n    );\n  }\n}\n\nfunction createGame(): IGame {\n    return {\"id\":\"\", \"name\": \"\", \"words\":[],\"players\":[],\"host\":\"1\",\"round\":0,\"phase\":0,\"hints\":[],\"correctWords\":[],\"wrongWords\":[]};\n}","// custom module declarations\n\n// TODO \nexport interface IUser {\n    id: string;\n    name: string;\n    color?: string;\n    enteredWords?: string[];\n}\n\nexport interface IHint {\n    hint: string;\n    author: IUser;\n    isDuplicate?: boolean\n}\n\nexport enum GamePhase {\n    Init,\n    HintWriting,\n    HintComparing,\n    Guessing,\n    Solution,\n    End\n}\n\nexport interface WordResult {\n    word: string;\n    guess: string;\n}\n\nexport interface IGame {\n    id: string;\n    name: string;\n    words: string[];\n    players: IUser[];\n    host: string; // hostId\n\n    round: number;\n    phase: GamePhase;\n    currentWord?: string;\n    currentGuesser?: IUser;\n    currentGuess?: string;\n    guessedRight?: boolean;\n    roundHost?: IUser;\n    hints: IHint[];\n    correctWords: WordResult[];\n    wrongWords: WordResult[];\n}","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport { Send as SendIcon } from '@material-ui/icons';\nimport TextField from '@material-ui/core/TextField';\n\ntype WordHintInputProps = {\n  submitHint: (hint: string)=>void\n  label?: string\n};\ntype WordHintInputState = {\n  value: string, \n};\n\nexport class WordHintInput extends React.Component<WordHintInputProps,WordHintInputState> {\n\n  constructor(props: WordHintInputProps) {\n  \tsuper(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.submitHint = this.submitHint.bind(this);\n    this.keyPressed = this.keyPressed.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({value: event.target.value});\n  }\n\n  submitHint() {\n  \tthis.props.submitHint(this.state.value)\n  \tthis.setState({value: ''});\n  }\n\n  keyPressed(event: React.KeyboardEvent<HTMLInputElement>) {\n  \tif (event.key === \"Enter\") {\n  \t  this.submitHint()\n  \t}\n  }\n\n  render() {\n    return (\n\t    <div className=\"Word-hint-input\">\n\t    \t<TextField label={this.props.label || 'Hinweis eingeben'}\n\t    \t\tvalue={this.state.value} \n\t    \t\tonChange={this.handleChange} \n\t    \t\tonKeyPress={this.keyPressed} />\n  \t\t\t<IconButton color=\"primary\" \n  \t\t\t\tdisabled={!this.state.value} \n  \t\t\t\tonClick={this.submitHint}>\n          <SendIcon></SendIcon>\n        </IconButton>\n\t    </div>\n    );\n  }\n\n}","import React from 'react';\nimport { Paper } from '@material-ui/core';\nimport { WordHintInput } from './WordHintInput';\n\ntype WordCardProps = {\n\tword: string;\n\tguesser?: string;\n\tcolor?: string;\n  guess?: string;\n  guessedRight?: boolean;\n  showInput?: boolean;\n  submitHint?: (hint:string)=>void\n}\n\nexport class WordCard extends React.Component<WordCardProps> {\n\n  render() {\n  \tconst currentWord = this.props.word;\n    const guesser = this.props.guesser;\n    let guesserText = '';\n    if (guesser) {\n      if (this.props.guess) {\n        guesserText = (guesser.toLowerCase() === 'ich' ? 'Mein ' : (guesser + '\\'s ')) + 'Rateversuch: ' + this.props.guess;\n      } else {\n        guesserText = guesser + ' muss raten';\n      }\n    } else if (this.props.guess) {\n      guesserText = 'Rateversuch: ' + this.props.guess;\n    }\n    const classes = ['Word-card'];\n    if (this.props.guess) {\n      if (this.props.guessedRight) {\n        classes.push('Word-card-correct');\n      } else {\n        classes.push('Word-card-wrong');\n      }\n    }\n\n    return (\n\t    <Paper className={classes.join(' ')} style={{borderColor: this.props.color}}>\n\t    \t{\n          (this.props.showInput && this.props.submitHint) ? \n          <WordHintInput submitHint={this.props.submitHint} label=\"Rateversuch\"/> : \n          <span>{currentWord}</span>\n        }\n        {guesserText && <span className=\"Author-tag\" style={{color: this.props.color}}>{guesserText}</span>}\n\t    </Paper>\n    );\n  }\n\n}","import React from 'react';\n\ntype PencilAnimationProps = {\n\tcolor?: string,\n}\n\nexport class PencilAnimation extends React.Component<PencilAnimationProps> {\n\n  render() {\n    const styleObj1 = {\n    \tbackgroundColor: this.props.color,\n    };\n    const styleObj2 = {\n    \tborderTopColor: this.props.color,\n    };\n\n    return (\n\t  <div className=\"pencil\">\n        <div className=\"body\" style={styleObj1}></div>\n        <div className=\"nib\" style={styleObj2}></div>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { WordHintInput } from './WordHintInput';\nimport { PencilAnimation } from './PencilAnimation';\nimport { Checkbox, Paper } from '@material-ui/core';\nimport { Mood as MoodIcon, MoodBad as MoodBadIcon } from '@material-ui/icons';\n\ntype WordHintProps = {\n\thint?: string,\n\tcolor?: string,\n\tduplicate?: boolean,\n  author?: string,\n  showPencil?: boolean,\n  showCheck?: boolean,\n  showInput?: boolean,\n  submitHint?: (hint:string)=>void,\n  showDuplicateToggle?: boolean,\n  toggleDuplicate?: ()=>void\n}\n\nexport class WordHint extends React.Component<WordHintProps> {\n\n  render() {\n  \tconst currentHint = this.props.hint;\n    const color = this.props.color;\n    const styleObj = {\n    \t'color': color,\n      'borderColor': color\n    };\n    const author = this.props.author;\n    const showPencil = this.props.showPencil || !this.props.hint;\n    const showCheck = this.props.showCheck;\n    const showDuplicateToggle = this.props.showDuplicateToggle;\n    const toggleDuplicate = this.props.toggleDuplicate;\n\n    const classes = ['Word-hint'];\n    if (showPencil) classes.push('Word-hint-writing');\n    if (this.props.duplicate) classes.push('Word-hint-duplicate');\n    if (currentHint && currentHint.length > 20) classes.push('Word-hint-huge');\n    else if (currentHint && currentHint.length > 14) classes.push('Word-hint-long');\n    const extraClasses = classes.join(' ');\n\n    if (this.props.showInput && this.props.submitHint) {\n      return (\n        <Paper className={extraClasses} style={styleObj}>\n          <WordHintInput submitHint={this.props.submitHint}/>\n          {author && <span className=\"Author-tag\">{author}</span>}\n        </Paper>\n      );\n    } else {\n      return (\n        <Paper className={extraClasses} style={styleObj}>\n          {!showCheck && currentHint}\n          {showCheck && <span className=\"Done-icon\">✓</span>}\n          {showPencil && <PencilAnimation color={color}></PencilAnimation>}\n          {showDuplicateToggle && toggleDuplicate && (\n            <Checkbox className=\"Duplicate-toggle\" \n              icon={<MoodIcon />} checkedIcon={<MoodBadIcon />} \n              checked={this.props.duplicate}\n              onChange={()=>toggleDuplicate()}/>\n          )}\n          {author && <span className=\"Author-tag\">{author}</span>}\n        </Paper>\n      );\n    }\n\n    \n  }\n\n}","import React from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport {WordCard} from './WordCard';\nimport { IGame, IHint, IUser, GamePhase } from '../custom.d';\nimport {WordHint} from './WordHint';\n\nimport { GAME_URL } from '../App';\n\nconst SETTING_ID = 'playerId';\n\ntype GameFieldProps = {\n  game: IGame\n};\ntype GameFieldState = {\n\n};\n\nexport class GameField extends React.Component<GameFieldProps,GameFieldState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n  constructor(props: GameFieldProps) {\n    super(props);\n\n    this.submitHint = this.submitHint.bind(this);\n    this.toggleDuplicate = this.toggleDuplicate.bind(this);\n    this.showHints = this.showHints.bind(this);\n    this.guess = this.guess.bind(this);\n    this.resolveRound = this.resolveRound.bind(this);\n\n    this.state = {  };\n  }\n\n  componentDidMount() {\n\n  }\n\n  submitHint(hintWord: string) {\n    const currentUser = getCurrentUser(this.props.game, this.currentUserId);\n    if (!currentUser) return; // TODO\n    const hint: IHint = { hint: hintWord, author: currentUser};\n\n    fetch(`${GAME_URL}/${this.props.game.id}/hint`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({hint})\n    }).catch(console.log)\n  }\n\n  toggleDuplicate(hintIndex: number) {\n    fetch(`${GAME_URL}/${this.props.game.id}/toggleDuplicateHint`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({hintIndex})\n    }).catch(console.log)\n  }\n\n  showHints() {\n    fetch(`${GAME_URL}/${this.props.game.id}/showHints`, {\n      method: 'PUT'\n    }).catch(console.log)\n  }\n\n  guess(guess: string) {\n    fetch(`${GAME_URL}/${this.props.game.id}/guess`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({guess})\n    }).catch(console.log)\n  }\n\n  resolveRound(countCorrect: boolean = true) {\n    fetch(`${GAME_URL}/${this.props.game.id}/resolve`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({countCorrect})\n    }).catch(console.log)\n  }\n\n  render() {\n    const game: IGame = this.props.game;\n    const currentUser = getCurrentUser(game, this.currentUserId); // TODO\n    const guesser = game.currentGuesser ? game.currentGuesser : { name: '?', id: '?' }; // TODO\n    const isGuesser = currentUser && currentUser.id === guesser.id;\n\n    const isWritingPhase = game.phase === GamePhase.HintWriting;\n    const isComparingPhase = game.phase === GamePhase.HintComparing;\n    const isGuessingPhase = game.phase === GamePhase.Guessing;\n    const isSolutionPhase = game.phase === GamePhase.Solution;\n\n    const isRoundHost = game.roundHost && this.currentUserId === game.roundHost.id;\n    const showDuplicateToggle = isRoundHost && isComparingPhase;\n\n    const currentWord = isGuesser && !isSolutionPhase ? '?' : (game.currentWord || '');\n    const currentGuess = game.currentGuess || '';\n    const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n      let hint: string = hintObj.hint;\n      const hintIsMine = currentUser && currentUser.id === hintObj.author.id;\n      const showHint = !hint || isGuessingPhase || isSolutionPhase || hintIsMine || (isComparingPhase && !isGuesser);\n      const showInput = !hint && isWritingPhase && hintIsMine;\n\n      if (isGuessingPhase && isGuesser && hintObj.isDuplicate) {\n        hint = 'LEIDER DOPPELT';\n      } \n\n      const authorName = hintIsMine ? 'Ich' : hintObj.author.name;\n\n      return <WordHint key={hintObj.author.id+index} \n              hint={hint} \n              color={hintObj.author.color}\n              showInput={showInput}\n              submitHint={this.submitHint}\n              showCheck={!showHint}\n              duplicate={hintObj.isDuplicate}\n              showDuplicateToggle={showDuplicateToggle}\n              toggleDuplicate={()=>this.toggleDuplicate(index)}\n              author={authorName}/>\n    });\n    let solutionButton1 = <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(true)}>Super, weiter geht's</Button>;\n    let solutionButton2;\n    if (!game.guessedRight) {\n      solutionButton1 = <Button variant=\"contained\" onClick={() => this.resolveRound(true)}>Das zählt trotzdem</Button>;\n      solutionButton2 = <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(false)}>Leider falsch</Button>;\n    }\n\n    const showGuessInput = isGuessingPhase && isGuesser;\n    const guesserName = isGuesser ? 'Ich' : guesser.name;\n\n    return (\n      <div className=\"Game-field\">\n        <div className=\"Current-word\">\n          <Typography variant=\"h5\">\n            Begriff\n          </Typography>\n          <WordCard \n            word={currentWord} \n            guesser={guesserName} \n            color={guesser.color} \n            showInput={showGuessInput}\n            submitHint={this.guess}\n            guess={isSolutionPhase ? currentGuess : ''} \n            guessedRight={game.guessedRight}/>\n          {isSolutionPhase && (isRoundHost || game.guessedRight) && solutionButton1}\n          {isSolutionPhase && isRoundHost && solutionButton2}\n        </div>\n        <div className=\"Current-hints\">\n          <Typography variant=\"h5\">\n            Spieler-Hinweise\n          </Typography>\n          <div className=\"WordHint-list\">{currentHints}</div>\n          {isComparingPhase && isRoundHost && (\n            <Typography variant=\"subtitle1\">\n              Benutze die Smiley-Buttons auf den Hinweisen um doppelte oder ungültige Werte zu markieren.\n            </Typography>\n          )}\n          {isComparingPhase && isRoundHost && <Button variant=\"contained\" color=\"primary\" onClick={this.showHints}>{guesser.name + ' kann losraten!'}</Button>}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction getCurrentUser(game: IGame, currentUserId: string): IUser|undefined {\n  return game.players.find(player => player.id === currentUserId);\n}\n","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\n\nexport const allColors: string[] = [\n  '#e51235',\n  '#d81b60',\n  '#8e24aa',\n  '#6e45c1',\n  '#4959cc',\n  '#1e88e5',\n  '#039be5',\n  '#00acc1',\n  '#00897b',\n  '#43a047',\n  '#7cb342',\n  '#c0ca33',\n  '#ffc215',\n  '#ffab00',\n  '#ff6d00',\n  '#f4511e'\n];\n\nexport function getRandomColor(color?: string|null): string {\n  if (!color || !allColors.includes(color)) {\n    return allColors[Math.floor(Math.random()*allColors.length)];\n  } else {\n    return color;\n  }\n}\n\ntype ColorPickerProps = {\n\tselected?: string;\n  select: (color: string)=>void;\n}\n\nexport class ColorPicker extends React.Component<ColorPickerProps> {\n\n  render() {\n  \tconst { selected, select } = this.props;\n\n    const colorButtons = allColors.map((color: string) => {\n      const classes = ['Color-button'];\n      if (selected === color) classes.push('Color-selected');\n      return (\n        <IconButton className={classes.join(' ')} onClick={() => select(color)} style={{ backgroundColor: color }} key={color}>\n          {selected === color && <CheckIcon/>}\n        </IconButton>\n      )\n    });\n\n    return (\n      <div className=\"Color-picker\">\n        { colorButtons }\n      </div>\n    );\n  }\n\n}","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport './App.scss';\nimport { AppBar, Toolbar, IconButton, Typography, Paper, Button } from '@material-ui/core';\nimport { Home as HomeIcon, AccountCircle as AccountCircleIcon } from '@material-ui/icons';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nimport {JustOne} from './just-one/JustOne';\nimport { UserConfig } from './common/UserConfig';\n\nconst isProd = window.location.hostname === 'justone.okj.name';\nconst apiPort = isProd ? '' : ':9000';\nexport const API_URL = window.location.protocol + '//' + window.location.hostname + apiPort + '/api';\nexport const GAME_URL = API_URL + '/games';\nexport const SETTING_ID = 'playerId';\nexport const SETTING_NAME = 'playerName';\nexport const SETTING_COLOR = 'playerColor';\nexport const SETTING_THEME = 'darkTheme';\nconst DEFAULT_PRIMARY_COLOR = '#43a047';\nconst DEFAULT_SECONDARY_COLOR = '#d32f2f'; // also error dark\n\nenum ThemeMode {\n  AUTO = 'automatisch',\n  BRIGHT = 'hell',\n  DARK = 'dunkel'\n}\n\nexport const App = () =>  {\n\n  const [userColor, setUserColor] = useState(localStorage.getItem(SETTING_COLOR));\n  const [userTheme, setUserTheme] = useState(localStorage.getItem(SETTING_THEME) || ThemeMode.AUTO);\n  const currentUserName: string|null = localStorage.getItem(SETTING_NAME);\n  let prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  if (userTheme === ThemeMode.BRIGHT) {\n    prefersDarkMode = false;\n  } else if (userTheme === ThemeMode.DARK) {\n    prefersDarkMode = true;\n  }\n\n  let primaryColor = userColor;\n  if (!primaryColor || !primaryColor.startsWith('#') || primaryColor.length !== 7) {\n    primaryColor = DEFAULT_PRIMARY_COLOR;\n  }\n\n  const applyUserTheme = (value: string) => {\n    setUserTheme(value);\n    localStorage.setItem(SETTING_THEME, value);\n    setUserConfigOpen(false);\n  }\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          primary: {\n            main: primaryColor || DEFAULT_PRIMARY_COLOR\n          },\n          secondary: {\n            main: DEFAULT_SECONDARY_COLOR,\n          }, \n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode, primaryColor],\n  );\n\n  const classNames = ['App'];\n  if (prefersDarkMode) classNames.push('App-dark');\n\n  const [userConfigOpen, setUserConfigOpen] = React.useState(false);\n\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n      <Paper elevation={0} className={classNames.join(' ')}>\n        <AppBar position=\"sticky\">\n          <Toolbar>\n            <Link to=\"/\" className=\"ButtonLink\">\n              <IconButton edge=\"start\" color=\"inherit\" aria-label=\"home\">\n                <HomeIcon />\n              </IconButton>\n            </Link>\n            <Typography variant=\"h2\" className=\"appTitle\">\n              Nur ein Wort!\n            </Typography>\n            { \n              currentUserName ? \n              <Button onClick={()=>setUserConfigOpen(true)} className=\"Account-button\" color=\"inherit\" startIcon={<AccountCircleIcon />}>\n                {currentUserName}\n              </Button> : \n              <IconButton onClick={()=>setUserConfigOpen(true)} edge=\"end\" color=\"inherit\">\n                <AccountCircleIcon />\n              </IconButton>\n            }\n            <UserConfig \n              open={userConfigOpen} \n              onClose={applyUserTheme} \n              selectedValue={userTheme} \n              possibleValues={[ThemeMode.AUTO, ThemeMode.BRIGHT, ThemeMode.DARK]}\n            ></UserConfig>\n          </Toolbar>\n        </AppBar>\n        <Switch>\n          <Route path=\"/:gameId\" component={(props: RouteComponentProps<any>) => <JustOne gameId={props.match.params.gameId} setTheme={setUserColor}/>} />\n          <Route children={<JustOne/>} />\n        </Switch> \n      </Paper>  \n    </ThemeProvider>\n    </Router>\n  );  \n}\n\nexport default App;\n","import React from 'react';\nimport { IUser } from '../custom.d';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { ColorPicker } from '../common/ColorPicker';\n\ntype NewPlayerProps = {\n  addPlayer: (player: IUser) => void,\n  updatePlayer: (player: IUser) => void,\n  name: string,\n  color: string\n}\n\nexport class NewPlayer extends React.Component<NewPlayerProps> {\n\n  constructor(props: NewPlayerProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.setColor = this.setColor.bind(this);\n    this.addPlayer = this.addPlayer.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.name === 'name') {\n      let player: IUser = { \n        id: '', \n        name: event.target.value, \n        color: this.props.color \n      };\n\n      this.props.updatePlayer(player);   \n\n    }\n  }\n\n  setColor(color: string) {\n    let player: IUser = { \n      id: '', \n      name: this.props.name, \n      color: color || this.props.color \n    };\n    this.props.updatePlayer(player);  \n  }\n\n  addPlayer() {\n    const player: IUser = { \n      id: '', \n      name: this.props.name, \n      color: this.props.color,\n      enteredWords: []\n    };\n    this.props.addPlayer(player);\n  }\n\n  render() {\n    const { name, color } = this.props;\n\n    return (\n      <div className=\"New-player\">\n        <TextField required label=\"Spielername\" \n          name='name'\n          value={name} \n          onChange={this.handleChange}/>\n        <ColorPicker select={this.setColor} selected={color}/>\n        <Button variant=\"contained\" color=\"primary\" \n          disabled={!name} \n          onClick={this.addPlayer}>Mitspielen</Button>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\nexport const DEFAULT_NUM_WORDS: number = 2; // Two words per player\n\ntype WordAdderProps = {\n  add: (words: string[])=>void\n}\n\ntype WordAdderState = {\n  words: string[]\n}\n\nexport class WordAdder extends React.Component<WordAdderProps, WordAdderState> {\n\n  public state: WordAdderState = {\n    words: []\n  };\n\n  constructor(props: WordAdderProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const index = parseInt(event.target.name.substr(4));\n    const word = event.target.value;\n    this.setState((state, props) => {\n      const newWords = state.words;\n      newWords[index] = word;\n      return {\n        words: newWords\n      };\n    });\n  }\n\n  render() {\n    const { add } = this.props;\n    const { words } = this.state;\n    const numOfWords = DEFAULT_NUM_WORDS;\n    const wordFields = [];\n    if (numOfWords>0) {\n      wordFields.push(\n        <Typography variant=\"subtitle1\" key=\"heading\">\n          Gebe {numOfWords} Wörter für das Spiel ein\n        </Typography>\n      );\n    }\n    for (let i=0; i<numOfWords; i++) {\n      wordFields.push(\n        <TextField required label={`Wort ${i+1}`}\n          placeholder=\"Für den Stapel\"\n          name={`word${i}`}\n          key={`word${i}`}\n          value={words[i]||''} \n          onChange={this.handleChange} />\n      );\n    }\n    let enterDisabled = words.length < numOfWords || words.some(word => !word || word.length === 0);\n\n    return (\n      <div className=\"Word-adder\">\n        {wordFields}\n        <Button variant=\"contained\" color=\"primary\" \n          disabled={enterDisabled} \n          onClick={() => add(words)}>Wörter abschicken</Button>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { IGame, IUser } from '../custom.d';\nimport { Button } from '@material-ui/core';\nimport { WordHint } from './WordHint';\nimport { NewPlayer } from './NewPlayer';\nimport { WordAdder, DEFAULT_NUM_WORDS  } from './WordAdder';\nimport { getRandomColor } from '../common/ColorPicker';\n\nimport { GAME_URL, SETTING_ID, SETTING_NAME, SETTING_COLOR } from '../App';\n\ntype GameLobbyProps = {\n  game: IGame,\n  setTheme?: (color: string)=>void\n}\ntype GameLobbyState = {\n  currentPlayer: IUser\n}\n\nexport class GameLobby extends React.Component<GameLobbyProps,GameLobbyState> {\n\n  public state: GameLobbyState = { \n    currentPlayer: {\n      id: localStorage.getItem(SETTING_ID) || '',\n      name: localStorage.getItem(SETTING_NAME) || '',\n      color: getRandomColor(localStorage.getItem(SETTING_COLOR))\n    }\n  };\n\n  constructor(props: GameLobbyProps) {\n    super(props);\n\n    this.addPlayer = this.addPlayer.bind(this);\n    this.addWords = this.addWords.bind(this);\n    this.setPlayerProps = this.setPlayerProps.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  setPlayerProps(player: IUser) {\n    this.setState({\n      currentPlayer: player\n    });\n  }\n\n  addPlayer(player: IUser) {\n    fetch(`${GAME_URL}/${this.props.game.id}/addPlayer`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({player})\n    }).then(res => res.json())\n      .then((data) => {\n        this.setLocalPlayer(data.player);\n      })\n      .catch(console.log)\n  }\n\n  addWords(words: string[]) {\n    let player: IUser = this.state.currentPlayer;\n    player.enteredWords = words;\n\n    fetch(`${GAME_URL}/${this.props.game.id}/updatePlayer`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({player})\n    }).then(res => res.json())\n      .then((data) => {\n        this.setLocalPlayer(data.player);\n      })\n      .catch(console.log)\n  }\n\n  setLocalPlayer(player: IUser) {\n    localStorage.setItem(SETTING_ID, player.id);\n    localStorage.setItem(SETTING_NAME, player.name);\n    if (player.color) localStorage.setItem('playerColor', player.color);\n    if (this.props.setTheme && player.color) {\n      this.props.setTheme(player.color);\n    }\n    this.setState({\n      currentPlayer: player\n    });\n  }\n\n  startGame() {\n    fetch(`${GAME_URL}/${this.props.game.id}/start`, {\n      method: 'PUT'\n    }).then((data) => {\n        // TODO\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const { game } = this.props;\n    const { currentPlayer } = this.state;\n    const numWordsPerPlayer = DEFAULT_NUM_WORDS;\n    const currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n    let isInGame: boolean = false;\n    //let myWords: string[] = [];\n    let allMyWordsEntered: boolean = false;\n    const listOfPlayers = game.players.map(player => {\n      const wordsEntered: boolean = !!player.enteredWords && player.enteredWords.length === numWordsPerPlayer;\n      if (player.id === currentUserId) {\n        isInGame = true;\n        //myWords = player.enteredWords || [];\n        allMyWordsEntered = wordsEntered;\n      } \n      return (\n        <WordHint key={player.id} hint={player.name} color={player.color} showPencil={!wordsEntered}></WordHint>\n      )\n    });\n    const isHost: boolean = !!currentUserId && game.host === currentUserId;\n    const allWordsEntered: boolean = game.words.length >= numWordsPerPlayer*listOfPlayers.length;\n    const newPlayerName: string = (isInGame || !currentPlayer.name) ? '?' : currentPlayer.name;\n    const newPlayerColor: string = (isInGame || !currentPlayer.color) ? getRandomColor() : currentPlayer.color;\n\n    return (\n      <div className=\"Game-lobby\">\n        <div className=\"New-player\">\n          { \n            !isInGame && \n            <NewPlayer name={currentPlayer.name} color={currentPlayer.color || getRandomColor()} \n              updatePlayer={this.setPlayerProps}\n              addPlayer={this.addPlayer}/>\n          }\n          { \n            isInGame && !allMyWordsEntered &&\n            <WordAdder add={this.addWords}/>\n          }\n          {\n            isHost && \n            <Button variant=\"contained\" color=\"primary\" \n              disabled={game.players.length < 3 || !allWordsEntered} \n              onClick={this.startGame}>Spiel beginnen</Button>\n          }\n        </div>\n        <div className=\"Player-list\">\n          {listOfPlayers}\n          <WordHint hint={newPlayerName} color={newPlayerColor} showPencil={true}></WordHint>\n        </div>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport {WordCard} from './WordCard';\nimport { IGame } from '../custom.d';\n\ntype GameEndViewProps = {\n  game: IGame\n};\n\nexport class GameEndView extends React.Component<GameEndViewProps> {\n  render() {\n    const game: IGame = this.props.game;\n    const correctWords = game.correctWords.map(wordResult => {\n      return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={true}/>\n    });\n    const wrongWords = game.wrongWords.map(wordResult => {\n      return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={false}/>\n    });\n\n    return (\n      <div className=\"Game-end-view\">\n        <div className=\"Correct-words\">\n          <h2>Richtig ({game.correctWords.length})</h2>\n          {correctWords}\n        </div>\n        <div className=\"Wrong-words\">\n          <h2>Falsch ({game.wrongWords.length})</h2>\n          {wrongWords}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { IGame, GamePhase } from '../custom.d';\n\ntype GameStatsProps = {\n  game: IGame\n};\n\nexport class GameStats extends React.Component<GameStatsProps> {\n  render() {\n    const game: IGame = this.props.game;\n    const roundHost = game.roundHost ? game.roundHost.name : '?';\n    const guesser = game.currentGuesser ? game.currentGuesser.name : '?';\n\n    let gamePhase;\n    switch(game.phase) {\n      case GamePhase.HintWriting: \n        const players = game.players.filter(p => game.currentGuesser && p.id !== game.currentGuesser.id).map(p => p.name);\n        const playersString = players.slice(0, players.length-1).join(', ') + ' und ' + players[players.length-1];\n        gamePhase = playersString + ' schreiben Hinweise auf...';\n        break;\n      case GamePhase.HintComparing: \n        gamePhase = roundHost + ' überprüft die Hinweise auf ungültige oder doppelte Wörter...';\n        break;\n      case GamePhase.Guessing: \n        gamePhase = guesser + ' versucht den Begriff zu erraten...';\n        break;\n      case GamePhase.Solution: \n        if (game.guessedRight) {\n          gamePhase = guesser + ' lag genau richtig!';\n        } else {\n          gamePhase = guesser + ' lag daneben! ' + roundHost + ' entscheidet ob es trotzdem zählt...';\n        }\n        break;\n    }\n\n    return (\n      <div className=\"Game-progress\">\n        <div>Runde: {game.round+1}/{game.words.length}, Richtige: {game.correctWords.length}, Falsche: {game.wrongWords.length}</div>\n        <div>Phase: {gamePhase}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {GameField} from './GameField';\nimport {GameLobby} from './GameLobby';\nimport {GameEndView} from './GameEndView';\nimport {GameStats} from './GameStats';\nimport { IGame, GamePhase } from '../custom.d';\n\nimport { GAME_URL, SETTING_ID } from '../App';\n\nconst POLLING_INTERVAL = 2000;\n\ntype JustOneGameProps = {\n  gameId: string,\n  setTheme?: (color: string)=>void\n};\ntype JustOneGameState = {\n  currentGame?: IGame\n};\n\nexport class JustOneGame extends React.Component<JustOneGameProps,JustOneGameState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n  private _interval: any; // TODO\n\n  constructor(props: JustOneGameProps) {\n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.loadGame();\n\n    this._interval = setInterval(this.loadGame.bind(this), POLLING_INTERVAL);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._interval);\n  }\n\n  loadGame() {\n    let id = this.props.gameId;\n    if (!id) return;\n\n    fetch(`${GAME_URL}/${id}`)\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({\n          currentGame: data.game\n        });\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const currentGame: IGame|undefined = this.state.currentGame;\n\n    let gameContent;\n    let gameStats;\n    if (currentGame) {\n      if (currentGame.phase === GamePhase.Init) {\n        gameContent = <GameLobby game={currentGame} setTheme={this.props.setTheme}></GameLobby>\n      } else if (currentGame.phase === GamePhase.End) {\n        gameContent = <GameEndView game={currentGame}></GameEndView>;\n      } else {\n        gameStats = <GameStats game={currentGame}></GameStats>;\n        gameContent = <GameField game={currentGame}></GameField>;\n      }     \n    }\n\n    return (\n      <div className=\"Game-content\">\n        {gameStats}\n        {gameContent}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {JustOneHome} from './JustOneHome';\nimport {JustOneGame} from './JustOneGame';\n\ntype JustOneProps = {\n  gameId?: string,\n  setTheme?: (color: string)=>void\n};\ntype JustOneState = {\n\n};\n\nexport class JustOne extends React.Component<JustOneProps,JustOneState> {\n  render() {\n    if (this.props.gameId) {\n      return <JustOneGame gameId={this.props.gameId} setTheme={this.props.setTheme}></JustOneGame>;\n    } else {\n      return <JustOneHome></JustOneHome>\n    }\n  }\n}","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\n\ntype UserConfigProps = {\n  onClose: (value: string)=>void,\n  selectedValue: string,\n  possibleValues: string[],\n  open: boolean\n};\n\nexport class UserConfig extends React.Component<UserConfigProps> {\n  render() {\n    const { open, onClose, selectedValue, possibleValues } = this.props;\n\n    const handleClose = () => {\n      onClose(selectedValue);\n    };\n\n    const handleListItemClick = (value: string) => {\n      onClose(value);\n    };\n\n    return (\n      <Dialog onClose={handleClose} open={open}>\n        <DialogTitle>Nachtmodus</DialogTitle>\n        <List>\n          {possibleValues.map((value: string) => (\n            <ListItem button onClick={() => handleListItemClick(value)} key={value} selected={selectedValue === value}>\n              <ListItemText primary={value} />\n            </ListItem>\n          ))}\n        </List>\n      </Dialog>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}