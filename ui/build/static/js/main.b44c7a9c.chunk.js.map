{"version":3,"sources":["custom.d.ts","just-one/GameList.tsx","just-one/JustOneHome.tsx","just-one/WordHintInput.tsx","just-one/WordCard.tsx","just-one/PencilAnimation.tsx","just-one/WordHint.tsx","just-one/GameField.tsx","common/ColorPicker.tsx","just-one/NewPlayer.tsx","just-one/WordAdder.tsx","just-one/GameLobby.tsx","just-one/GameEndView.tsx","just-one/GameStats.tsx","just-one/JustOneGame.tsx","just-one/JustOne.tsx","App.tsx","common/UserConfig.tsx","serviceWorker.ts","index.tsx"],"names":["GamePhase","GameList","currentUserId","localStorage","getItem","SETTING_ID","currentUserName","SETTING_NAME","this","props","allGames","deleteGame","newGames","filter","game","phase","Init","onGoingGames","End","includes","doneGames","createListItem","ListItem","key","id","className","to","component","Link","button","ListItemText","primary","name","secondary","players","map","p","join","host","ListItemSecondaryAction","IconButton","onClick","newGamesList","onGoingGamesList","doneGamesList","length","Paper","Typography","variant","List","React","Component","JustOneHome","_interval","createGame","bind","handleChange","newGameName","state","document","title","APP_TITLE","loadGames","setInterval","clearInterval","fetch","GAME_URL","then","res","json","data","games","findIndex","setState","catch","console","log","gameId","method","event","target","value","headers","body","JSON","stringify","window","location","href","TextField","label","onChange","Button","color","WordHintInput","submitHint","keyPressed","onKeyPress","disabled","Send","WordCard","currentWord","word","guesser","guesserText","guess","toLowerCase","classes","guessedRight","push","style","borderColor","showInput","PencilAnimation","styleObj1","backgroundColor","styleObj2","borderTopColor","WordHint","currentHint","hint","styleObj","author","showPencil","showCheck","showDuplicateToggle","toggleDuplicate","duplicate","extraClasses","Checkbox","icon","Mood","checkedIcon","MoodBad","checked","GameField","showHints","resolveRound","hintWord","currentUser","getCurrentUser","hintIndex","countCorrect","solutionButton2","currentGuesser","isGuesser","isWritingPhase","HintWriting","isComparingPhase","HintComparing","isGuessingPhase","Guessing","isSolutionPhase","Solution","isRoundHost","roundHost","currentGuess","currentHints","hints","hintObj","index","hintIsMine","showHint","isDuplicate","authorName","solutionButton1","showGuessInput","guesserName","find","player","allColors","getRandomColor","Math","floor","random","ColorPicker","selected","select","colorButtons","NewPlayer","setColor","addPlayer","currentPlayer","updatePlayer","required","WordAdder","words","parseInt","substr","newWords","add","wordFields","i","placeholder","enterDisabled","some","GameLobby","SETTING_COLOR","addWords","setPlayerProps","startGame","setLocalPlayer","enteredWords","setItem","setTheme","isInGame","allMyWordsEntered","listOfPlayers","wordsEntered","isHost","allWordsEntered","newPlayerName","newPlayerColor","GameEndView","correctWords","wordResult","wrongWords","GameStats","gamePhase","slice","round","JustOneGame","loadGame","gameName","currentGame","gameContent","gameStats","ThemeMode","JustOne","UserConfig","open","onClose","selectedValue","possibleValues","Dialog","DialogTitle","handleListItemClick","apiPort","hostname","protocol","App","useState","userColor","setUserColor","AUTO","userTheme","setUserTheme","prefersDarkMode","useMediaQuery","BRIGHT","DARK","primaryColor","startsWith","theme","useMemo","createMuiTheme","palette","main","type","classNames","userConfigOpen","setUserConfigOpen","ThemeProvider","elevation","AppBar","position","Toolbar","edge","aria-label","Home","startIcon","AccountCircle","path","match","params","children","Boolean","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b44c7a9c.chunk.js","sourcesContent":["// custom module declarations\n\n// TODO \nexport interface IUser {\n    id: string;\n    name: string;\n    color?: string;\n    enteredWords?: string[];\n}\n\nexport interface IHint {\n    hint: string;\n    author: IUser;\n    isDuplicate?: boolean\n}\n\nexport enum GamePhase {\n    Init,\n    HintWriting,\n    HintComparing,\n    Guessing,\n    Solution,\n    End\n}\n\nexport interface WordResult {\n    word: string;\n    guess: string;\n}\n\nexport interface IGame {\n    id: string;\n    name: string;\n    words: string[];\n    players: IUser[];\n    host: string; // hostId\n\n    round: number;\n    phase: GamePhase;\n    currentWord?: string;\n    currentGuesser?: IUser;\n    currentGuess?: string;\n    guessedRight?: boolean;\n    roundHost?: IUser;\n    hints: IHint[];\n    correctWords: WordResult[];\n    wrongWords: WordResult[];\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  List, \n  ListItem, \n  ListItemText, \n  ListItemSecondaryAction, \n  IconButton,\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { IGame, GamePhase } from '../custom.d';\n\nimport { SETTING_ID, SETTING_NAME } from '../App';\n\ntype GameListProps = {\n  allGames: IGame[],\n  deleteGame: (gameId:string)=>void,\n};\n\ntype GameListState = {\n}\n\nexport class GameList extends React.Component<GameListProps,GameListState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n  public currentUserName: string = localStorage.getItem(SETTING_NAME) || '';\n\n  render() {\n    const {allGames,deleteGame} = this.props;\n    const newGames = allGames.filter(game => game.phase === GamePhase.Init);\n    const onGoingGames = allGames.filter(game => ![GamePhase.Init,GamePhase.End].includes(game.phase));\n    const doneGames = allGames.filter(game => game.phase === GamePhase.End);\n\n    const createListItem = (game: IGame) => {\n      return (\n        <ListItem key={game.id} className=\"GameListItem\"\n          {...{ to: `/${game.id}` }}\n          component={Link}\n          button\n        >\n          <ListItemText id={game.id} primary={`${game.name || game.id}`} secondary={`Spieler: ${game.players.map(p => p.name).join(', ') || '-'}`} />\n          {\n            this.currentUserId === game.host && (\n              <ListItemSecondaryAction>\n                <IconButton onClick={() => deleteGame(game.id)}>\n                  <DeleteIcon/>\n                </IconButton>\n              </ListItemSecondaryAction>\n            )\n          }\n        </ListItem>\n      );\n    }\n\n    const newGamesList = newGames.map(createListItem);\n    const onGoingGamesList = onGoingGames.map(createListItem);\n    const doneGamesList = doneGames.map(createListItem);\n\n    return (\n      <div className=\"GameList\">\n        {\n          onGoingGamesList.length > 0 && (\n            <Paper>\n              <Typography variant=\"h5\">Meine laufenden Spiele</Typography>\n              <List>\n                {onGoingGamesList}\n              </List> \n            </Paper>\n          )\n        }\n        {\n          newGamesList.length > 0 && (\n            <Paper>\n              <Typography variant=\"h5\">Neue Spiele</Typography>\n              <List>\n                {newGamesList}\n              </List> \n            </Paper>\n          )\n        }\n        {\n          doneGamesList.length > 0 && (\n            <Paper>\n              <Typography variant=\"h5\">Meine beendeten Spiele</Typography>\n              <List>\n                {doneGamesList}\n              </List> \n            </Paper>\n          )\n        }\n      </div>\n    );\n  }\n}\n\n/*\nTODO Share Button\n\nimport ShareIcon from '@material-ui/icons/Share';\nimport {AlertBar} from '../common/AlertBar';\n\n  public state: GameListState = {\n    showAlert: false,\n    alertText: ''\n  }\n    const {showAlert,alertText} = this.state;\n\n    const shareGame = (gameId: string) => {\n      const gameUrl = `${window.location.protocol}//${window.location.host}/${gameId}`;\n      navigator.clipboard.writeText(gameUrl);\n      this.setState({\n        showAlert: true,\n        alertText: `Link zum Spiel wurde in die Zwischenablage kopiert`\n      });\n    }\n\n    const hideAlert = ()=> {\n      this.setState({\n        showAlert: false,\n        alertText: ``\n      });\n    }\n\n          {\n            game.phase === GamePhase.Init && (\n              <ListItemSecondaryAction>\n                <IconButton onClick={() => shareGame(game.id)}>\n                  <ShareIcon/>\n                </IconButton>\n              </ListItemSecondaryAction>\n            )\n          }\n\n        <AlertBar show={showAlert} alertText={alertText} onClose={hideAlert}/>\n*/","import React from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport { IGame } from '../custom.d';\nimport { GameList } from './GameList';\n\nimport { GAME_URL, SETTING_ID, SETTING_NAME, APP_TITLE } from '../App';\n\nconst POLLING_INTERVAL = 2000;\n\ntype JustOneHomeProps = {};\ntype JustOneHomeState = {\n  newGameName: string,\n  allGames: IGame[]\n};\n\nexport class JustOneHome extends React.Component<JustOneHomeProps,JustOneHomeState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n  public currentUserName: string = localStorage.getItem(SETTING_NAME) || '';\n\n  private _interval: any; // TODO\n\n  constructor(props: JustOneHomeProps) {\n    super(props);\n\n    this.createGame = this.createGame.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.deleteGame = this.deleteGame.bind(this);\n\n    let newGameName = this.currentUserName ? `${this.currentUserName}s Spiel` : 'Neues Spiel';\n\n    this.state = { allGames: [], newGameName: newGameName };\n  }\n\n  componentDidMount() {\n    document.title = APP_TITLE;\n\n    this.loadGames();\n\n    this._interval = setInterval(this.loadGames.bind(this), POLLING_INTERVAL);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._interval);\n  }\n\n  loadGames() {\n    fetch(`${GAME_URL}/all`)\n      .then(res => res.json())\n      .then((data) => {\n        let games = data.games || [];\n        games = games.filter((game: IGame) => {\n          return game.phase === 0 || (this.currentUserId && game.players.findIndex(p => p.id === this.currentUserId) > -1);\n        });\n        this.setState({\n          allGames: games\n        });\n      })\n      .catch(console.log)\n  }\n\n  deleteGame(gameId: string) {\n    fetch(`${GAME_URL}/delete/${gameId}`, {\n      method: 'DELETE'\n    }).then(res => res.json())\n      .then((data) => {\n        console.log('deleted', data);\n      })\n      .catch(console.log)\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({newGameName: event.target.value});\n  }\n\n  createGame() {\n    const game: IGame = createGame();\n    game.name = this.state.newGameName;\n\n    fetch(`${GAME_URL}/add`, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({game})\n    }).then(res => res.json())\n      .then((data) => {\n        window.location.href = '/' + data.id;\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const {newGameName, allGames} = this.state;\n\n    return (\n      <div className=\"JustOneHome\">\n        <TextField label={'Spielname'}\n            value={newGameName} \n            onChange={this.handleChange} />\n        <Button variant=\"contained\" color=\"primary\" onClick={this.createGame}>Neues Spiel</Button>\n        <GameList allGames={allGames} deleteGame={this.deleteGame}/>\n      </div>\n    );\n  }\n}\n\nfunction createGame(): IGame {\n    return {\"id\":\"\", \"name\": \"\", \"words\":[],\"players\":[],\"host\":\"1\",\"round\":0,\"phase\":0,\"hints\":[],\"correctWords\":[],\"wrongWords\":[]};\n}","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport { Send as SendIcon } from '@material-ui/icons';\nimport TextField from '@material-ui/core/TextField';\n\ntype WordHintInputProps = {\n  submitHint: (hint: string)=>void\n  label?: string\n};\ntype WordHintInputState = {\n  value: string, \n};\n\nexport class WordHintInput extends React.Component<WordHintInputProps,WordHintInputState> {\n\n  constructor(props: WordHintInputProps) {\n  \tsuper(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.submitHint = this.submitHint.bind(this);\n    this.keyPressed = this.keyPressed.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({value: event.target.value});\n  }\n\n  submitHint() {\n  \tthis.props.submitHint(this.state.value)\n  \tthis.setState({value: ''});\n  }\n\n  keyPressed(event: React.KeyboardEvent<HTMLInputElement>) {\n  \tif (event.key === \"Enter\") {\n  \t  this.submitHint()\n  \t}\n  }\n\n  render() {\n    return (\n\t    <div className=\"Word-hint-input\">\n\t    \t<TextField label={this.props.label || 'Hinweis eingeben'}\n\t    \t\tvalue={this.state.value} \n\t    \t\tonChange={this.handleChange} \n\t    \t\tonKeyPress={this.keyPressed} />\n  \t\t\t<IconButton color=\"primary\" \n  \t\t\t\tdisabled={!this.state.value} \n  \t\t\t\tonClick={this.submitHint}>\n          <SendIcon></SendIcon>\n        </IconButton>\n\t    </div>\n    );\n  }\n\n}","import React from 'react';\nimport { Paper } from '@material-ui/core';\nimport { WordHintInput } from './WordHintInput';\n\ntype WordCardProps = {\n\tword: string;\n\tguesser?: string;\n\tcolor?: string;\n  guess?: string;\n  guessedRight?: boolean;\n  showInput?: boolean;\n  submitHint?: (hint:string)=>void\n}\n\nexport class WordCard extends React.Component<WordCardProps> {\n\n  render() {\n  \tconst currentWord = this.props.word;\n    const guesser = this.props.guesser;\n    let guesserText = '';\n    if (guesser) {\n      if (this.props.guess) {\n        guesserText = (guesser.toLowerCase() === 'ich' ? 'Mein ' : (guesser + '\\'s ')) + 'Rateversuch: ' + this.props.guess;\n      } else {\n        guesserText = guesser + ' muss raten';\n      }\n    } else if (this.props.guess) {\n      guesserText = 'Rateversuch: ' + this.props.guess;\n    }\n    const classes = ['Word-card'];\n    if (this.props.guess) {\n      if (this.props.guessedRight) {\n        classes.push('Word-card-correct');\n      } else {\n        classes.push('Word-card-wrong');\n      }\n    }\n\n    return (\n\t    <Paper className={classes.join(' ')} style={{borderColor: this.props.color}}>\n\t    \t{\n          (this.props.showInput && this.props.submitHint) ? \n          <WordHintInput submitHint={this.props.submitHint} label=\"Rateversuch\"/> : \n          <span>{currentWord}</span>\n        }\n        {guesserText && <span className=\"Author-tag\" style={{color: this.props.color}}>{guesserText}</span>}\n\t    </Paper>\n    );\n  }\n\n}","import React from 'react';\n\ntype PencilAnimationProps = {\n\tcolor?: string,\n}\n\nexport class PencilAnimation extends React.Component<PencilAnimationProps> {\n\n  render() {\n    const styleObj1 = {\n    \tbackgroundColor: this.props.color,\n    };\n    const styleObj2 = {\n    \tborderTopColor: this.props.color,\n    };\n\n    return (\n\t  <div className=\"pencil\">\n        <div className=\"body\" style={styleObj1}></div>\n        <div className=\"nib\" style={styleObj2}></div>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { WordHintInput } from './WordHintInput';\nimport { PencilAnimation } from './PencilAnimation';\nimport { Checkbox, Paper } from '@material-ui/core';\nimport { Mood as MoodIcon, MoodBad as MoodBadIcon } from '@material-ui/icons';\n\ntype WordHintProps = {\n\thint?: string,\n\tcolor?: string,\n\tduplicate?: boolean,\n  author?: string,\n  showPencil?: boolean,\n  showCheck?: boolean,\n  showInput?: boolean,\n  submitHint?: (hint:string)=>void,\n  showDuplicateToggle?: boolean,\n  toggleDuplicate?: ()=>void\n}\n\nexport class WordHint extends React.Component<WordHintProps> {\n\n  render() {\n  \tconst currentHint = this.props.hint;\n    const color = this.props.color;\n    const styleObj = {\n    \t'color': color,\n      'borderColor': color\n    };\n    const author = this.props.author;\n    const showPencil = this.props.showPencil || !this.props.hint;\n    const showCheck = this.props.showCheck;\n    const showDuplicateToggle = this.props.showDuplicateToggle;\n    const toggleDuplicate = this.props.toggleDuplicate;\n\n    const classes = ['Word-hint'];\n    if (showPencil) classes.push('Word-hint-writing');\n    if (this.props.duplicate) classes.push('Word-hint-duplicate');\n    if (currentHint && currentHint.length > 20) classes.push('Word-hint-huge');\n    else if (currentHint && currentHint.length > 14) classes.push('Word-hint-long');\n    const extraClasses = classes.join(' ');\n\n    if (this.props.showInput && this.props.submitHint) {\n      return (\n        <Paper className={extraClasses} style={styleObj}>\n          <WordHintInput submitHint={this.props.submitHint}/>\n          {author && <span className=\"Author-tag\">{author}</span>}\n        </Paper>\n      );\n    } else {\n      return (\n        <Paper className={extraClasses} style={styleObj}>\n          {!showCheck && currentHint}\n          {showCheck && <span className=\"Done-icon\">✓</span>}\n          {showPencil && <PencilAnimation color={color}></PencilAnimation>}\n          {showDuplicateToggle && toggleDuplicate && (\n            <Checkbox className=\"Duplicate-toggle\" \n              icon={<MoodIcon />} checkedIcon={<MoodBadIcon />} \n              checked={this.props.duplicate}\n              onChange={()=>toggleDuplicate()}/>\n          )}\n          {author && <span className=\"Author-tag\">{author}</span>}\n        </Paper>\n      );\n    }\n\n    \n  }\n\n}","import React from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport {WordCard} from './WordCard';\nimport { IGame, IHint, IUser, GamePhase } from '../custom.d';\nimport {WordHint} from './WordHint';\n\nimport { GAME_URL } from '../App';\n\nconst SETTING_ID = 'playerId';\n\ntype GameFieldProps = {\n  game: IGame\n};\ntype GameFieldState = {\n\n};\n\nexport class GameField extends React.Component<GameFieldProps,GameFieldState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n  constructor(props: GameFieldProps) {\n    super(props);\n\n    this.submitHint = this.submitHint.bind(this);\n    this.toggleDuplicate = this.toggleDuplicate.bind(this);\n    this.showHints = this.showHints.bind(this);\n    this.guess = this.guess.bind(this);\n    this.resolveRound = this.resolveRound.bind(this);\n\n    this.state = {  };\n  }\n\n  componentDidMount() {\n\n  }\n\n  submitHint(hintWord: string) {\n    const currentUser = getCurrentUser(this.props.game, this.currentUserId);\n    if (!currentUser) return; // TODO\n    const hint: IHint = { hint: hintWord, author: currentUser};\n\n    fetch(`${GAME_URL}/${this.props.game.id}/hint`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({hint})\n    }).catch(console.log)\n  }\n\n  toggleDuplicate(hintIndex: number) {\n    fetch(`${GAME_URL}/${this.props.game.id}/toggleDuplicateHint`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({hintIndex})\n    }).catch(console.log)\n  }\n\n  showHints() {\n    fetch(`${GAME_URL}/${this.props.game.id}/showHints`, {\n      method: 'PUT'\n    }).catch(console.log)\n  }\n\n  guess(guess: string) {\n    fetch(`${GAME_URL}/${this.props.game.id}/guess`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({guess})\n    }).catch(console.log)\n  }\n\n  resolveRound(countCorrect: boolean = true) {\n    fetch(`${GAME_URL}/${this.props.game.id}/resolve`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({countCorrect})\n    }).catch(console.log)\n  }\n\n  render() {\n    const game: IGame = this.props.game;\n    const currentUser = getCurrentUser(game, this.currentUserId); // TODO\n    const guesser = game.currentGuesser ? game.currentGuesser : { name: '?', id: '?' }; // TODO\n    const isGuesser = currentUser && currentUser.id === guesser.id;\n\n    const isWritingPhase = game.phase === GamePhase.HintWriting;\n    const isComparingPhase = game.phase === GamePhase.HintComparing;\n    const isGuessingPhase = game.phase === GamePhase.Guessing;\n    const isSolutionPhase = game.phase === GamePhase.Solution;\n\n    const isRoundHost = game.roundHost && this.currentUserId === game.roundHost.id;\n    const showDuplicateToggle = isRoundHost && isComparingPhase;\n\n    const currentWord = isGuesser && !isSolutionPhase ? '?' : (game.currentWord || '');\n    const currentGuess = game.currentGuess || '';\n    const currentHints = game.hints.map((hintObj: IHint, index: number) => {\n      let hint: string = hintObj.hint;\n      const hintIsMine = currentUser && currentUser.id === hintObj.author.id;\n      const showHint = !hint || isGuessingPhase || isSolutionPhase || hintIsMine || (isComparingPhase && !isGuesser);\n      const showInput = !hint && isWritingPhase && hintIsMine;\n\n      if (isGuessingPhase && isGuesser && hintObj.isDuplicate) {\n        hint = 'LEIDER DOPPELT';\n      } \n\n      const authorName = hintIsMine ? 'Ich' : hintObj.author.name;\n\n      return <WordHint key={hintObj.author.id+index} \n              hint={hint} \n              color={hintObj.author.color}\n              showInput={showInput}\n              submitHint={this.submitHint}\n              showCheck={!showHint}\n              duplicate={hintObj.isDuplicate}\n              showDuplicateToggle={showDuplicateToggle}\n              toggleDuplicate={()=>this.toggleDuplicate(index)}\n              author={authorName}/>\n    });\n    let solutionButton1 = <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(true)}>Super, weiter geht's</Button>;\n    let solutionButton2;\n    if (!game.guessedRight) {\n      solutionButton1 = <Button variant=\"contained\" onClick={() => this.resolveRound(true)}>Das zählt trotzdem</Button>;\n      solutionButton2 = <Button variant=\"contained\" color=\"primary\" onClick={() => this.resolveRound(false)}>Leider falsch</Button>;\n    }\n\n    const showGuessInput = isGuessingPhase && isGuesser;\n    const guesserName = isGuesser ? 'Ich' : guesser.name;\n\n    return (\n      <div className=\"Game-field\">\n        <div className=\"Current-word\">\n          <Typography variant=\"h5\">\n            Begriff\n          </Typography>\n          <WordCard \n            word={currentWord} \n            guesser={guesserName} \n            color={guesser.color} \n            showInput={showGuessInput}\n            submitHint={this.guess}\n            guess={isSolutionPhase ? currentGuess : ''} \n            guessedRight={game.guessedRight}/>\n          {isSolutionPhase && (isRoundHost || game.guessedRight) && solutionButton1}\n          {isSolutionPhase && isRoundHost && solutionButton2}\n        </div>\n        <div className=\"Current-hints\">\n          <Typography variant=\"h5\">\n            Spieler-Hinweise\n          </Typography>\n          <div className=\"WordHint-list\">{currentHints}</div>\n          {isComparingPhase && isRoundHost && (\n            <Typography variant=\"subtitle1\">\n              Benutze die Smiley-Buttons auf den Hinweisen um doppelte oder ungültige Werte zu markieren.\n            </Typography>\n          )}\n          {isComparingPhase && isRoundHost && <Button variant=\"contained\" color=\"primary\" onClick={this.showHints}>{guesser.name + ' kann losraten!'}</Button>}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction getCurrentUser(game: IGame, currentUserId: string): IUser|undefined {\n  return game.players.find(player => player.id === currentUserId);\n}\n","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\n\nexport const allColors: string[] = [\n  '#e51235',\n  '#d81b60',\n  '#8e24aa',\n  '#6e45c1',\n  '#4959cc',\n  '#1e88e5',\n  '#039be5',\n  '#00acc1',\n  '#00897b',\n  '#43a047',\n  '#7cb342',\n  '#c0ca33',\n  '#ffc215',\n  '#ffab00',\n  '#ff6d00',\n  '#f4511e'\n];\n\nexport function getRandomColor(color?: string|null): string {\n  if (!color || !allColors.includes(color)) {\n    return allColors[Math.floor(Math.random()*allColors.length)];\n  } else {\n    return color;\n  }\n}\n\ntype ColorPickerProps = {\n\tselected?: string;\n  select: (color: string)=>void;\n}\n\nexport class ColorPicker extends React.Component<ColorPickerProps> {\n\n  render() {\n  \tconst { selected, select } = this.props;\n\n    const colorButtons = allColors.map((color: string) => {\n      const classes = ['Color-button'];\n      if (selected === color) classes.push('Color-selected');\n      return (\n        <IconButton className={classes.join(' ')} onClick={() => select(color)} style={{ backgroundColor: color }} key={color}>\n          {selected === color && <CheckIcon/>}\n        </IconButton>\n      )\n    });\n\n    return (\n      <div className=\"Color-picker\">\n        { colorButtons }\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { IUser } from '../custom.d';\nimport { Button } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { ColorPicker } from '../common/ColorPicker';\n\ntype NewPlayerProps = {\n  addPlayer: (player: IUser) => void,\n  updatePlayer: (player: IUser) => void,\n  currentPlayer: IUser\n}\n\nexport class NewPlayer extends React.Component<NewPlayerProps> {\n\n  constructor(props: NewPlayerProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.setColor = this.setColor.bind(this);\n    this.addPlayer = this.addPlayer.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.name === 'name') {\n      this.props.currentPlayer.name = event.target.value;\n\n      this.props.updatePlayer(this.props.currentPlayer);   \n\n    }\n  }\n\n  setColor(color: string) {\n    this.props.currentPlayer.color = color;\n    this.props.updatePlayer(this.props.currentPlayer);  \n  }\n\n  addPlayer() {\n    this.props.addPlayer(this.props.currentPlayer);\n  }\n\n  render() {\n    const { currentPlayer } = this.props;\n\n    return (\n      <div className=\"New-player\">\n        <TextField required label=\"Spielername\" \n          name='name'\n          value={currentPlayer.name} \n          onChange={this.handleChange}/>\n        <ColorPicker select={this.setColor} selected={currentPlayer.color}/>\n        <Button variant=\"contained\" color=\"primary\" \n          disabled={!currentPlayer.name} \n          onClick={this.addPlayer}>Mitspielen</Button>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\n\nexport const DEFAULT_NUM_WORDS: number = 2; // Two words per player\n\ntype WordAdderProps = {\n  add: (words: string[])=>void\n}\n\ntype WordAdderState = {\n  words: string[]\n}\n\nexport class WordAdder extends React.Component<WordAdderProps, WordAdderState> {\n\n  public state: WordAdderState = {\n    words: []\n  };\n\n  constructor(props: WordAdderProps) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const index = parseInt(event.target.name.substr(4));\n    const word = event.target.value;\n    this.setState((state, props) => {\n      const newWords = state.words;\n      newWords[index] = word;\n      return {\n        words: newWords\n      };\n    });\n  }\n\n  render() {\n    const { add } = this.props;\n    const { words } = this.state;\n    const numOfWords = DEFAULT_NUM_WORDS;\n    const wordFields = [];\n    if (numOfWords>0) {\n      wordFields.push(\n        <Typography variant=\"subtitle1\" key=\"heading\">\n          Gebe {numOfWords} Wörter für das Spiel ein\n        </Typography>\n      );\n    }\n    for (let i=0; i<numOfWords; i++) {\n      wordFields.push(\n        <TextField required label={`Wort ${i+1}`}\n          placeholder=\"Für den Stapel\"\n          name={`word${i}`}\n          key={`word${i}`}\n          value={words[i]||''} \n          onChange={this.handleChange} />\n      );\n    }\n    let enterDisabled = words.length < numOfWords || words.some(word => !word || word.length === 0);\n\n    return (\n      <div className=\"Word-adder\">\n        {wordFields}\n        <Button variant=\"contained\" color=\"primary\" \n          disabled={enterDisabled} \n          onClick={() => add(words)}>Wörter abschicken</Button>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport { IGame, IUser } from '../custom.d';\nimport { Button } from '@material-ui/core';\nimport { WordHint } from './WordHint';\nimport { NewPlayer } from './NewPlayer';\nimport { WordAdder, DEFAULT_NUM_WORDS  } from './WordAdder';\nimport { getRandomColor } from '../common/ColorPicker';\n\nimport { GAME_URL, SETTING_ID, SETTING_NAME, SETTING_COLOR } from '../App';\n\ntype GameLobbyProps = {\n  game: IGame,\n  setTheme?: (color: string)=>void\n}\ntype GameLobbyState = {\n  currentPlayer: IUser\n}\n\nexport class GameLobby extends React.Component<GameLobbyProps,GameLobbyState> {\n\n  public state: GameLobbyState = { \n    currentPlayer: {\n      id: localStorage.getItem(SETTING_ID) || '',\n      name: localStorage.getItem(SETTING_NAME) || '',\n      color: getRandomColor(localStorage.getItem(SETTING_COLOR))\n    }\n  };\n\n  constructor(props: GameLobbyProps) {\n    super(props);\n\n    this.addPlayer = this.addPlayer.bind(this);\n    this.addWords = this.addWords.bind(this);\n    this.setPlayerProps = this.setPlayerProps.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  setPlayerProps(player: IUser) {\n    this.setState({\n      currentPlayer: player\n    });\n  }\n\n  addPlayer(player: IUser) {\n    fetch(`${GAME_URL}/${this.props.game.id}/addPlayer`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({player})\n    }).then(res => res.json())\n      .then((data) => {\n        this.setLocalPlayer(data.player);\n      })\n      .catch(console.log)\n  }\n\n  addWords(words: string[]) {\n    let player: IUser = this.state.currentPlayer;\n    player.enteredWords = words;\n\n    fetch(`${GAME_URL}/${this.props.game.id}/updatePlayer`, {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({player})\n    }).then(res => res.json())\n      .then((data) => {\n        this.setLocalPlayer(data.player);\n      })\n      .catch(console.log)\n  }\n\n  setLocalPlayer(player: IUser) {\n    localStorage.setItem(SETTING_ID, player.id);\n    localStorage.setItem(SETTING_NAME, player.name);\n    if (player.color) localStorage.setItem('playerColor', player.color);\n    if (this.props.setTheme && player.color) {\n      this.props.setTheme(player.color);\n    }\n    this.setState({\n      currentPlayer: player\n    });\n  }\n\n  startGame() {\n    fetch(`${GAME_URL}/${this.props.game.id}/start`, {\n      method: 'PUT'\n    }).then((data) => {\n        // TODO\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const { game } = this.props;\n    const { currentPlayer } = this.state;\n    const numWordsPerPlayer = DEFAULT_NUM_WORDS;\n    const currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n    let isInGame: boolean = false;\n    //let myWords: string[] = [];\n    let allMyWordsEntered: boolean = false;\n    const listOfPlayers = game.players.map(player => {\n      const wordsEntered: boolean = !!player.enteredWords && player.enteredWords.length === numWordsPerPlayer;\n      if (player.id === currentUserId) {\n        isInGame = true;\n        //myWords = player.enteredWords || [];\n        allMyWordsEntered = wordsEntered;\n      } \n      return (\n        <WordHint key={player.id} hint={player.name} color={player.color} showPencil={!wordsEntered}></WordHint>\n      )\n    });\n    const isHost: boolean = !!currentUserId && game.host === currentUserId;\n    const allWordsEntered: boolean = game.words.length >= numWordsPerPlayer*listOfPlayers.length;\n    const newPlayerName: string = !currentPlayer.name ? '?' : currentPlayer.name;\n    const newPlayerColor: string = !currentPlayer.color ? getRandomColor() : currentPlayer.color;\n\n    return (\n      <div className=\"Game-lobby\">\n        <div className=\"New-player\">\n          { \n            !isInGame && \n            <NewPlayer currentPlayer={currentPlayer}\n              updatePlayer={this.setPlayerProps}\n              addPlayer={this.addPlayer}/>\n          }\n          { \n            isInGame && !allMyWordsEntered &&\n            <WordAdder add={this.addWords}/>\n          }\n          {\n            isHost && \n            <Button variant=\"contained\" color=\"primary\" \n              disabled={game.players.length < 3 || !allWordsEntered} \n              onClick={this.startGame}>Spiel beginnen</Button>\n          }\n        </div>\n        <div className=\"Player-list\">\n          {listOfPlayers}\n          {!isInGame && <WordHint hint={newPlayerName} color={newPlayerColor} showPencil={true}></WordHint>}\n        </div>\n      </div>\n    );\n  }\n\n}","import React from 'react';\nimport {WordCard} from './WordCard';\nimport { IGame } from '../custom.d';\n\ntype GameEndViewProps = {\n  game: IGame\n};\n\nexport class GameEndView extends React.Component<GameEndViewProps> {\n  render() {\n    const game: IGame = this.props.game;\n    const correctWords = game.correctWords.map(wordResult => {\n      return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={true}/>\n    });\n    const wrongWords = game.wrongWords.map(wordResult => {\n      return <WordCard key={wordResult.word} word={wordResult.word} guess={wordResult.guess} guessedRight={false}/>\n    });\n\n    return (\n      <div className=\"Game-end-view\">\n        <div className=\"Correct-words\">\n          <h2>Richtig ({game.correctWords.length})</h2>\n          {correctWords}\n        </div>\n        <div className=\"Wrong-words\">\n          <h2>Falsch ({game.wrongWords.length})</h2>\n          {wrongWords}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { IGame, GamePhase } from '../custom.d';\n\ntype GameStatsProps = {\n  game: IGame\n};\n\nexport class GameStats extends React.Component<GameStatsProps> {\n  render() {\n    const game: IGame = this.props.game;\n    const roundHost = game.roundHost ? game.roundHost.name : '?';\n    const guesser = game.currentGuesser ? game.currentGuesser.name : '?';\n\n    let gamePhase;\n    switch(game.phase) {\n      case GamePhase.HintWriting: \n        const players = game.players.filter(p => game.currentGuesser && p.id !== game.currentGuesser.id).map(p => p.name);\n        const playersString = players.slice(0, players.length-1).join(', ') + ' und ' + players[players.length-1];\n        gamePhase = playersString + ' schreiben Hinweise auf...';\n        break;\n      case GamePhase.HintComparing: \n        gamePhase = roundHost + ' überprüft die Hinweise auf ungültige oder doppelte Wörter...';\n        break;\n      case GamePhase.Guessing: \n        gamePhase = guesser + ' versucht den Begriff zu erraten...';\n        break;\n      case GamePhase.Solution: \n        if (game.guessedRight) {\n          gamePhase = guesser + ' lag genau richtig!';\n        } else {\n          gamePhase = guesser + ' lag daneben! ' + roundHost + ' entscheidet ob es trotzdem zählt...';\n        }\n        break;\n    }\n\n    return (\n      <div className=\"Game-progress\">\n        <div>Runde: {game.round+1}/{game.words.length}, Richtige: {game.correctWords.length}, Falsche: {game.wrongWords.length}</div>\n        <div>Phase: {gamePhase}</div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {GameField} from './GameField';\nimport {GameLobby} from './GameLobby';\nimport {GameEndView} from './GameEndView';\nimport {GameStats} from './GameStats';\nimport { IGame, GamePhase } from '../custom.d';\n\nimport { GAME_URL, SETTING_ID, APP_TITLE } from '../App';\n\nconst POLLING_INTERVAL = 2000;\n\ntype JustOneGameProps = {\n  gameId: string,\n  setTheme?: (color: string)=>void\n};\ntype JustOneGameState = {\n  currentGame?: IGame\n};\n\nexport class JustOneGame extends React.Component<JustOneGameProps,JustOneGameState> {\n  public currentUserId: string = localStorage.getItem(SETTING_ID) || '';\n\n  private _interval: any; // TODO\n\n  constructor(props: JustOneGameProps) {\n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.loadGame();\n\n    this._interval = setInterval(this.loadGame.bind(this), POLLING_INTERVAL);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this._interval);\n  }\n\n  loadGame() {\n    let id = this.props.gameId;\n    if (!id) return;\n\n    fetch(`${GAME_URL}/${id}`)\n      .then(res => res.json())\n      .then((data) => {\n        setDocumentTitle(data.game.name);\n        this.setState({\n          currentGame: data.game\n        });\n      })\n      .catch(console.log)\n  }\n\n  render() {\n    const currentGame: IGame|undefined = this.state.currentGame;\n\n    let gameContent;\n    let gameStats;\n    if (currentGame) {\n      if (currentGame.phase === GamePhase.Init) {\n        gameContent = <GameLobby game={currentGame} setTheme={this.props.setTheme}></GameLobby>\n      } else if (currentGame.phase === GamePhase.End) {\n        gameContent = <GameEndView game={currentGame}></GameEndView>;\n      } else {\n        gameStats = <GameStats game={currentGame}></GameStats>;\n        gameContent = <GameField game={currentGame}></GameField>;\n      }     \n    }\n\n    return (\n      <div className=\"Game-content\">\n        {gameStats}\n        {gameContent}\n      </div>\n    );\n  }\n}\n\nfunction setDocumentTitle(gameName?: string) {\n  if (gameName) {\n    document.title = `${APP_TITLE} - ${gameName}`;\n  } else {\n    document.title = APP_TITLE;\n  }\n}\n","import React from 'react';\nimport {JustOneHome} from './JustOneHome';\nimport {JustOneGame} from './JustOneGame';\n\ntype JustOneProps = {\n  gameId?: string,\n  setTheme?: (color: string)=>void\n};\ntype JustOneState = {\n\n};\n\nexport class JustOne extends React.Component<JustOneProps,JustOneState> {\n  render() {\n    if (this.props.gameId) {\n      return <JustOneGame gameId={this.props.gameId} setTheme={this.props.setTheme}></JustOneGame>;\n    } else {\n      return <JustOneHome></JustOneHome>\n    }\n  }\n}","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport './App.scss';\nimport { AppBar, Toolbar, IconButton, Typography, Paper, Button } from '@material-ui/core';\nimport { Home as HomeIcon, AccountCircle as AccountCircleIcon } from '@material-ui/icons';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nimport {JustOne} from './just-one/JustOne';\nimport { UserConfig } from './common/UserConfig';\n\nconst isProd = window.location.hostname === 'justone.okj.name';\nconst apiPort = isProd ? '' : ':9000';\nexport const API_URL = window.location.protocol + '//' + window.location.hostname + apiPort + '/api';\nexport const GAME_URL = API_URL + '/games';\nexport const SETTING_ID = 'playerId';\nexport const SETTING_NAME = 'playerName';\nexport const SETTING_COLOR = 'playerColor';\nexport const SETTING_THEME = 'darkTheme';\nexport const APP_TITLE = 'Nur ein Wort!';\nconst DEFAULT_PRIMARY_COLOR = '#43a047';\nconst DEFAULT_SECONDARY_COLOR = '#d32f2f'; // also error dark\n\nenum ThemeMode {\n  AUTO = 'automatisch',\n  BRIGHT = 'hell',\n  DARK = 'dunkel'\n}\n\nexport const App = () =>  {\n\n  const [userColor, setUserColor] = useState(localStorage.getItem(SETTING_COLOR));\n  const [userTheme, setUserTheme] = useState(localStorage.getItem(SETTING_THEME) || ThemeMode.AUTO);\n  const currentUserName: string|null = localStorage.getItem(SETTING_NAME);\n  let prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  if (userTheme === ThemeMode.BRIGHT) {\n    prefersDarkMode = false;\n  } else if (userTheme === ThemeMode.DARK) {\n    prefersDarkMode = true;\n  }\n\n  let primaryColor = userColor;\n  if (!primaryColor || !primaryColor.startsWith('#') || primaryColor.length !== 7) {\n    primaryColor = DEFAULT_PRIMARY_COLOR;\n  }\n\n  const applyUserTheme = (value: string) => {\n    setUserTheme(value);\n    localStorage.setItem(SETTING_THEME, value);\n    setUserConfigOpen(false);\n  }\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          primary: {\n            main: primaryColor || DEFAULT_PRIMARY_COLOR\n          },\n          secondary: {\n            main: DEFAULT_SECONDARY_COLOR,\n          }, \n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode, primaryColor],\n  );\n\n  const classNames = ['App'];\n  if (prefersDarkMode) classNames.push('App-dark');\n\n  const [userConfigOpen, setUserConfigOpen] = React.useState(false);\n\n  return (\n    <Router>\n      <ThemeProvider theme={theme}>\n      <Paper elevation={0} className={classNames.join(' ')}>\n        <AppBar position=\"sticky\">\n          <Toolbar>\n            <Link to=\"/\" className=\"ButtonLink\">\n              <IconButton edge=\"start\" color=\"inherit\" aria-label=\"home\">\n                <HomeIcon />\n              </IconButton>\n            </Link>\n            <Typography variant=\"h2\" className=\"appTitle\">\n              Nur ein Wort!\n            </Typography>\n            { \n              currentUserName ? \n              <Button onClick={()=>setUserConfigOpen(true)} className=\"Account-button\" color=\"inherit\" startIcon={<AccountCircleIcon />}>\n                {currentUserName}\n              </Button> : \n              <IconButton onClick={()=>setUserConfigOpen(true)} edge=\"end\" color=\"inherit\">\n                <AccountCircleIcon />\n              </IconButton>\n            }\n            <UserConfig \n              open={userConfigOpen} \n              onClose={applyUserTheme} \n              selectedValue={userTheme} \n              possibleValues={[ThemeMode.AUTO, ThemeMode.BRIGHT, ThemeMode.DARK]}\n            ></UserConfig>\n          </Toolbar>\n        </AppBar>\n        <Switch>\n          <Route path=\"/:gameId\" component={(props: RouteComponentProps<any>) => <JustOne gameId={props.match.params.gameId} setTheme={setUserColor}/>} />\n          <Route children={<JustOne/>} />\n        </Switch> \n      </Paper>  \n    </ThemeProvider>\n    </Router>\n  );  \n}\n\nexport default App;\n","import React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\n\ntype UserConfigProps = {\n  onClose: (value: string)=>void,\n  selectedValue: string,\n  possibleValues: string[],\n  open: boolean\n};\n\nexport class UserConfig extends React.Component<UserConfigProps> {\n  render() {\n    const { open, onClose, selectedValue, possibleValues } = this.props;\n\n    const handleClose = () => {\n      onClose(selectedValue);\n    };\n\n    const handleListItemClick = (value: string) => {\n      onClose(value);\n    };\n\n    return (\n      <Dialog onClose={handleClose} open={open}>\n        <DialogTitle>Nachtmodus</DialogTitle>\n        <List>\n          {possibleValues.map((value: string) => (\n            <ListItem button onClick={() => handleListItemClick(value)} key={value} selected={selectedValue === value}>\n              <ListItemText primary={value} />\n            </ListItem>\n          ))}\n        </List>\n      </Dialog>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}